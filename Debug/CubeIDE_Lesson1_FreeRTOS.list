
CubeIDE_Lesson1_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006878  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08006988  08006988  00016988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bb4  08006bb4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006bb4  08006bb4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006bb4  08006bb4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bb4  08006bb4  00016bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bb8  08006bb8  00016bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003120  20000010  08006bcc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003130  08006bcc  00023130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ef5  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034f6  00000000  00000000  00038f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  0003c428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001370  00000000  00000000  0003d8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b26  00000000  00000000  0003ec40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b69  00000000  00000000  00042766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099641  00000000  00000000  000592cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2910  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000567c  00000000  00000000  000f2960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08006970 	.word	0x08006970

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08006970 	.word	0x08006970

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <USART1_IRQHandler>:
uint16_t channel_Adc_Convert(uint8_t channel);

//char RxBuffer[100] = {"ADC"};
//bool CommandReceived = true;

void USART1_IRQHandler(void){
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
	  if(USART1->SR & USART_SR_RXNE){ 	   // Проверка, что данные пришли
 8000166:	4b11      	ldr	r3, [pc, #68]	; (80001ac <USART1_IRQHandler+0x4c>)
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	f003 0320 	and.w	r3, r3, #32
 800016e:	2b00      	cmp	r3, #0
 8000170:	d019      	beq.n	80001a6 <USART1_IRQHandler+0x46>
		  uint8_t len = strlen(RxBuffer);  // Значение последнего свободного элемента в RxBuffer
 8000172:	480f      	ldr	r0, [pc, #60]	; (80001b0 <USART1_IRQHandler+0x50>)
 8000174:	f7ff ffec 	bl	8000150 <strlen>
 8000178:	4603      	mov	r3, r0
 800017a:	71fb      	strb	r3, [r7, #7]
		  RxBuffer[len] = USART1->DR;      // В последний свободный элемент RxBuffer записываем считанное значение из регистра DR
 800017c:	4b0b      	ldr	r3, [pc, #44]	; (80001ac <USART1_IRQHandler+0x4c>)
 800017e:	685a      	ldr	r2, [r3, #4]
 8000180:	79fb      	ldrb	r3, [r7, #7]
 8000182:	b2d1      	uxtb	r1, r2
 8000184:	4a0a      	ldr	r2, [pc, #40]	; (80001b0 <USART1_IRQHandler+0x50>)
 8000186:	54d1      	strb	r1, [r2, r3]
		  if((RxBuffer[len] == 0x0A) && (RxBuffer[len - 1] ==0x0D)){  		//Значит строка пришла целиком
 8000188:	79fb      	ldrb	r3, [r7, #7]
 800018a:	4a09      	ldr	r2, [pc, #36]	; (80001b0 <USART1_IRQHandler+0x50>)
 800018c:	5cd3      	ldrb	r3, [r2, r3]
 800018e:	2b0a      	cmp	r3, #10
 8000190:	d109      	bne.n	80001a6 <USART1_IRQHandler+0x46>
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	3b01      	subs	r3, #1
 8000196:	4a06      	ldr	r2, [pc, #24]	; (80001b0 <USART1_IRQHandler+0x50>)
 8000198:	5cd3      	ldrb	r3, [r2, r3]
 800019a:	2b0d      	cmp	r3, #13
 800019c:	d103      	bne.n	80001a6 <USART1_IRQHandler+0x46>
			  CommandReceived = true;
 800019e:	4b05      	ldr	r3, [pc, #20]	; (80001b4 <USART1_IRQHandler+0x54>)
 80001a0:	2201      	movs	r2, #1
 80001a2:	701a      	strb	r2, [r3, #0]
			  return;
 80001a4:	bf00      	nop
		  }
	  }
 }
 80001a6:	3708      	adds	r7, #8
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	40013800 	.word	0x40013800
 80001b0:	20000030 	.word	0x20000030
 80001b4:	2000002c 	.word	0x2000002c

080001b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001bc:	f000 fcfe 	bl	8000bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001c0:	f000 f892 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c4:	f000 f9ae 	bl	8000524 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001c8:	f000 f928 	bl	800041c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80001cc:	f000 f980 	bl	80004d0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80001d0:	f000 f8e6 	bl	80003a0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 80001d4:	4829      	ldr	r0, [pc, #164]	; (800027c <main+0xc4>)
 80001d6:	f000 fdfb 	bl	8000dd0 <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80001da:	2108      	movs	r1, #8
 80001dc:	4828      	ldr	r0, [pc, #160]	; (8000280 <main+0xc8>)
 80001de:	f002 f8e1 	bl	80023a4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001e2:	f002 ffbd 	bl	8003160 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BtnSem */
  BtnSemHandle = osSemaphoreNew(1, 0, &BtnSem_attributes);
 80001e6:	4a27      	ldr	r2, [pc, #156]	; (8000284 <main+0xcc>)
 80001e8:	2100      	movs	r1, #0
 80001ea:	2001      	movs	r0, #1
 80001ec:	f003 f8f6 	bl	80033dc <osSemaphoreNew>
 80001f0:	4603      	mov	r3, r0
 80001f2:	4a25      	ldr	r2, [pc, #148]	; (8000288 <main+0xd0>)
 80001f4:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Uart_Queue */
  Uart_QueueHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &Uart_Queue_attributes);
 80001f6:	4a25      	ldr	r2, [pc, #148]	; (800028c <main+0xd4>)
 80001f8:	2180      	movs	r1, #128	; 0x80
 80001fa:	200a      	movs	r0, #10
 80001fc:	f003 fa48 	bl	8003690 <osMessageQueueNew>
 8000200:	4603      	mov	r3, r0
 8000202:	4a23      	ldr	r2, [pc, #140]	; (8000290 <main+0xd8>)
 8000204:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000206:	4a23      	ldr	r2, [pc, #140]	; (8000294 <main+0xdc>)
 8000208:	2100      	movs	r1, #0
 800020a:	4823      	ldr	r0, [pc, #140]	; (8000298 <main+0xe0>)
 800020c:	f003 f80e 	bl	800322c <osThreadNew>
 8000210:	4603      	mov	r3, r0
 8000212:	4a22      	ldr	r2, [pc, #136]	; (800029c <main+0xe4>)
 8000214:	6013      	str	r3, [r2, #0]

  /* creation of Led1_Task */
  Led1_TaskHandle = osThreadNew(StartLed1_Task, NULL, &Led1_Task_attributes);
 8000216:	4a22      	ldr	r2, [pc, #136]	; (80002a0 <main+0xe8>)
 8000218:	2100      	movs	r1, #0
 800021a:	4822      	ldr	r0, [pc, #136]	; (80002a4 <main+0xec>)
 800021c:	f003 f806 	bl	800322c <osThreadNew>
 8000220:	4603      	mov	r3, r0
 8000222:	4a21      	ldr	r2, [pc, #132]	; (80002a8 <main+0xf0>)
 8000224:	6013      	str	r3, [r2, #0]

  /* creation of Led2_Task */
  Led2_TaskHandle = osThreadNew(StartLed2_Task, NULL, &Led2_Task_attributes);
 8000226:	4a21      	ldr	r2, [pc, #132]	; (80002ac <main+0xf4>)
 8000228:	2100      	movs	r1, #0
 800022a:	4821      	ldr	r0, [pc, #132]	; (80002b0 <main+0xf8>)
 800022c:	f002 fffe 	bl	800322c <osThreadNew>
 8000230:	4603      	mov	r3, r0
 8000232:	4a20      	ldr	r2, [pc, #128]	; (80002b4 <main+0xfc>)
 8000234:	6013      	str	r3, [r2, #0]

  /* creation of ReadBtn_Task */
  ReadBtn_TaskHandle = osThreadNew(StartReadBtn_Task, NULL, &ReadBtn_Task_attributes);
 8000236:	4a20      	ldr	r2, [pc, #128]	; (80002b8 <main+0x100>)
 8000238:	2100      	movs	r1, #0
 800023a:	4820      	ldr	r0, [pc, #128]	; (80002bc <main+0x104>)
 800023c:	f002 fff6 	bl	800322c <osThreadNew>
 8000240:	4603      	mov	r3, r0
 8000242:	4a1f      	ldr	r2, [pc, #124]	; (80002c0 <main+0x108>)
 8000244:	6013      	str	r3, [r2, #0]

  /* creation of Led3_Task */
  Led3_TaskHandle = osThreadNew(StartLed3_Task, NULL, &Led3_Task_attributes);
 8000246:	4a1f      	ldr	r2, [pc, #124]	; (80002c4 <main+0x10c>)
 8000248:	2100      	movs	r1, #0
 800024a:	481f      	ldr	r0, [pc, #124]	; (80002c8 <main+0x110>)
 800024c:	f002 ffee 	bl	800322c <osThreadNew>
 8000250:	4603      	mov	r3, r0
 8000252:	4a1e      	ldr	r2, [pc, #120]	; (80002cc <main+0x114>)
 8000254:	6013      	str	r3, [r2, #0]

  /* creation of ADC_Task */
  ADC_TaskHandle = osThreadNew(StartADC_Task, NULL, &ADC_Task_attributes);
 8000256:	4a1e      	ldr	r2, [pc, #120]	; (80002d0 <main+0x118>)
 8000258:	2100      	movs	r1, #0
 800025a:	481e      	ldr	r0, [pc, #120]	; (80002d4 <main+0x11c>)
 800025c:	f002 ffe6 	bl	800322c <osThreadNew>
 8000260:	4603      	mov	r3, r0
 8000262:	4a1d      	ldr	r2, [pc, #116]	; (80002d8 <main+0x120>)
 8000264:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(StartUART_Task, NULL, &UART_Task_attributes);
 8000266:	4a1d      	ldr	r2, [pc, #116]	; (80002dc <main+0x124>)
 8000268:	2100      	movs	r1, #0
 800026a:	481d      	ldr	r0, [pc, #116]	; (80002e0 <main+0x128>)
 800026c:	f002 ffde 	bl	800322c <osThreadNew>
 8000270:	4603      	mov	r3, r0
 8000272:	4a1c      	ldr	r2, [pc, #112]	; (80002e4 <main+0x12c>)
 8000274:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000276:	f002 ffa5 	bl	80031c4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800027a:	e7fe      	b.n	800027a <main+0xc2>
 800027c:	20000094 	.word	0x20000094
 8000280:	200000c4 	.word	0x200000c4
 8000284:	08006b78 	.word	0x08006b78
 8000288:	20001748 	.word	0x20001748
 800028c:	08006b60 	.word	0x08006b60
 8000290:	200011f4 	.word	0x200011f4
 8000294:	08006a64 	.word	0x08006a64
 8000298:	080005d1 	.word	0x080005d1
 800029c:	20000154 	.word	0x20000154
 80002a0:	08006a88 	.word	0x08006a88
 80002a4:	080005e1 	.word	0x080005e1
 80002a8:	200003b4 	.word	0x200003b4
 80002ac:	08006aac 	.word	0x08006aac
 80002b0:	080005fd 	.word	0x080005fd
 80002b4:	20000614 	.word	0x20000614
 80002b8:	08006ad0 	.word	0x08006ad0
 80002bc:	08000649 	.word	0x08000649
 80002c0:	20000874 	.word	0x20000874
 80002c4:	08006af4 	.word	0x08006af4
 80002c8:	080006a5 	.word	0x080006a5
 80002cc:	20000ad4 	.word	0x20000ad4
 80002d0:	08006b18 	.word	0x08006b18
 80002d4:	080006dd 	.word	0x080006dd
 80002d8:	20000d34 	.word	0x20000d34
 80002dc:	08006b3c 	.word	0x08006b3c
 80002e0:	08000785 	.word	0x08000785
 80002e4:	20000f94 	.word	0x20000f94

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b094      	sub	sp, #80	; 0x50
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002f2:	2228      	movs	r2, #40	; 0x28
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f006 fb32 	bl	8006960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fc:	f107 0314 	add.w	r3, r7, #20
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]
 8000308:	60da      	str	r2, [r3, #12]
 800030a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000318:	2301      	movs	r3, #1
 800031a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800031c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000320:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000326:	2301      	movs	r3, #1
 8000328:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032a:	2302      	movs	r3, #2
 800032c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800032e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000332:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000334:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000338:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800033e:	4618      	mov	r0, r3
 8000340:	f001 fa40 	bl	80017c4 <HAL_RCC_OscConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800034a:	f000 fa51 	bl	80007f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034e:	230f      	movs	r3, #15
 8000350:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000352:	2302      	movs	r3, #2
 8000354:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800035a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800035e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000364:	f107 0314 	add.w	r3, r7, #20
 8000368:	2102      	movs	r1, #2
 800036a:	4618      	mov	r0, r3
 800036c:	f001 fcac 	bl	8001cc8 <HAL_RCC_ClockConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000376:	f000 fa3b 	bl	80007f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800037a:	2302      	movs	r3, #2
 800037c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800037e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000382:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	4618      	mov	r0, r3
 8000388:	f001 fe5c 	bl	8002044 <HAL_RCCEx_PeriphCLKConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000392:	f000 fa2d 	bl	80007f0 <Error_Handler>
  }
}
 8000396:	bf00      	nop
 8000398:	3750      	adds	r7, #80	; 0x50
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003b0:	4b18      	ldr	r3, [pc, #96]	; (8000414 <MX_ADC1_Init+0x74>)
 80003b2:	4a19      	ldr	r2, [pc, #100]	; (8000418 <MX_ADC1_Init+0x78>)
 80003b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003b6:	4b17      	ldr	r3, [pc, #92]	; (8000414 <MX_ADC1_Init+0x74>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003bc:	4b15      	ldr	r3, [pc, #84]	; (8000414 <MX_ADC1_Init+0x74>)
 80003be:	2201      	movs	r2, #1
 80003c0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003c2:	4b14      	ldr	r3, [pc, #80]	; (8000414 <MX_ADC1_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <MX_ADC1_Init+0x74>)
 80003ca:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003d0:	4b10      	ldr	r3, [pc, #64]	; (8000414 <MX_ADC1_Init+0x74>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80003d6:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <MX_ADC1_Init+0x74>)
 80003d8:	2201      	movs	r2, #1
 80003da:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003dc:	480d      	ldr	r0, [pc, #52]	; (8000414 <MX_ADC1_Init+0x74>)
 80003de:	f000 fc1f 	bl	8000c20 <HAL_ADC_Init>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80003e8:	f000 fa02 	bl	80007f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80003ec:	2308      	movs	r3, #8
 80003ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003f0:	2301      	movs	r3, #1
 80003f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003f4:	2300      	movs	r3, #0
 80003f6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	4619      	mov	r1, r3
 80003fc:	4805      	ldr	r0, [pc, #20]	; (8000414 <MX_ADC1_Init+0x74>)
 80003fe:	f000 fda1 	bl	8000f44 <HAL_ADC_ConfigChannel>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000408:	f000 f9f2 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800040c:	bf00      	nop
 800040e:	3710      	adds	r7, #16
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000094 	.word	0x20000094
 8000418:	40012400 	.word	0x40012400

0800041c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08a      	sub	sp, #40	; 0x28
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000422:	f107 0320 	add.w	r3, r7, #32
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
 8000438:	611a      	str	r2, [r3, #16]
 800043a:	615a      	str	r2, [r3, #20]
 800043c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800043e:	4b23      	ldr	r3, [pc, #140]	; (80004cc <MX_TIM2_Init+0xb0>)
 8000440:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000444:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 300;
 8000446:	4b21      	ldr	r3, [pc, #132]	; (80004cc <MX_TIM2_Init+0xb0>)
 8000448:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800044c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800044e:	4b1f      	ldr	r3, [pc, #124]	; (80004cc <MX_TIM2_Init+0xb0>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4095;
 8000454:	4b1d      	ldr	r3, [pc, #116]	; (80004cc <MX_TIM2_Init+0xb0>)
 8000456:	f640 72ff 	movw	r2, #4095	; 0xfff
 800045a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800045c:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <MX_TIM2_Init+0xb0>)
 800045e:	2200      	movs	r2, #0
 8000460:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000462:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <MX_TIM2_Init+0xb0>)
 8000464:	2200      	movs	r2, #0
 8000466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000468:	4818      	ldr	r0, [pc, #96]	; (80004cc <MX_TIM2_Init+0xb0>)
 800046a:	f001 ff4b 	bl	8002304 <HAL_TIM_PWM_Init>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000474:	f000 f9bc 	bl	80007f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000478:	2300      	movs	r3, #0
 800047a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800047c:	2300      	movs	r3, #0
 800047e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000480:	f107 0320 	add.w	r3, r7, #32
 8000484:	4619      	mov	r1, r3
 8000486:	4811      	ldr	r0, [pc, #68]	; (80004cc <MX_TIM2_Init+0xb0>)
 8000488:	f002 fc2a 	bl	8002ce0 <HAL_TIMEx_MasterConfigSynchronization>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000492:	f000 f9ad 	bl	80007f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000496:	2360      	movs	r3, #96	; 0x60
 8000498:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800049e:	2300      	movs	r3, #0
 80004a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004a2:	2300      	movs	r3, #0
 80004a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2208      	movs	r2, #8
 80004aa:	4619      	mov	r1, r3
 80004ac:	4807      	ldr	r0, [pc, #28]	; (80004cc <MX_TIM2_Init+0xb0>)
 80004ae:	f002 f923 	bl	80026f8 <HAL_TIM_PWM_ConfigChannel>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80004b8:	f000 f99a 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004bc:	4803      	ldr	r0, [pc, #12]	; (80004cc <MX_TIM2_Init+0xb0>)
 80004be:	f000 fa2d 	bl	800091c <HAL_TIM_MspPostInit>

}
 80004c2:	bf00      	nop
 80004c4:	3728      	adds	r7, #40	; 0x28
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	200000c4 	.word	0x200000c4

080004d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004d4:	4b11      	ldr	r3, [pc, #68]	; (800051c <MX_USART1_UART_Init+0x4c>)
 80004d6:	4a12      	ldr	r2, [pc, #72]	; (8000520 <MX_USART1_UART_Init+0x50>)
 80004d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004da:	4b10      	ldr	r3, [pc, #64]	; (800051c <MX_USART1_UART_Init+0x4c>)
 80004dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004e2:	4b0e      	ldr	r3, [pc, #56]	; (800051c <MX_USART1_UART_Init+0x4c>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <MX_USART1_UART_Init+0x4c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004ee:	4b0b      	ldr	r3, [pc, #44]	; (800051c <MX_USART1_UART_Init+0x4c>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004f4:	4b09      	ldr	r3, [pc, #36]	; (800051c <MX_USART1_UART_Init+0x4c>)
 80004f6:	220c      	movs	r2, #12
 80004f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004fa:	4b08      	ldr	r3, [pc, #32]	; (800051c <MX_USART1_UART_Init+0x4c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <MX_USART1_UART_Init+0x4c>)
 8000502:	2200      	movs	r2, #0
 8000504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000506:	4805      	ldr	r0, [pc, #20]	; (800051c <MX_USART1_UART_Init+0x4c>)
 8000508:	f002 fc5a 	bl	8002dc0 <HAL_UART_Init>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000512:	f000 f96d 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	2000010c 	.word	0x2000010c
 8000520:	40013800 	.word	0x40013800

08000524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052a:	f107 0310 	add.w	r3, r7, #16
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000538:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <MX_GPIO_Init+0xa4>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a22      	ldr	r2, [pc, #136]	; (80005c8 <MX_GPIO_Init+0xa4>)
 800053e:	f043 0320 	orr.w	r3, r3, #32
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b20      	ldr	r3, [pc, #128]	; (80005c8 <MX_GPIO_Init+0xa4>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0320 	and.w	r3, r3, #32
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000550:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <MX_GPIO_Init+0xa4>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a1c      	ldr	r2, [pc, #112]	; (80005c8 <MX_GPIO_Init+0xa4>)
 8000556:	f043 0304 	orr.w	r3, r3, #4
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <MX_GPIO_Init+0xa4>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f003 0304 	and.w	r3, r3, #4
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000568:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <MX_GPIO_Init+0xa4>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	4a16      	ldr	r2, [pc, #88]	; (80005c8 <MX_GPIO_Init+0xa4>)
 800056e:	f043 0308 	orr.w	r3, r3, #8
 8000572:	6193      	str	r3, [r2, #24]
 8000574:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <MX_GPIO_Init+0xa4>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	f003 0308 	and.w	r3, r3, #8
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led1_Pin|Led2_Pin|Led3_Pin, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	2158      	movs	r1, #88	; 0x58
 8000584:	4811      	ldr	r0, [pc, #68]	; (80005cc <MX_GPIO_Init+0xa8>)
 8000586:	f001 f8ec 	bl	8001762 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Btn_Pin */
  GPIO_InitStruct.Pin = Btn_Pin;
 800058a:	2304      	movs	r3, #4
 800058c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Btn_GPIO_Port, &GPIO_InitStruct);
 8000596:	f107 0310 	add.w	r3, r7, #16
 800059a:	4619      	mov	r1, r3
 800059c:	480b      	ldr	r0, [pc, #44]	; (80005cc <MX_GPIO_Init+0xa8>)
 800059e:	f000 ff45 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pins : Led1_Pin Led2_Pin Led3_Pin */
  GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin|Led3_Pin;
 80005a2:	2358      	movs	r3, #88	; 0x58
 80005a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a6:	2301      	movs	r3, #1
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ae:	2302      	movs	r3, #2
 80005b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b2:	f107 0310 	add.w	r3, r7, #16
 80005b6:	4619      	mov	r1, r3
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <MX_GPIO_Init+0xa8>)
 80005ba:	f000 ff37 	bl	800142c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005be:	bf00      	nop
 80005c0:	3720      	adds	r7, #32
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40010800 	.word	0x40010800

080005d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005d8:	2001      	movs	r0, #1
 80005da:	f002 fed1 	bl	8003380 <osDelay>
 80005de:	e7fb      	b.n	80005d8 <StartDefaultTask+0x8>

080005e0 <StartLed1_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLed1_Task */
void StartLed1_Task(void *argument)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLed1_Task */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(Led1_GPIO_Port, Led1_Pin);
 80005e8:	2108      	movs	r1, #8
 80005ea:	4803      	ldr	r0, [pc, #12]	; (80005f8 <StartLed1_Task+0x18>)
 80005ec:	f001 f8d1 	bl	8001792 <HAL_GPIO_TogglePin>
    osDelay(100);
 80005f0:	2064      	movs	r0, #100	; 0x64
 80005f2:	f002 fec5 	bl	8003380 <osDelay>
	HAL_GPIO_TogglePin(Led1_GPIO_Port, Led1_Pin);
 80005f6:	e7f7      	b.n	80005e8 <StartLed1_Task+0x8>
 80005f8:	40010800 	.word	0x40010800

080005fc <StartLed2_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLed2_Task */
void StartLed2_Task(void *argument)
{
 80005fc:	b5b0      	push	{r4, r5, r7, lr}
 80005fe:	b0a2      	sub	sp, #136	; 0x88
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLed2_Task */
	QUEUE_t msg;
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(Led2_GPIO_Port, Led2_Pin);
 8000604:	2110      	movs	r1, #16
 8000606:	480d      	ldr	r0, [pc, #52]	; (800063c <StartLed2_Task+0x40>)
 8000608:	f001 f8c3 	bl	8001792 <HAL_GPIO_TogglePin>
	  strcpy(msg.Buf,"Led2 blink with delay 100mc\r\n\0");
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	4a0b      	ldr	r2, [pc, #44]	; (8000640 <StartLed2_Task+0x44>)
 8000612:	461c      	mov	r4, r3
 8000614:	4615      	mov	r5, r2
 8000616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800061e:	c407      	stmia	r4!, {r0, r1, r2}
 8000620:	8023      	strh	r3, [r4, #0]
	  osMessageQueuePut(Uart_QueueHandle, &msg,0 , osWaitForever);				//Отправляем строку в очередь
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <StartLed2_Task+0x48>)
 8000624:	6818      	ldr	r0, [r3, #0]
 8000626:	f107 0108 	add.w	r1, r7, #8
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	2200      	movs	r2, #0
 8000630:	f003 f8b4 	bl	800379c <osMessageQueuePut>
	  osDelay(100);
 8000634:	2064      	movs	r0, #100	; 0x64
 8000636:	f002 fea3 	bl	8003380 <osDelay>
	  HAL_GPIO_TogglePin(Led2_GPIO_Port, Led2_Pin);
 800063a:	e7e3      	b.n	8000604 <StartLed2_Task+0x8>
 800063c:	40010800 	.word	0x40010800
 8000640:	080069f4 	.word	0x080069f4
 8000644:	200011f4 	.word	0x200011f4

08000648 <StartReadBtn_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadBtn_Task */
void StartReadBtn_Task(void *argument)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b0a3      	sub	sp, #140	; 0x8c
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadBtn_Task */
	QUEUE_t message;
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(Btn_GPIO_Port, Btn_Pin))
 8000650:	2104      	movs	r1, #4
 8000652:	4810      	ldr	r0, [pc, #64]	; (8000694 <StartReadBtn_Task+0x4c>)
 8000654:	f001 f86e 	bl	8001734 <HAL_GPIO_ReadPin>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d015      	beq.n	800068a <StartReadBtn_Task+0x42>
		{
			osSemaphoreRelease(BtnSemHandle); //Даем семафору 1
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <StartReadBtn_Task+0x50>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4618      	mov	r0, r3
 8000664:	f002 ffbc 	bl	80035e0 <osSemaphoreRelease>
			strcpy(message.Buf, "Btn presses\r\n\0"); //
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	4a0b      	ldr	r2, [pc, #44]	; (800069c <StartReadBtn_Task+0x54>)
 800066e:	461c      	mov	r4, r3
 8000670:	4613      	mov	r3, r2
 8000672:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000674:	c407      	stmia	r4!, {r0, r1, r2}
 8000676:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(Uart_QueueHandle, &message,0 , osWaitForever);		//Отправляем строку в очередь
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <StartReadBtn_Task+0x58>)
 800067a:	6818      	ldr	r0, [r3, #0]
 800067c:	f107 0108 	add.w	r1, r7, #8
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	2200      	movs	r2, #0
 8000686:	f003 f889 	bl	800379c <osMessageQueuePut>
		}
    osDelay(100);
 800068a:	2064      	movs	r0, #100	; 0x64
 800068c:	f002 fe78 	bl	8003380 <osDelay>
	if(HAL_GPIO_ReadPin(Btn_GPIO_Port, Btn_Pin))
 8000690:	e7de      	b.n	8000650 <StartReadBtn_Task+0x8>
 8000692:	bf00      	nop
 8000694:	40010800 	.word	0x40010800
 8000698:	20001748 	.word	0x20001748
 800069c:	08006a14 	.word	0x08006a14
 80006a0:	200011f4 	.word	0x200011f4

080006a4 <StartLed3_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLed3_Task */
void StartLed3_Task(void *argument)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLed3_Task */
  /* Infinite loop */
  for(;;)
  {
	if(osSemaphoreAcquire(BtnSemHandle, osWaitForever) == osOK) // osWaitForever -  бесконечное ожидание
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <StartLed3_Task+0x30>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f04f 31ff 	mov.w	r1, #4294967295
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 ff2d 	bl	8003514 <osSemaphoreAcquire>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d103      	bne.n	80006c8 <StartLed3_Task+0x24>
		{
		HAL_GPIO_TogglePin(Led3_GPIO_Port, Led3_Pin);
 80006c0:	2140      	movs	r1, #64	; 0x40
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <StartLed3_Task+0x34>)
 80006c4:	f001 f865 	bl	8001792 <HAL_GPIO_TogglePin>
		}
    osDelay(1000);
 80006c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006cc:	f002 fe58 	bl	8003380 <osDelay>
	if(osSemaphoreAcquire(BtnSemHandle, osWaitForever) == osOK) // osWaitForever -  бесконечное ожидание
 80006d0:	e7ec      	b.n	80006ac <StartLed3_Task+0x8>
 80006d2:	bf00      	nop
 80006d4:	20001748 	.word	0x20001748
 80006d8:	40010800 	.word	0x40010800

080006dc <StartADC_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC_Task */
void StartADC_Task(void *argument)
{
 80006dc:	b5b0      	push	{r4, r5, r7, lr}
 80006de:	b0a4      	sub	sp, #144	; 0x90
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC_Task */
	QUEUE_t adc_msg;
  /* Infinite loop */
  for(;;)
  {
	uint16_t adc_res = HAL_ADC_GetValue(&hadc1); 			// записывае значение с АЦП
 80006e4:	4822      	ldr	r0, [pc, #136]	; (8000770 <StartADC_Task+0x94>)
 80006e6:	f000 fc21 	bl	8000f2c <HAL_ADC_GetValue>
 80006ea:	4603      	mov	r3, r0
 80006ec:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,adc_res);	// передаем значение adc_res в модуль ШИМ (Таймер 2, канал 3)
 80006f0:	4b20      	ldr	r3, [pc, #128]	; (8000774 <StartADC_Task+0x98>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80006f8:	63da      	str	r2, [r3, #60]	; 0x3c

	if(adc_res == 0)
 80006fa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d114      	bne.n	800072c <StartADC_Task+0x50>
		{
			strcpy(adc_msg.Buf, "Value ADC = 0\r\n\0");
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <StartADC_Task+0x9c>)
 8000708:	461c      	mov	r4, r3
 800070a:	4613      	mov	r3, r2
 800070c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800070e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMessageQueuePut(Uart_QueueHandle, &adc_msg,0 , osWaitForever);//Отправляем строку в очередь
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <StartADC_Task+0xa0>)
 8000714:	6818      	ldr	r0, [r3, #0]
 8000716:	f107 010c 	add.w	r1, r7, #12
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
 800071e:	2200      	movs	r2, #0
 8000720:	f003 f83c 	bl	800379c <osMessageQueuePut>
			osDelay(200);
 8000724:	20c8      	movs	r0, #200	; 0xc8
 8000726:	f002 fe2b 	bl	8003380 <osDelay>
 800072a:	e01d      	b.n	8000768 <StartADC_Task+0x8c>
		}
	else if(adc_res >= 4000)
 800072c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8000730:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000734:	d318      	bcc.n	8000768 <StartADC_Task+0x8c>
		{
			strcpy(adc_msg.Buf, "Value ADC is max\r\n\0");
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	4a11      	ldr	r2, [pc, #68]	; (8000780 <StartADC_Task+0xa4>)
 800073c:	461c      	mov	r4, r3
 800073e:	4615      	mov	r5, r2
 8000740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000744:	682b      	ldr	r3, [r5, #0]
 8000746:	461a      	mov	r2, r3
 8000748:	8022      	strh	r2, [r4, #0]
 800074a:	3402      	adds	r4, #2
 800074c:	0c1b      	lsrs	r3, r3, #16
 800074e:	7023      	strb	r3, [r4, #0]
			osMessageQueuePut(Uart_QueueHandle, &adc_msg,0 , osWaitForever);//Отправляем строку в очередь
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <StartADC_Task+0xa0>)
 8000752:	6818      	ldr	r0, [r3, #0]
 8000754:	f107 010c 	add.w	r1, r7, #12
 8000758:	f04f 33ff 	mov.w	r3, #4294967295
 800075c:	2200      	movs	r2, #0
 800075e:	f003 f81d 	bl	800379c <osMessageQueuePut>
			osDelay(200);
 8000762:	20c8      	movs	r0, #200	; 0xc8
 8000764:	f002 fe0c 	bl	8003380 <osDelay>
		}
    osDelay(100);
 8000768:	2064      	movs	r0, #100	; 0x64
 800076a:	f002 fe09 	bl	8003380 <osDelay>
  {
 800076e:	e7b9      	b.n	80006e4 <StartADC_Task+0x8>
 8000770:	20000094 	.word	0x20000094
 8000774:	200000c4 	.word	0x200000c4
 8000778:	08006a24 	.word	0x08006a24
 800077c:	200011f4 	.word	0x200011f4
 8000780:	08006a38 	.word	0x08006a38

08000784 <StartUART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART_Task */
void StartUART_Task(void *argument)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b0a2      	sub	sp, #136	; 0x88
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUART_Task */
	QUEUE_t message;
  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(Uart_QueueHandle, &message, 0 , osWaitForever);	//
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <StartUART_Task+0x40>)
 800078e:	6818      	ldr	r0, [r3, #0]
 8000790:	f107 0108 	add.w	r1, r7, #8
 8000794:	f04f 33ff 	mov.w	r3, #4294967295
 8000798:	2200      	movs	r2, #0
 800079a:	f003 f873 	bl	8003884 <osMessageQueueGet>
	HAL_UART_Transmit(&huart1, (uint8_t*)message.Buf, strlen(message.Buf), osWaitForever);//Отправляем полученные данные по UART
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff fcd4 	bl	8000150 <strlen>
 80007a8:	4603      	mov	r3, r0
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	f107 0108 	add.w	r1, r7, #8
 80007b0:	f04f 33ff 	mov.w	r3, #4294967295
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <StartUART_Task+0x44>)
 80007b6:	f002 fb53 	bl	8002e60 <HAL_UART_Transmit>
    osDelay(1);
 80007ba:	2001      	movs	r0, #1
 80007bc:	f002 fde0 	bl	8003380 <osDelay>
	osMessageQueueGet(Uart_QueueHandle, &message, 0 , osWaitForever);	//
 80007c0:	e7e4      	b.n	800078c <StartUART_Task+0x8>
 80007c2:	bf00      	nop
 80007c4:	200011f4 	.word	0x200011f4
 80007c8:	2000010c 	.word	0x2000010c

080007cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a04      	ldr	r2, [pc, #16]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d101      	bne.n	80007e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007de:	f000 fa03 	bl	8000be8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40012c00 	.word	0x40012c00

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <Error_Handler+0x8>
	...

080007fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_MspInit+0x68>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	4a17      	ldr	r2, [pc, #92]	; (8000864 <HAL_MspInit+0x68>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6193      	str	r3, [r2, #24]
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <HAL_MspInit+0x68>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HAL_MspInit+0x68>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	4a11      	ldr	r2, [pc, #68]	; (8000864 <HAL_MspInit+0x68>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000824:	61d3      	str	r3, [r2, #28]
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <HAL_MspInit+0x68>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	210f      	movs	r1, #15
 8000836:	f06f 0001 	mvn.w	r0, #1
 800083a:	f000 fdcc 	bl	80013d6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <HAL_MspInit+0x6c>)
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	4a04      	ldr	r2, [pc, #16]	; (8000868 <HAL_MspInit+0x6c>)
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000
 8000868:	40010000 	.word	0x40010000

0800086c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a14      	ldr	r2, [pc, #80]	; (80008d8 <HAL_ADC_MspInit+0x6c>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d121      	bne.n	80008d0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <HAL_ADC_MspInit+0x70>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a12      	ldr	r2, [pc, #72]	; (80008dc <HAL_ADC_MspInit+0x70>)
 8000892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b10      	ldr	r3, [pc, #64]	; (80008dc <HAL_ADC_MspInit+0x70>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a4:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <HAL_ADC_MspInit+0x70>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <HAL_ADC_MspInit+0x70>)
 80008aa:	f043 0308 	orr.w	r3, r3, #8
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <HAL_ADC_MspInit+0x70>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0308 	and.w	r3, r3, #8
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008bc:	2301      	movs	r3, #1
 80008be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c0:	2303      	movs	r3, #3
 80008c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4619      	mov	r1, r3
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <HAL_ADC_MspInit+0x74>)
 80008cc:	f000 fdae 	bl	800142c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008d0:	bf00      	nop
 80008d2:	3720      	adds	r7, #32
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40012400 	.word	0x40012400
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40010c00 	.word	0x40010c00

080008e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008f4:	d10b      	bne.n	800090e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <HAL_TIM_PWM_MspInit+0x34>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	4a07      	ldr	r2, [pc, #28]	; (8000918 <HAL_TIM_PWM_MspInit+0x34>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	61d3      	str	r3, [r2, #28]
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_TIM_PWM_MspInit+0x34>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800090e:	bf00      	nop
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr
 8000918:	40021000 	.word	0x40021000

0800091c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800093a:	d12a      	bne.n	8000992 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <HAL_TIM_MspPostInit+0x80>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a16      	ldr	r2, [pc, #88]	; (800099c <HAL_TIM_MspPostInit+0x80>)
 8000942:	f043 0308 	orr.w	r3, r3, #8
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <HAL_TIM_MspPostInit+0x80>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f003 0308 	and.w	r3, r3, #8
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000958:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2302      	movs	r3, #2
 8000960:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	4619      	mov	r1, r3
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <HAL_TIM_MspPostInit+0x84>)
 800096a:	f000 fd5f 	bl	800142c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <HAL_TIM_MspPostInit+0x88>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	61fb      	str	r3, [r7, #28]
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800097a:	61fb      	str	r3, [r7, #28]
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000982:	61fb      	str	r3, [r7, #28]
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800098a:	61fb      	str	r3, [r7, #28]
 800098c:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <HAL_TIM_MspPostInit+0x88>)
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000992:	bf00      	nop
 8000994:	3720      	adds	r7, #32
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000
 80009a0:	40010c00 	.word	0x40010c00
 80009a4:	40010000 	.word	0x40010000

080009a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <HAL_UART_MspInit+0x8c>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d131      	bne.n	8000a2c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009c8:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <HAL_UART_MspInit+0x90>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a1a      	ldr	r2, [pc, #104]	; (8000a38 <HAL_UART_MspInit+0x90>)
 80009ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d2:	6193      	str	r3, [r2, #24]
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <HAL_UART_MspInit+0x90>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <HAL_UART_MspInit+0x90>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <HAL_UART_MspInit+0x90>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	6193      	str	r3, [r2, #24]
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_UART_MspInit+0x90>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 0310 	add.w	r3, r7, #16
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	480b      	ldr	r0, [pc, #44]	; (8000a3c <HAL_UART_MspInit+0x94>)
 8000a0e:	f000 fd0d 	bl	800142c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	4619      	mov	r1, r3
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <HAL_UART_MspInit+0x94>)
 8000a28:	f000 fd00 	bl	800142c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a2c:	bf00      	nop
 8000a2e:	3720      	adds	r7, #32
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40013800 	.word	0x40013800
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40010800 	.word	0x40010800

08000a40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	; 0x30
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a50:	2300      	movs	r3, #0
 8000a52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a56:	4b2e      	ldr	r3, [pc, #184]	; (8000b10 <HAL_InitTick+0xd0>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	4a2d      	ldr	r2, [pc, #180]	; (8000b10 <HAL_InitTick+0xd0>)
 8000a5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a60:	6193      	str	r3, [r2, #24]
 8000a62:	4b2b      	ldr	r3, [pc, #172]	; (8000b10 <HAL_InitTick+0xd0>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a6e:	f107 020c 	add.w	r2, r7, #12
 8000a72:	f107 0310 	add.w	r3, r7, #16
 8000a76:	4611      	mov	r1, r2
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f001 fa95 	bl	8001fa8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a7e:	f001 fa7f 	bl	8001f80 <HAL_RCC_GetPCLK2Freq>
 8000a82:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a86:	4a23      	ldr	r2, [pc, #140]	; (8000b14 <HAL_InitTick+0xd4>)
 8000a88:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8c:	0c9b      	lsrs	r3, r3, #18
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <HAL_InitTick+0xd8>)
 8000a94:	4a21      	ldr	r2, [pc, #132]	; (8000b1c <HAL_InitTick+0xdc>)
 8000a96:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <HAL_InitTick+0xd8>)
 8000a9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a9e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000aa0:	4a1d      	ldr	r2, [pc, #116]	; (8000b18 <HAL_InitTick+0xd8>)
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <HAL_InitTick+0xd8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <HAL_InitTick+0xd8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <HAL_InitTick+0xd8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ab8:	4817      	ldr	r0, [pc, #92]	; (8000b18 <HAL_InitTick+0xd8>)
 8000aba:	f001 fb79 	bl	80021b0 <HAL_TIM_Base_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ac4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d11b      	bne.n	8000b04 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000acc:	4812      	ldr	r0, [pc, #72]	; (8000b18 <HAL_InitTick+0xd8>)
 8000ace:	f001 fbc7 	bl	8002260 <HAL_TIM_Base_Start_IT>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ad8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d111      	bne.n	8000b04 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000ae0:	2019      	movs	r0, #25
 8000ae2:	f000 fc94 	bl	800140e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d808      	bhi.n	8000afe <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	2019      	movs	r0, #25
 8000af2:	f000 fc70 	bl	80013d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <HAL_InitTick+0xe0>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6013      	str	r3, [r2, #0]
 8000afc:	e002      	b.n	8000b04 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3730      	adds	r7, #48	; 0x30
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40021000 	.word	0x40021000
 8000b14:	431bde83 	.word	0x431bde83
 8000b18:	2000179c 	.word	0x2000179c
 8000b1c:	40012c00 	.word	0x40012c00
 8000b20:	20000004 	.word	0x20000004

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <NMI_Handler+0x4>

08000b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <HardFault_Handler+0x4>

08000b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <MemManage_Handler+0x4>

08000b36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
	...

08000b50 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b54:	4802      	ldr	r0, [pc, #8]	; (8000b60 <TIM1_UP_IRQHandler+0x10>)
 8000b56:	f001 fcc7 	bl	80024e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	2000179c 	.word	0x2000179c

08000b64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b70:	f7ff fff8 	bl	8000b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b74:	480b      	ldr	r0, [pc, #44]	; (8000ba4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b76:	490c      	ldr	r1, [pc, #48]	; (8000ba8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b78:	4a0c      	ldr	r2, [pc, #48]	; (8000bac <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b7c:	e002      	b.n	8000b84 <LoopCopyDataInit>

08000b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b82:	3304      	adds	r3, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b88:	d3f9      	bcc.n	8000b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8a:	4a09      	ldr	r2, [pc, #36]	; (8000bb0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b8c:	4c09      	ldr	r4, [pc, #36]	; (8000bb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b90:	e001      	b.n	8000b96 <LoopFillZerobss>

08000b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b94:	3204      	adds	r2, #4

08000b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b98:	d3fb      	bcc.n	8000b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f005 feaf 	bl	80068fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b9e:	f7ff fb0b 	bl	80001b8 <main>
  bx lr
 8000ba2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000bac:	08006bbc 	.word	0x08006bbc
  ldr r2, =_sbss
 8000bb0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bb4:	20003130 	.word	0x20003130

08000bb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC1_2_IRQHandler>
	...

08000bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_Init+0x28>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_Init+0x28>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 fbf7 	bl	80013c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd2:	200f      	movs	r0, #15
 8000bd4:	f7ff ff34 	bl	8000a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd8:	f7ff fe10 	bl	80007fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40022000 	.word	0x40022000

08000be8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_IncTick+0x1c>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <HAL_IncTick+0x20>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a03      	ldr	r2, [pc, #12]	; (8000c08 <HAL_IncTick+0x20>)
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr
 8000c04:	20000008 	.word	0x20000008
 8000c08:	200017e4 	.word	0x200017e4

08000c0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c10:	4b02      	ldr	r3, [pc, #8]	; (8000c1c <HAL_GetTick+0x10>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	200017e4 	.word	0x200017e4

08000c20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d101      	bne.n	8000c42 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e0be      	b.n	8000dc0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d109      	bne.n	8000c64 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff fe04 	bl	800086c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f000 fabf 	bl	80011e8 <ADC_ConversionStop_Disable>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c72:	f003 0310 	and.w	r3, r3, #16
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f040 8099 	bne.w	8000dae <HAL_ADC_Init+0x18e>
 8000c7c:	7dfb      	ldrb	r3, [r7, #23]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f040 8095 	bne.w	8000dae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c8c:	f023 0302 	bic.w	r3, r3, #2
 8000c90:	f043 0202 	orr.w	r2, r3, #2
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ca0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	7b1b      	ldrb	r3, [r3, #12]
 8000ca6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ca8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cb8:	d003      	beq.n	8000cc2 <HAL_ADC_Init+0xa2>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d102      	bne.n	8000cc8 <HAL_ADC_Init+0xa8>
 8000cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc6:	e000      	b.n	8000cca <HAL_ADC_Init+0xaa>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7d1b      	ldrb	r3, [r3, #20]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d119      	bne.n	8000d0c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	7b1b      	ldrb	r3, [r3, #12]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d109      	bne.n	8000cf4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	035a      	lsls	r2, r3, #13
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	e00b      	b.n	8000d0c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf8:	f043 0220 	orr.w	r2, r3, #32
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d04:	f043 0201 	orr.w	r2, r3, #1
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	689a      	ldr	r2, [r3, #8]
 8000d26:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <HAL_ADC_Init+0x1a8>)
 8000d28:	4013      	ands	r3, r2
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	6812      	ldr	r2, [r2, #0]
 8000d2e:	68b9      	ldr	r1, [r7, #8]
 8000d30:	430b      	orrs	r3, r1
 8000d32:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d3c:	d003      	beq.n	8000d46 <HAL_ADC_Init+0x126>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d104      	bne.n	8000d50 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	691b      	ldr	r3, [r3, #16]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	051b      	lsls	r3, r3, #20
 8000d4e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d56:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	430a      	orrs	r2, r1
 8000d62:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	689a      	ldr	r2, [r3, #8]
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_ADC_Init+0x1ac>)
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d10b      	bne.n	8000d8c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7e:	f023 0303 	bic.w	r3, r3, #3
 8000d82:	f043 0201 	orr.w	r2, r3, #1
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d8a:	e018      	b.n	8000dbe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d90:	f023 0312 	bic.w	r3, r3, #18
 8000d94:	f043 0210 	orr.w	r2, r3, #16
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da0:	f043 0201 	orr.w	r2, r3, #1
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dac:	e007      	b.n	8000dbe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db2:	f043 0210 	orr.w	r2, r3, #16
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	ffe1f7fd 	.word	0xffe1f7fd
 8000dcc:	ff1f0efe 	.word	0xff1f0efe

08000dd0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d101      	bne.n	8000dea <HAL_ADC_Start+0x1a>
 8000de6:	2302      	movs	r3, #2
 8000de8:	e098      	b.n	8000f1c <HAL_ADC_Start+0x14c>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2201      	movs	r2, #1
 8000dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f000 f99e 	bl	8001134 <ADC_Enable>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f040 8087 	bne.w	8000f12 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e0c:	f023 0301 	bic.w	r3, r3, #1
 8000e10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a41      	ldr	r2, [pc, #260]	; (8000f24 <HAL_ADC_Start+0x154>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d105      	bne.n	8000e2e <HAL_ADC_Start+0x5e>
 8000e22:	4b41      	ldr	r3, [pc, #260]	; (8000f28 <HAL_ADC_Start+0x158>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d115      	bne.n	8000e5a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d026      	beq.n	8000e96 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e58:	e01d      	b.n	8000e96 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a2f      	ldr	r2, [pc, #188]	; (8000f28 <HAL_ADC_Start+0x158>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d004      	beq.n	8000e7a <HAL_ADC_Start+0xaa>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a2b      	ldr	r2, [pc, #172]	; (8000f24 <HAL_ADC_Start+0x154>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d10d      	bne.n	8000e96 <HAL_ADC_Start+0xc6>
 8000e7a:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <HAL_ADC_Start+0x158>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d007      	beq.n	8000e96 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d006      	beq.n	8000eb0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea6:	f023 0206 	bic.w	r2, r3, #6
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	62da      	str	r2, [r3, #44]	; 0x2c
 8000eae:	e002      	b.n	8000eb6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f06f 0202 	mvn.w	r2, #2
 8000ec6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ed2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ed6:	d113      	bne.n	8000f00 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000edc:	4a11      	ldr	r2, [pc, #68]	; (8000f24 <HAL_ADC_Start+0x154>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d105      	bne.n	8000eee <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_ADC_Start+0x158>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d108      	bne.n	8000f00 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	e00c      	b.n	8000f1a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	e003      	b.n	8000f1a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40012800 	.word	0x40012800
 8000f28:	40012400 	.word	0x40012400

08000f2c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d101      	bne.n	8000f64 <HAL_ADC_ConfigChannel+0x20>
 8000f60:	2302      	movs	r3, #2
 8000f62:	e0dc      	b.n	800111e <HAL_ADC_ConfigChannel+0x1da>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2201      	movs	r2, #1
 8000f68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b06      	cmp	r3, #6
 8000f72:	d81c      	bhi.n	8000fae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	3b05      	subs	r3, #5
 8000f86:	221f      	movs	r2, #31
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	4019      	ands	r1, r3
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	6818      	ldr	r0, [r3, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	3b05      	subs	r3, #5
 8000fa0:	fa00 f203 	lsl.w	r2, r0, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	635a      	str	r2, [r3, #52]	; 0x34
 8000fac:	e03c      	b.n	8001028 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	2b0c      	cmp	r3, #12
 8000fb4:	d81c      	bhi.n	8000ff0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	3b23      	subs	r3, #35	; 0x23
 8000fc8:	221f      	movs	r2, #31
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	4019      	ands	r1, r3
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	6818      	ldr	r0, [r3, #0]
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	3b23      	subs	r3, #35	; 0x23
 8000fe2:	fa00 f203 	lsl.w	r2, r0, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	430a      	orrs	r2, r1
 8000fec:	631a      	str	r2, [r3, #48]	; 0x30
 8000fee:	e01b      	b.n	8001028 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	3b41      	subs	r3, #65	; 0x41
 8001002:	221f      	movs	r2, #31
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	4019      	ands	r1, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	3b41      	subs	r3, #65	; 0x41
 800101c:	fa00 f203 	lsl.w	r2, r0, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	430a      	orrs	r2, r1
 8001026:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b09      	cmp	r3, #9
 800102e:	d91c      	bls.n	800106a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	68d9      	ldr	r1, [r3, #12]
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4613      	mov	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4413      	add	r3, r2
 8001040:	3b1e      	subs	r3, #30
 8001042:	2207      	movs	r2, #7
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	4019      	ands	r1, r3
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	6898      	ldr	r0, [r3, #8]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	3b1e      	subs	r3, #30
 800105c:	fa00 f203 	lsl.w	r2, r0, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	430a      	orrs	r2, r1
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	e019      	b.n	800109e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	6919      	ldr	r1, [r3, #16]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4613      	mov	r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	4413      	add	r3, r2
 800107a:	2207      	movs	r2, #7
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	4019      	ands	r1, r3
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	6898      	ldr	r0, [r3, #8]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4613      	mov	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	fa00 f203 	lsl.w	r2, r0, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	430a      	orrs	r2, r1
 800109c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b10      	cmp	r3, #16
 80010a4:	d003      	beq.n	80010ae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010aa:	2b11      	cmp	r3, #17
 80010ac:	d132      	bne.n	8001114 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a1d      	ldr	r2, [pc, #116]	; (8001128 <HAL_ADC_ConfigChannel+0x1e4>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d125      	bne.n	8001104 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d126      	bne.n	8001114 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80010d4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b10      	cmp	r3, #16
 80010dc:	d11a      	bne.n	8001114 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <HAL_ADC_ConfigChannel+0x1e8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a13      	ldr	r2, [pc, #76]	; (8001130 <HAL_ADC_ConfigChannel+0x1ec>)
 80010e4:	fba2 2303 	umull	r2, r3, r2, r3
 80010e8:	0c9a      	lsrs	r2, r3, #18
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010f4:	e002      	b.n	80010fc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	3b01      	subs	r3, #1
 80010fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f9      	bne.n	80010f6 <HAL_ADC_ConfigChannel+0x1b2>
 8001102:	e007      	b.n	8001114 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001108:	f043 0220 	orr.w	r2, r3, #32
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800111c:	7bfb      	ldrb	r3, [r7, #15]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	40012400 	.word	0x40012400
 800112c:	20000000 	.word	0x20000000
 8001130:	431bde83 	.word	0x431bde83

08001134 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b01      	cmp	r3, #1
 8001150:	d040      	beq.n	80011d4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f042 0201 	orr.w	r2, r2, #1
 8001160:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001162:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <ADC_Enable+0xac>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a1f      	ldr	r2, [pc, #124]	; (80011e4 <ADC_Enable+0xb0>)
 8001168:	fba2 2303 	umull	r2, r3, r2, r3
 800116c:	0c9b      	lsrs	r3, r3, #18
 800116e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001170:	e002      	b.n	8001178 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	3b01      	subs	r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f9      	bne.n	8001172 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800117e:	f7ff fd45 	bl	8000c0c <HAL_GetTick>
 8001182:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001184:	e01f      	b.n	80011c6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001186:	f7ff fd41 	bl	8000c0c <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d918      	bls.n	80011c6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d011      	beq.n	80011c6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a6:	f043 0210 	orr.w	r2, r3, #16
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b2:	f043 0201 	orr.w	r2, r3, #1
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e007      	b.n	80011d6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d1d8      	bne.n	8001186 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000000 	.word	0x20000000
 80011e4:	431bde83 	.word	0x431bde83

080011e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d12e      	bne.n	8001260 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0201 	bic.w	r2, r2, #1
 8001210:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001212:	f7ff fcfb 	bl	8000c0c <HAL_GetTick>
 8001216:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001218:	e01b      	b.n	8001252 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800121a:	f7ff fcf7 	bl	8000c0c <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d914      	bls.n	8001252 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b01      	cmp	r3, #1
 8001234:	d10d      	bne.n	8001252 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123a:	f043 0210 	orr.w	r2, r3, #16
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001246:	f043 0201 	orr.w	r2, r3, #1
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e007      	b.n	8001262 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b01      	cmp	r3, #1
 800125e:	d0dc      	beq.n	800121a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <__NVIC_SetPriorityGrouping+0x44>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001288:	4013      	ands	r3, r2
 800128a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800129c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129e:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <__NVIC_SetPriorityGrouping+0x44>)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	60d3      	str	r3, [r2, #12]
}
 80012a4:	bf00      	nop
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <__NVIC_GetPriorityGrouping+0x18>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	f003 0307 	and.w	r3, r3, #7
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	db0b      	blt.n	80012fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	f003 021f 	and.w	r2, r3, #31
 80012e8:	4906      	ldr	r1, [pc, #24]	; (8001304 <__NVIC_EnableIRQ+0x34>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	095b      	lsrs	r3, r3, #5
 80012f0:	2001      	movs	r0, #1
 80012f2:	fa00 f202 	lsl.w	r2, r0, r2
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	e000e100 	.word	0xe000e100

08001308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db0a      	blt.n	8001332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	490c      	ldr	r1, [pc, #48]	; (8001354 <__NVIC_SetPriority+0x4c>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	440b      	add	r3, r1
 800132c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001330:	e00a      	b.n	8001348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4908      	ldr	r1, [pc, #32]	; (8001358 <__NVIC_SetPriority+0x50>)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	3b04      	subs	r3, #4
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	440b      	add	r3, r1
 8001346:	761a      	strb	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f1c3 0307 	rsb	r3, r3, #7
 8001376:	2b04      	cmp	r3, #4
 8001378:	bf28      	it	cs
 800137a:	2304      	movcs	r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3304      	adds	r3, #4
 8001382:	2b06      	cmp	r3, #6
 8001384:	d902      	bls.n	800138c <NVIC_EncodePriority+0x30>
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3b03      	subs	r3, #3
 800138a:	e000      	b.n	800138e <NVIC_EncodePriority+0x32>
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	f04f 32ff 	mov.w	r2, #4294967295
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	401a      	ands	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	4313      	orrs	r3, r2
         );
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff4f 	bl	800126c <__NVIC_SetPriorityGrouping>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e8:	f7ff ff64 	bl	80012b4 <__NVIC_GetPriorityGrouping>
 80013ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	6978      	ldr	r0, [r7, #20]
 80013f4:	f7ff ffb2 	bl	800135c <NVIC_EncodePriority>
 80013f8:	4602      	mov	r2, r0
 80013fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff81 	bl	8001308 <__NVIC_SetPriority>
}
 8001406:	bf00      	nop
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff57 	bl	80012d0 <__NVIC_EnableIRQ>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800142c:	b480      	push	{r7}
 800142e:	b08b      	sub	sp, #44	; 0x2c
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800143a:	2300      	movs	r3, #0
 800143c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143e:	e169      	b.n	8001714 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001440:	2201      	movs	r2, #1
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	69fa      	ldr	r2, [r7, #28]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	429a      	cmp	r2, r3
 800145a:	f040 8158 	bne.w	800170e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	4a9a      	ldr	r2, [pc, #616]	; (80016cc <HAL_GPIO_Init+0x2a0>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d05e      	beq.n	8001526 <HAL_GPIO_Init+0xfa>
 8001468:	4a98      	ldr	r2, [pc, #608]	; (80016cc <HAL_GPIO_Init+0x2a0>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d875      	bhi.n	800155a <HAL_GPIO_Init+0x12e>
 800146e:	4a98      	ldr	r2, [pc, #608]	; (80016d0 <HAL_GPIO_Init+0x2a4>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d058      	beq.n	8001526 <HAL_GPIO_Init+0xfa>
 8001474:	4a96      	ldr	r2, [pc, #600]	; (80016d0 <HAL_GPIO_Init+0x2a4>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d86f      	bhi.n	800155a <HAL_GPIO_Init+0x12e>
 800147a:	4a96      	ldr	r2, [pc, #600]	; (80016d4 <HAL_GPIO_Init+0x2a8>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d052      	beq.n	8001526 <HAL_GPIO_Init+0xfa>
 8001480:	4a94      	ldr	r2, [pc, #592]	; (80016d4 <HAL_GPIO_Init+0x2a8>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d869      	bhi.n	800155a <HAL_GPIO_Init+0x12e>
 8001486:	4a94      	ldr	r2, [pc, #592]	; (80016d8 <HAL_GPIO_Init+0x2ac>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d04c      	beq.n	8001526 <HAL_GPIO_Init+0xfa>
 800148c:	4a92      	ldr	r2, [pc, #584]	; (80016d8 <HAL_GPIO_Init+0x2ac>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d863      	bhi.n	800155a <HAL_GPIO_Init+0x12e>
 8001492:	4a92      	ldr	r2, [pc, #584]	; (80016dc <HAL_GPIO_Init+0x2b0>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d046      	beq.n	8001526 <HAL_GPIO_Init+0xfa>
 8001498:	4a90      	ldr	r2, [pc, #576]	; (80016dc <HAL_GPIO_Init+0x2b0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d85d      	bhi.n	800155a <HAL_GPIO_Init+0x12e>
 800149e:	2b12      	cmp	r3, #18
 80014a0:	d82a      	bhi.n	80014f8 <HAL_GPIO_Init+0xcc>
 80014a2:	2b12      	cmp	r3, #18
 80014a4:	d859      	bhi.n	800155a <HAL_GPIO_Init+0x12e>
 80014a6:	a201      	add	r2, pc, #4	; (adr r2, 80014ac <HAL_GPIO_Init+0x80>)
 80014a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ac:	08001527 	.word	0x08001527
 80014b0:	08001501 	.word	0x08001501
 80014b4:	08001513 	.word	0x08001513
 80014b8:	08001555 	.word	0x08001555
 80014bc:	0800155b 	.word	0x0800155b
 80014c0:	0800155b 	.word	0x0800155b
 80014c4:	0800155b 	.word	0x0800155b
 80014c8:	0800155b 	.word	0x0800155b
 80014cc:	0800155b 	.word	0x0800155b
 80014d0:	0800155b 	.word	0x0800155b
 80014d4:	0800155b 	.word	0x0800155b
 80014d8:	0800155b 	.word	0x0800155b
 80014dc:	0800155b 	.word	0x0800155b
 80014e0:	0800155b 	.word	0x0800155b
 80014e4:	0800155b 	.word	0x0800155b
 80014e8:	0800155b 	.word	0x0800155b
 80014ec:	0800155b 	.word	0x0800155b
 80014f0:	08001509 	.word	0x08001509
 80014f4:	0800151d 	.word	0x0800151d
 80014f8:	4a79      	ldr	r2, [pc, #484]	; (80016e0 <HAL_GPIO_Init+0x2b4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d013      	beq.n	8001526 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014fe:	e02c      	b.n	800155a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	623b      	str	r3, [r7, #32]
          break;
 8001506:	e029      	b.n	800155c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	3304      	adds	r3, #4
 800150e:	623b      	str	r3, [r7, #32]
          break;
 8001510:	e024      	b.n	800155c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	3308      	adds	r3, #8
 8001518:	623b      	str	r3, [r7, #32]
          break;
 800151a:	e01f      	b.n	800155c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	330c      	adds	r3, #12
 8001522:	623b      	str	r3, [r7, #32]
          break;
 8001524:	e01a      	b.n	800155c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d102      	bne.n	8001534 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800152e:	2304      	movs	r3, #4
 8001530:	623b      	str	r3, [r7, #32]
          break;
 8001532:	e013      	b.n	800155c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d105      	bne.n	8001548 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800153c:	2308      	movs	r3, #8
 800153e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69fa      	ldr	r2, [r7, #28]
 8001544:	611a      	str	r2, [r3, #16]
          break;
 8001546:	e009      	b.n	800155c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001548:	2308      	movs	r3, #8
 800154a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69fa      	ldr	r2, [r7, #28]
 8001550:	615a      	str	r2, [r3, #20]
          break;
 8001552:	e003      	b.n	800155c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001554:	2300      	movs	r3, #0
 8001556:	623b      	str	r3, [r7, #32]
          break;
 8001558:	e000      	b.n	800155c <HAL_GPIO_Init+0x130>
          break;
 800155a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2bff      	cmp	r3, #255	; 0xff
 8001560:	d801      	bhi.n	8001566 <HAL_GPIO_Init+0x13a>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	e001      	b.n	800156a <HAL_GPIO_Init+0x13e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3304      	adds	r3, #4
 800156a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2bff      	cmp	r3, #255	; 0xff
 8001570:	d802      	bhi.n	8001578 <HAL_GPIO_Init+0x14c>
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	e002      	b.n	800157e <HAL_GPIO_Init+0x152>
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	3b08      	subs	r3, #8
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	210f      	movs	r1, #15
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	fa01 f303 	lsl.w	r3, r1, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	401a      	ands	r2, r3
 8001590:	6a39      	ldr	r1, [r7, #32]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	fa01 f303 	lsl.w	r3, r1, r3
 8001598:	431a      	orrs	r2, r3
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 80b1 	beq.w	800170e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015ac:	4b4d      	ldr	r3, [pc, #308]	; (80016e4 <HAL_GPIO_Init+0x2b8>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	4a4c      	ldr	r2, [pc, #304]	; (80016e4 <HAL_GPIO_Init+0x2b8>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6193      	str	r3, [r2, #24]
 80015b8:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <HAL_GPIO_Init+0x2b8>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015c4:	4a48      	ldr	r2, [pc, #288]	; (80016e8 <HAL_GPIO_Init+0x2bc>)
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	3302      	adds	r3, #2
 80015cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	220f      	movs	r2, #15
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	4013      	ands	r3, r2
 80015e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a40      	ldr	r2, [pc, #256]	; (80016ec <HAL_GPIO_Init+0x2c0>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d013      	beq.n	8001618 <HAL_GPIO_Init+0x1ec>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a3f      	ldr	r2, [pc, #252]	; (80016f0 <HAL_GPIO_Init+0x2c4>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d00d      	beq.n	8001614 <HAL_GPIO_Init+0x1e8>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a3e      	ldr	r2, [pc, #248]	; (80016f4 <HAL_GPIO_Init+0x2c8>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d007      	beq.n	8001610 <HAL_GPIO_Init+0x1e4>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a3d      	ldr	r2, [pc, #244]	; (80016f8 <HAL_GPIO_Init+0x2cc>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d101      	bne.n	800160c <HAL_GPIO_Init+0x1e0>
 8001608:	2303      	movs	r3, #3
 800160a:	e006      	b.n	800161a <HAL_GPIO_Init+0x1ee>
 800160c:	2304      	movs	r3, #4
 800160e:	e004      	b.n	800161a <HAL_GPIO_Init+0x1ee>
 8001610:	2302      	movs	r3, #2
 8001612:	e002      	b.n	800161a <HAL_GPIO_Init+0x1ee>
 8001614:	2301      	movs	r3, #1
 8001616:	e000      	b.n	800161a <HAL_GPIO_Init+0x1ee>
 8001618:	2300      	movs	r3, #0
 800161a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161c:	f002 0203 	and.w	r2, r2, #3
 8001620:	0092      	lsls	r2, r2, #2
 8001622:	4093      	lsls	r3, r2
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	4313      	orrs	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800162a:	492f      	ldr	r1, [pc, #188]	; (80016e8 <HAL_GPIO_Init+0x2bc>)
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	089b      	lsrs	r3, r3, #2
 8001630:	3302      	adds	r3, #2
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d006      	beq.n	8001652 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001644:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	492c      	ldr	r1, [pc, #176]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	608b      	str	r3, [r1, #8]
 8001650:	e006      	b.n	8001660 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001652:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	43db      	mvns	r3, r3
 800165a:	4928      	ldr	r1, [pc, #160]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 800165c:	4013      	ands	r3, r2
 800165e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d006      	beq.n	800167a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800166c:	4b23      	ldr	r3, [pc, #140]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 800166e:	68da      	ldr	r2, [r3, #12]
 8001670:	4922      	ldr	r1, [pc, #136]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	60cb      	str	r3, [r1, #12]
 8001678:	e006      	b.n	8001688 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800167a:	4b20      	ldr	r3, [pc, #128]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	43db      	mvns	r3, r3
 8001682:	491e      	ldr	r1, [pc, #120]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 8001684:	4013      	ands	r3, r2
 8001686:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d006      	beq.n	80016a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	4918      	ldr	r1, [pc, #96]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	604b      	str	r3, [r1, #4]
 80016a0:	e006      	b.n	80016b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	4914      	ldr	r1, [pc, #80]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d021      	beq.n	8001700 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	490e      	ldr	r1, [pc, #56]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	600b      	str	r3, [r1, #0]
 80016c8:	e021      	b.n	800170e <HAL_GPIO_Init+0x2e2>
 80016ca:	bf00      	nop
 80016cc:	10320000 	.word	0x10320000
 80016d0:	10310000 	.word	0x10310000
 80016d4:	10220000 	.word	0x10220000
 80016d8:	10210000 	.word	0x10210000
 80016dc:	10120000 	.word	0x10120000
 80016e0:	10110000 	.word	0x10110000
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40010000 	.word	0x40010000
 80016ec:	40010800 	.word	0x40010800
 80016f0:	40010c00 	.word	0x40010c00
 80016f4:	40011000 	.word	0x40011000
 80016f8:	40011400 	.word	0x40011400
 80016fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_GPIO_Init+0x304>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	43db      	mvns	r3, r3
 8001708:	4909      	ldr	r1, [pc, #36]	; (8001730 <HAL_GPIO_Init+0x304>)
 800170a:	4013      	ands	r3, r2
 800170c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	3301      	adds	r3, #1
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	fa22 f303 	lsr.w	r3, r2, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	f47f ae8e 	bne.w	8001440 <HAL_GPIO_Init+0x14>
  }
}
 8001724:	bf00      	nop
 8001726:	bf00      	nop
 8001728:	372c      	adds	r7, #44	; 0x2c
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	40010400 	.word	0x40010400

08001734 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	887b      	ldrh	r3, [r7, #2]
 8001746:	4013      	ands	r3, r2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d002      	beq.n	8001752 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800174c:	2301      	movs	r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
 8001750:	e001      	b.n	8001756 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001752:	2300      	movs	r3, #0
 8001754:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001756:	7bfb      	ldrb	r3, [r7, #15]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	460b      	mov	r3, r1
 800176c:	807b      	strh	r3, [r7, #2]
 800176e:	4613      	mov	r3, r2
 8001770:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001772:	787b      	ldrb	r3, [r7, #1]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001778:	887a      	ldrh	r2, [r7, #2]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800177e:	e003      	b.n	8001788 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001780:	887b      	ldrh	r3, [r7, #2]
 8001782:	041a      	lsls	r2, r3, #16
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	611a      	str	r2, [r3, #16]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr

08001792 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001792:	b480      	push	{r7}
 8001794:	b085      	sub	sp, #20
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	460b      	mov	r3, r1
 800179c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017a4:	887a      	ldrh	r2, [r7, #2]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4013      	ands	r3, r2
 80017aa:	041a      	lsls	r2, r3, #16
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	887b      	ldrh	r3, [r7, #2]
 80017b2:	400b      	ands	r3, r1
 80017b4:	431a      	orrs	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	611a      	str	r2, [r3, #16]
}
 80017ba:	bf00      	nop
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e272      	b.n	8001cbc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 8087 	beq.w	80018f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017e4:	4b92      	ldr	r3, [pc, #584]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 030c 	and.w	r3, r3, #12
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d00c      	beq.n	800180a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017f0:	4b8f      	ldr	r3, [pc, #572]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 030c 	and.w	r3, r3, #12
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d112      	bne.n	8001822 <HAL_RCC_OscConfig+0x5e>
 80017fc:	4b8c      	ldr	r3, [pc, #560]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001808:	d10b      	bne.n	8001822 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180a:	4b89      	ldr	r3, [pc, #548]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d06c      	beq.n	80018f0 <HAL_RCC_OscConfig+0x12c>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d168      	bne.n	80018f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e24c      	b.n	8001cbc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800182a:	d106      	bne.n	800183a <HAL_RCC_OscConfig+0x76>
 800182c:	4b80      	ldr	r3, [pc, #512]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a7f      	ldr	r2, [pc, #508]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	e02e      	b.n	8001898 <HAL_RCC_OscConfig+0xd4>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10c      	bne.n	800185c <HAL_RCC_OscConfig+0x98>
 8001842:	4b7b      	ldr	r3, [pc, #492]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a7a      	ldr	r2, [pc, #488]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4b78      	ldr	r3, [pc, #480]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a77      	ldr	r2, [pc, #476]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001854:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e01d      	b.n	8001898 <HAL_RCC_OscConfig+0xd4>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001864:	d10c      	bne.n	8001880 <HAL_RCC_OscConfig+0xbc>
 8001866:	4b72      	ldr	r3, [pc, #456]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a71      	ldr	r2, [pc, #452]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 800186c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	4b6f      	ldr	r3, [pc, #444]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a6e      	ldr	r2, [pc, #440]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e00b      	b.n	8001898 <HAL_RCC_OscConfig+0xd4>
 8001880:	4b6b      	ldr	r3, [pc, #428]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a6a      	ldr	r2, [pc, #424]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b68      	ldr	r3, [pc, #416]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a67      	ldr	r2, [pc, #412]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001896:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d013      	beq.n	80018c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a0:	f7ff f9b4 	bl	8000c0c <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a8:	f7ff f9b0 	bl	8000c0c <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	; 0x64
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e200      	b.n	8001cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ba:	4b5d      	ldr	r3, [pc, #372]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0xe4>
 80018c6:	e014      	b.n	80018f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff f9a0 	bl	8000c0c <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d0:	f7ff f99c 	bl	8000c0c <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b64      	cmp	r3, #100	; 0x64
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e1ec      	b.n	8001cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e2:	4b53      	ldr	r3, [pc, #332]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x10c>
 80018ee:	e000      	b.n	80018f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d063      	beq.n	80019c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018fe:	4b4c      	ldr	r3, [pc, #304]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 030c 	and.w	r3, r3, #12
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00b      	beq.n	8001922 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800190a:	4b49      	ldr	r3, [pc, #292]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	2b08      	cmp	r3, #8
 8001914:	d11c      	bne.n	8001950 <HAL_RCC_OscConfig+0x18c>
 8001916:	4b46      	ldr	r3, [pc, #280]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d116      	bne.n	8001950 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001922:	4b43      	ldr	r3, [pc, #268]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d005      	beq.n	800193a <HAL_RCC_OscConfig+0x176>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d001      	beq.n	800193a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e1c0      	b.n	8001cbc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193a:	4b3d      	ldr	r3, [pc, #244]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	4939      	ldr	r1, [pc, #228]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 800194a:	4313      	orrs	r3, r2
 800194c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194e:	e03a      	b.n	80019c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d020      	beq.n	800199a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001958:	4b36      	ldr	r3, [pc, #216]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 800195a:	2201      	movs	r2, #1
 800195c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195e:	f7ff f955 	bl	8000c0c <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001966:	f7ff f951 	bl	8000c0c <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e1a1      	b.n	8001cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001978:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0f0      	beq.n	8001966 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001984:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	4927      	ldr	r1, [pc, #156]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 8001994:	4313      	orrs	r3, r2
 8001996:	600b      	str	r3, [r1, #0]
 8001998:	e015      	b.n	80019c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800199a:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a0:	f7ff f934 	bl	8000c0c <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a8:	f7ff f930 	bl	8000c0c <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e180      	b.n	8001cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ba:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d03a      	beq.n	8001a48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d019      	beq.n	8001a0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019da:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 80019dc:	2201      	movs	r2, #1
 80019de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e0:	f7ff f914 	bl	8000c0c <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e8:	f7ff f910 	bl	8000c0c <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e160      	b.n	8001cbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019fa:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0f0      	beq.n	80019e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a06:	2001      	movs	r0, #1
 8001a08:	f000 fafe 	bl	8002008 <RCC_Delay>
 8001a0c:	e01c      	b.n	8001a48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a14:	f7ff f8fa 	bl	8000c0c <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a1a:	e00f      	b.n	8001a3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a1c:	f7ff f8f6 	bl	8000c0c <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d908      	bls.n	8001a3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e146      	b.n	8001cbc <HAL_RCC_OscConfig+0x4f8>
 8001a2e:	bf00      	nop
 8001a30:	40021000 	.word	0x40021000
 8001a34:	42420000 	.word	0x42420000
 8001a38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a3c:	4b92      	ldr	r3, [pc, #584]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1e9      	bne.n	8001a1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 80a6 	beq.w	8001ba2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a56:	2300      	movs	r3, #0
 8001a58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a5a:	4b8b      	ldr	r3, [pc, #556]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10d      	bne.n	8001a82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a66:	4b88      	ldr	r3, [pc, #544]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	4a87      	ldr	r2, [pc, #540]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a70:	61d3      	str	r3, [r2, #28]
 8001a72:	4b85      	ldr	r3, [pc, #532]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a82:	4b82      	ldr	r3, [pc, #520]	; (8001c8c <HAL_RCC_OscConfig+0x4c8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d118      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a8e:	4b7f      	ldr	r3, [pc, #508]	; (8001c8c <HAL_RCC_OscConfig+0x4c8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a7e      	ldr	r2, [pc, #504]	; (8001c8c <HAL_RCC_OscConfig+0x4c8>)
 8001a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a9a:	f7ff f8b7 	bl	8000c0c <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aa2:	f7ff f8b3 	bl	8000c0c <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b64      	cmp	r3, #100	; 0x64
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e103      	b.n	8001cbc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab4:	4b75      	ldr	r3, [pc, #468]	; (8001c8c <HAL_RCC_OscConfig+0x4c8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0f0      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d106      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x312>
 8001ac8:	4b6f      	ldr	r3, [pc, #444]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	4a6e      	ldr	r2, [pc, #440]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6213      	str	r3, [r2, #32]
 8001ad4:	e02d      	b.n	8001b32 <HAL_RCC_OscConfig+0x36e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x334>
 8001ade:	4b6a      	ldr	r3, [pc, #424]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	4a69      	ldr	r2, [pc, #420]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001ae4:	f023 0301 	bic.w	r3, r3, #1
 8001ae8:	6213      	str	r3, [r2, #32]
 8001aea:	4b67      	ldr	r3, [pc, #412]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	4a66      	ldr	r2, [pc, #408]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	f023 0304 	bic.w	r3, r3, #4
 8001af4:	6213      	str	r3, [r2, #32]
 8001af6:	e01c      	b.n	8001b32 <HAL_RCC_OscConfig+0x36e>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	2b05      	cmp	r3, #5
 8001afe:	d10c      	bne.n	8001b1a <HAL_RCC_OscConfig+0x356>
 8001b00:	4b61      	ldr	r3, [pc, #388]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4a60      	ldr	r2, [pc, #384]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001b06:	f043 0304 	orr.w	r3, r3, #4
 8001b0a:	6213      	str	r3, [r2, #32]
 8001b0c:	4b5e      	ldr	r3, [pc, #376]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	4a5d      	ldr	r2, [pc, #372]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6213      	str	r3, [r2, #32]
 8001b18:	e00b      	b.n	8001b32 <HAL_RCC_OscConfig+0x36e>
 8001b1a:	4b5b      	ldr	r3, [pc, #364]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	4a5a      	ldr	r2, [pc, #360]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	f023 0301 	bic.w	r3, r3, #1
 8001b24:	6213      	str	r3, [r2, #32]
 8001b26:	4b58      	ldr	r3, [pc, #352]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	4a57      	ldr	r2, [pc, #348]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	f023 0304 	bic.w	r3, r3, #4
 8001b30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d015      	beq.n	8001b66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3a:	f7ff f867 	bl	8000c0c <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b40:	e00a      	b.n	8001b58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b42:	f7ff f863 	bl	8000c0c <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e0b1      	b.n	8001cbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b58:	4b4b      	ldr	r3, [pc, #300]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0ee      	beq.n	8001b42 <HAL_RCC_OscConfig+0x37e>
 8001b64:	e014      	b.n	8001b90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b66:	f7ff f851 	bl	8000c0c <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6c:	e00a      	b.n	8001b84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f7ff f84d 	bl	8000c0c <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e09b      	b.n	8001cbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b84:	4b40      	ldr	r3, [pc, #256]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1ee      	bne.n	8001b6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b90:	7dfb      	ldrb	r3, [r7, #23]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d105      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b96:	4b3c      	ldr	r3, [pc, #240]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	4a3b      	ldr	r2, [pc, #236]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 8087 	beq.w	8001cba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bac:	4b36      	ldr	r3, [pc, #216]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 030c 	and.w	r3, r3, #12
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d061      	beq.n	8001c7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d146      	bne.n	8001c4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc0:	4b33      	ldr	r3, [pc, #204]	; (8001c90 <HAL_RCC_OscConfig+0x4cc>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc6:	f7ff f821 	bl	8000c0c <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bce:	f7ff f81d 	bl	8000c0c <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e06d      	b.n	8001cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be0:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f0      	bne.n	8001bce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf4:	d108      	bne.n	8001c08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bf6:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	4921      	ldr	r1, [pc, #132]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c08:	4b1f      	ldr	r3, [pc, #124]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a19      	ldr	r1, [r3, #32]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	491b      	ldr	r1, [pc, #108]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <HAL_RCC_OscConfig+0x4cc>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c26:	f7fe fff1 	bl	8000c0c <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2e:	f7fe ffed 	bl	8000c0c <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e03d      	b.n	8001cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCC_OscConfig+0x46a>
 8001c4c:	e035      	b.n	8001cba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <HAL_RCC_OscConfig+0x4cc>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7fe ffda 	bl	8000c0c <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7fe ffd6 	bl	8000c0c <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e026      	b.n	8001cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x498>
 8001c7a:	e01e      	b.n	8001cba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d107      	bne.n	8001c94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e019      	b.n	8001cbc <HAL_RCC_OscConfig+0x4f8>
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40007000 	.word	0x40007000
 8001c90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_RCC_OscConfig+0x500>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d106      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d001      	beq.n	8001cba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40021000 	.word	0x40021000

08001cc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0d0      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cdc:	4b6a      	ldr	r3, [pc, #424]	; (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d910      	bls.n	8001d0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cea:	4b67      	ldr	r3, [pc, #412]	; (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 0207 	bic.w	r2, r3, #7
 8001cf2:	4965      	ldr	r1, [pc, #404]	; (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfa:	4b63      	ldr	r3, [pc, #396]	; (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0b8      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d020      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d24:	4b59      	ldr	r3, [pc, #356]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	4a58      	ldr	r2, [pc, #352]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d3c:	4b53      	ldr	r3, [pc, #332]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	4a52      	ldr	r2, [pc, #328]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d48:	4b50      	ldr	r3, [pc, #320]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	494d      	ldr	r1, [pc, #308]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d040      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d107      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6e:	4b47      	ldr	r3, [pc, #284]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d115      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e07f      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d107      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d86:	4b41      	ldr	r3, [pc, #260]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e073      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d96:	4b3d      	ldr	r3, [pc, #244]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e06b      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001da6:	4b39      	ldr	r3, [pc, #228]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f023 0203 	bic.w	r2, r3, #3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4936      	ldr	r1, [pc, #216]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001db8:	f7fe ff28 	bl	8000c0c <HAL_GetTick>
 8001dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbe:	e00a      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc0:	f7fe ff24 	bl	8000c0c <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e053      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd6:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 020c 	and.w	r2, r3, #12
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d1eb      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001de8:	4b27      	ldr	r3, [pc, #156]	; (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d210      	bcs.n	8001e18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df6:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 0207 	bic.w	r2, r3, #7
 8001dfe:	4922      	ldr	r1, [pc, #136]	; (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d001      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e032      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d008      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e24:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	4916      	ldr	r1, [pc, #88]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d009      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	490e      	ldr	r1, [pc, #56]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e56:	f000 f821 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	490a      	ldr	r1, [pc, #40]	; (8001e90 <HAL_RCC_ClockConfig+0x1c8>)
 8001e68:	5ccb      	ldrb	r3, [r1, r3]
 8001e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6e:	4a09      	ldr	r2, [pc, #36]	; (8001e94 <HAL_RCC_ClockConfig+0x1cc>)
 8001e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <HAL_RCC_ClockConfig+0x1d0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fde2 	bl	8000a40 <HAL_InitTick>

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40022000 	.word	0x40022000
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	08006b88 	.word	0x08006b88
 8001e94:	20000000 	.word	0x20000000
 8001e98:	20000004 	.word	0x20000004

08001e9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x94>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d002      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0x30>
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d003      	beq.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x36>
 8001eca:	e027      	b.n	8001f1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ecc:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ece:	613b      	str	r3, [r7, #16]
      break;
 8001ed0:	e027      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	0c9b      	lsrs	r3, r3, #18
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	4a17      	ldr	r2, [pc, #92]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001edc:	5cd3      	ldrb	r3, [r2, r3]
 8001ede:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d010      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x94>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	0c5b      	lsrs	r3, r3, #17
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	4a11      	ldr	r2, [pc, #68]	; (8001f3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ef6:	5cd3      	ldrb	r3, [r2, r3]
 8001ef8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a0d      	ldr	r2, [pc, #52]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8001efe:	fb03 f202 	mul.w	r2, r3, r2
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	e004      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a0c      	ldr	r2, [pc, #48]	; (8001f40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f10:	fb02 f303 	mul.w	r3, r2, r3
 8001f14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	613b      	str	r3, [r7, #16]
      break;
 8001f1a:	e002      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f1e:	613b      	str	r3, [r7, #16]
      break;
 8001f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f22:	693b      	ldr	r3, [r7, #16]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	371c      	adds	r7, #28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40021000 	.word	0x40021000
 8001f34:	007a1200 	.word	0x007a1200
 8001f38:	08006ba0 	.word	0x08006ba0
 8001f3c:	08006bb0 	.word	0x08006bb0
 8001f40:	003d0900 	.word	0x003d0900

08001f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f48:	4b02      	ldr	r3, [pc, #8]	; (8001f54 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	20000000 	.word	0x20000000

08001f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f5c:	f7ff fff2 	bl	8001f44 <HAL_RCC_GetHCLKFreq>
 8001f60:	4602      	mov	r2, r0
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	0a1b      	lsrs	r3, r3, #8
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	4903      	ldr	r1, [pc, #12]	; (8001f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f6e:	5ccb      	ldrb	r3, [r1, r3]
 8001f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	08006b98 	.word	0x08006b98

08001f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f84:	f7ff ffde 	bl	8001f44 <HAL_RCC_GetHCLKFreq>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	0adb      	lsrs	r3, r3, #11
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	4903      	ldr	r1, [pc, #12]	; (8001fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f96:	5ccb      	ldrb	r3, [r1, r3]
 8001f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	08006b98 	.word	0x08006b98

08001fa8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	220f      	movs	r2, #15
 8001fb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <HAL_RCC_GetClockConfig+0x58>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0203 	and.w	r2, r3, #3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <HAL_RCC_GetClockConfig+0x58>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_RCC_GetClockConfig+0x58>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001fdc:	4b08      	ldr	r3, [pc, #32]	; (8002000 <HAL_RCC_GetClockConfig+0x58>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	08db      	lsrs	r3, r3, #3
 8001fe2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_RCC_GetClockConfig+0x5c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0207 	and.w	r2, r3, #7
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	40021000 	.word	0x40021000
 8002004:	40022000 	.word	0x40022000

08002008 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002010:	4b0a      	ldr	r3, [pc, #40]	; (800203c <RCC_Delay+0x34>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <RCC_Delay+0x38>)
 8002016:	fba2 2303 	umull	r2, r3, r2, r3
 800201a:	0a5b      	lsrs	r3, r3, #9
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	fb02 f303 	mul.w	r3, r2, r3
 8002022:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002024:	bf00      	nop
  }
  while (Delay --);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1e5a      	subs	r2, r3, #1
 800202a:	60fa      	str	r2, [r7, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f9      	bne.n	8002024 <RCC_Delay+0x1c>
}
 8002030:	bf00      	nop
 8002032:	bf00      	nop
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	20000000 	.word	0x20000000
 8002040:	10624dd3 	.word	0x10624dd3

08002044 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d07d      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002060:	2300      	movs	r3, #0
 8002062:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002064:	4b4f      	ldr	r3, [pc, #316]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10d      	bne.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002070:	4b4c      	ldr	r3, [pc, #304]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	4a4b      	ldr	r2, [pc, #300]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207a:	61d3      	str	r3, [r2, #28]
 800207c:	4b49      	ldr	r3, [pc, #292]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002088:	2301      	movs	r3, #1
 800208a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208c:	4b46      	ldr	r3, [pc, #280]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d118      	bne.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002098:	4b43      	ldr	r3, [pc, #268]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a42      	ldr	r2, [pc, #264]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800209e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a4:	f7fe fdb2 	bl	8000c0c <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020aa:	e008      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ac:	f7fe fdae 	bl	8000c0c <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	; 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e06d      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020be:	4b3a      	ldr	r3, [pc, #232]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020ca:	4b36      	ldr	r3, [pc, #216]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d02e      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d027      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020e8:	4b2e      	ldr	r3, [pc, #184]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020f2:	4b2e      	ldr	r3, [pc, #184]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020f8:	4b2c      	ldr	r3, [pc, #176]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020fe:	4a29      	ldr	r2, [pc, #164]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d014      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210e:	f7fe fd7d 	bl	8000c0c <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002114:	e00a      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002116:	f7fe fd79 	bl	8000c0c <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	f241 3288 	movw	r2, #5000	; 0x1388
 8002124:	4293      	cmp	r3, r2
 8002126:	d901      	bls.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e036      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0ee      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002138:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4917      	ldr	r1, [pc, #92]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002146:	4313      	orrs	r3, r2
 8002148:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800214a:	7dfb      	ldrb	r3, [r7, #23]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d105      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002150:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	4a13      	ldr	r2, [pc, #76]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800215a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002168:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	490b      	ldr	r1, [pc, #44]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	2b00      	cmp	r3, #0
 8002184:	d008      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002186:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	4904      	ldr	r1, [pc, #16]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40007000 	.word	0x40007000
 80021ac:	42420440 	.word	0x42420440

080021b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e041      	b.n	8002246 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d106      	bne.n	80021dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f839 	bl	800224e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3304      	adds	r3, #4
 80021ec:	4619      	mov	r1, r3
 80021ee:	4610      	mov	r0, r2
 80021f0:	f000 fb68 	bl	80028c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b01      	cmp	r3, #1
 8002272:	d001      	beq.n	8002278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e03a      	b.n	80022ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2202      	movs	r2, #2
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0201 	orr.w	r2, r2, #1
 800228e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a18      	ldr	r2, [pc, #96]	; (80022f8 <HAL_TIM_Base_Start_IT+0x98>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00e      	beq.n	80022b8 <HAL_TIM_Base_Start_IT+0x58>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a2:	d009      	beq.n	80022b8 <HAL_TIM_Base_Start_IT+0x58>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a14      	ldr	r2, [pc, #80]	; (80022fc <HAL_TIM_Base_Start_IT+0x9c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d004      	beq.n	80022b8 <HAL_TIM_Base_Start_IT+0x58>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a13      	ldr	r2, [pc, #76]	; (8002300 <HAL_TIM_Base_Start_IT+0xa0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d111      	bne.n	80022dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b06      	cmp	r3, #6
 80022c8:	d010      	beq.n	80022ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 0201 	orr.w	r2, r2, #1
 80022d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022da:	e007      	b.n	80022ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr
 80022f8:	40012c00 	.word	0x40012c00
 80022fc:	40000400 	.word	0x40000400
 8002300:	40000800 	.word	0x40000800

08002304 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e041      	b.n	800239a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d106      	bne.n	8002330 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7fe fada 	bl	80008e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2202      	movs	r2, #2
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3304      	adds	r3, #4
 8002340:	4619      	mov	r1, r3
 8002342:	4610      	mov	r0, r2
 8002344:	f000 fabe 	bl	80028c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d109      	bne.n	80023c8 <HAL_TIM_PWM_Start+0x24>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b01      	cmp	r3, #1
 80023be:	bf14      	ite	ne
 80023c0:	2301      	movne	r3, #1
 80023c2:	2300      	moveq	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	e022      	b.n	800240e <HAL_TIM_PWM_Start+0x6a>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d109      	bne.n	80023e2 <HAL_TIM_PWM_Start+0x3e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	bf14      	ite	ne
 80023da:	2301      	movne	r3, #1
 80023dc:	2300      	moveq	r3, #0
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	e015      	b.n	800240e <HAL_TIM_PWM_Start+0x6a>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d109      	bne.n	80023fc <HAL_TIM_PWM_Start+0x58>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	bf14      	ite	ne
 80023f4:	2301      	movne	r3, #1
 80023f6:	2300      	moveq	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	e008      	b.n	800240e <HAL_TIM_PWM_Start+0x6a>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b01      	cmp	r3, #1
 8002406:	bf14      	ite	ne
 8002408:	2301      	movne	r3, #1
 800240a:	2300      	moveq	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e05e      	b.n	80024d4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d104      	bne.n	8002426 <HAL_TIM_PWM_Start+0x82>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2202      	movs	r2, #2
 8002420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002424:	e013      	b.n	800244e <HAL_TIM_PWM_Start+0xaa>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b04      	cmp	r3, #4
 800242a:	d104      	bne.n	8002436 <HAL_TIM_PWM_Start+0x92>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002434:	e00b      	b.n	800244e <HAL_TIM_PWM_Start+0xaa>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b08      	cmp	r3, #8
 800243a:	d104      	bne.n	8002446 <HAL_TIM_PWM_Start+0xa2>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002444:	e003      	b.n	800244e <HAL_TIM_PWM_Start+0xaa>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2202      	movs	r2, #2
 800244a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2201      	movs	r2, #1
 8002454:	6839      	ldr	r1, [r7, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fc1e 	bl	8002c98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a1e      	ldr	r2, [pc, #120]	; (80024dc <HAL_TIM_PWM_Start+0x138>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d107      	bne.n	8002476 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002474:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a18      	ldr	r2, [pc, #96]	; (80024dc <HAL_TIM_PWM_Start+0x138>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d00e      	beq.n	800249e <HAL_TIM_PWM_Start+0xfa>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002488:	d009      	beq.n	800249e <HAL_TIM_PWM_Start+0xfa>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a14      	ldr	r2, [pc, #80]	; (80024e0 <HAL_TIM_PWM_Start+0x13c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d004      	beq.n	800249e <HAL_TIM_PWM_Start+0xfa>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a12      	ldr	r2, [pc, #72]	; (80024e4 <HAL_TIM_PWM_Start+0x140>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d111      	bne.n	80024c2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2b06      	cmp	r3, #6
 80024ae:	d010      	beq.n	80024d2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c0:	e007      	b.n	80024d2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0201 	orr.w	r2, r2, #1
 80024d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40012c00 	.word	0x40012c00
 80024e0:	40000400 	.word	0x40000400
 80024e4:	40000800 	.word	0x40000800

080024e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d122      	bne.n	8002544 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b02      	cmp	r3, #2
 800250a:	d11b      	bne.n	8002544 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0202 	mvn.w	r2, #2
 8002514:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f9af 	bl	800288e <HAL_TIM_IC_CaptureCallback>
 8002530:	e005      	b.n	800253e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f9a2 	bl	800287c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f9b1 	bl	80028a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b04      	cmp	r3, #4
 8002550:	d122      	bne.n	8002598 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b04      	cmp	r3, #4
 800255e:	d11b      	bne.n	8002598 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f06f 0204 	mvn.w	r2, #4
 8002568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2202      	movs	r2, #2
 800256e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f985 	bl	800288e <HAL_TIM_IC_CaptureCallback>
 8002584:	e005      	b.n	8002592 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f978 	bl	800287c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f987 	bl	80028a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d122      	bne.n	80025ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d11b      	bne.n	80025ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0208 	mvn.w	r2, #8
 80025bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2204      	movs	r2, #4
 80025c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f95b 	bl	800288e <HAL_TIM_IC_CaptureCallback>
 80025d8:	e005      	b.n	80025e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f94e 	bl	800287c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f95d 	bl	80028a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	2b10      	cmp	r3, #16
 80025f8:	d122      	bne.n	8002640 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f003 0310 	and.w	r3, r3, #16
 8002604:	2b10      	cmp	r3, #16
 8002606:	d11b      	bne.n	8002640 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f06f 0210 	mvn.w	r2, #16
 8002610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2208      	movs	r2, #8
 8002616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f931 	bl	800288e <HAL_TIM_IC_CaptureCallback>
 800262c:	e005      	b.n	800263a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f924 	bl	800287c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f933 	bl	80028a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b01      	cmp	r3, #1
 800264c:	d10e      	bne.n	800266c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b01      	cmp	r3, #1
 800265a:	d107      	bne.n	800266c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0201 	mvn.w	r2, #1
 8002664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7fe f8b0 	bl	80007cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002676:	2b80      	cmp	r3, #128	; 0x80
 8002678:	d10e      	bne.n	8002698 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002684:	2b80      	cmp	r3, #128	; 0x80
 8002686:	d107      	bne.n	8002698 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fb8b 	bl	8002dae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a2:	2b40      	cmp	r3, #64	; 0x40
 80026a4:	d10e      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b0:	2b40      	cmp	r3, #64	; 0x40
 80026b2:	d107      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f8f7 	bl	80028b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	d10e      	bne.n	80026f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b20      	cmp	r3, #32
 80026de:	d107      	bne.n	80026f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f06f 0220 	mvn.w	r2, #32
 80026e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 fb56 	bl	8002d9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002712:	2302      	movs	r3, #2
 8002714:	e0ae      	b.n	8002874 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b0c      	cmp	r3, #12
 8002722:	f200 809f 	bhi.w	8002864 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002726:	a201      	add	r2, pc, #4	; (adr r2, 800272c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272c:	08002761 	.word	0x08002761
 8002730:	08002865 	.word	0x08002865
 8002734:	08002865 	.word	0x08002865
 8002738:	08002865 	.word	0x08002865
 800273c:	080027a1 	.word	0x080027a1
 8002740:	08002865 	.word	0x08002865
 8002744:	08002865 	.word	0x08002865
 8002748:	08002865 	.word	0x08002865
 800274c:	080027e3 	.word	0x080027e3
 8002750:	08002865 	.word	0x08002865
 8002754:	08002865 	.word	0x08002865
 8002758:	08002865 	.word	0x08002865
 800275c:	08002823 	.word	0x08002823
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	4618      	mov	r0, r3
 8002768:	f000 f90e 	bl	8002988 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	699a      	ldr	r2, [r3, #24]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0208 	orr.w	r2, r2, #8
 800277a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699a      	ldr	r2, [r3, #24]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0204 	bic.w	r2, r2, #4
 800278a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6999      	ldr	r1, [r3, #24]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	619a      	str	r2, [r3, #24]
      break;
 800279e:	e064      	b.n	800286a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f954 	bl	8002a54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6999      	ldr	r1, [r3, #24]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	021a      	lsls	r2, r3, #8
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	619a      	str	r2, [r3, #24]
      break;
 80027e0:	e043      	b.n	800286a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68b9      	ldr	r1, [r7, #8]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 f99d 	bl	8002b28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	69da      	ldr	r2, [r3, #28]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0208 	orr.w	r2, r2, #8
 80027fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	69da      	ldr	r2, [r3, #28]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0204 	bic.w	r2, r2, #4
 800280c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	69d9      	ldr	r1, [r3, #28]
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	61da      	str	r2, [r3, #28]
      break;
 8002820:	e023      	b.n	800286a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	4618      	mov	r0, r3
 800282a:	f000 f9e7 	bl	8002bfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	69da      	ldr	r2, [r3, #28]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800283c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	69da      	ldr	r2, [r3, #28]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800284c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	69d9      	ldr	r1, [r3, #28]
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	021a      	lsls	r2, r3, #8
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	61da      	str	r2, [r3, #28]
      break;
 8002862:	e002      	b.n	800286a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	75fb      	strb	r3, [r7, #23]
      break;
 8002868:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002872:	7dfb      	ldrb	r3, [r7, #23]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr

0800288e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr

080028b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a29      	ldr	r2, [pc, #164]	; (800297c <TIM_Base_SetConfig+0xb8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d00b      	beq.n	80028f4 <TIM_Base_SetConfig+0x30>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e2:	d007      	beq.n	80028f4 <TIM_Base_SetConfig+0x30>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a26      	ldr	r2, [pc, #152]	; (8002980 <TIM_Base_SetConfig+0xbc>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d003      	beq.n	80028f4 <TIM_Base_SetConfig+0x30>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a25      	ldr	r2, [pc, #148]	; (8002984 <TIM_Base_SetConfig+0xc0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d108      	bne.n	8002906 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4313      	orrs	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a1c      	ldr	r2, [pc, #112]	; (800297c <TIM_Base_SetConfig+0xb8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00b      	beq.n	8002926 <TIM_Base_SetConfig+0x62>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002914:	d007      	beq.n	8002926 <TIM_Base_SetConfig+0x62>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a19      	ldr	r2, [pc, #100]	; (8002980 <TIM_Base_SetConfig+0xbc>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d003      	beq.n	8002926 <TIM_Base_SetConfig+0x62>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a18      	ldr	r2, [pc, #96]	; (8002984 <TIM_Base_SetConfig+0xc0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d108      	bne.n	8002938 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800292c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	4313      	orrs	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a07      	ldr	r2, [pc, #28]	; (800297c <TIM_Base_SetConfig+0xb8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d103      	bne.n	800296c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	615a      	str	r2, [r3, #20]
}
 8002972:	bf00      	nop
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr
 800297c:	40012c00 	.word	0x40012c00
 8002980:	40000400 	.word	0x40000400
 8002984:	40000800 	.word	0x40000800

08002988 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002988:	b480      	push	{r7}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f023 0201 	bic.w	r2, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f023 0303 	bic.w	r3, r3, #3
 80029be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f023 0302 	bic.w	r3, r3, #2
 80029d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a1c      	ldr	r2, [pc, #112]	; (8002a50 <TIM_OC1_SetConfig+0xc8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d10c      	bne.n	80029fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f023 0308 	bic.w	r3, r3, #8
 80029ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f023 0304 	bic.w	r3, r3, #4
 80029fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a13      	ldr	r2, [pc, #76]	; (8002a50 <TIM_OC1_SetConfig+0xc8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d111      	bne.n	8002a2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	621a      	str	r2, [r3, #32]
}
 8002a44:	bf00      	nop
 8002a46:	371c      	adds	r7, #28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40012c00 	.word	0x40012c00

08002a54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	f023 0210 	bic.w	r2, r3, #16
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	021b      	lsls	r3, r3, #8
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f023 0320 	bic.w	r3, r3, #32
 8002a9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a1d      	ldr	r2, [pc, #116]	; (8002b24 <TIM_OC2_SetConfig+0xd0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d10d      	bne.n	8002ad0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ace:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a14      	ldr	r2, [pc, #80]	; (8002b24 <TIM_OC2_SetConfig+0xd0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d113      	bne.n	8002b00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ade:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	621a      	str	r2, [r3, #32]
}
 8002b1a:	bf00      	nop
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	40012c00 	.word	0x40012c00

08002b28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f023 0303 	bic.w	r3, r3, #3
 8002b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	021b      	lsls	r3, r3, #8
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a1d      	ldr	r2, [pc, #116]	; (8002bf8 <TIM_OC3_SetConfig+0xd0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d10d      	bne.n	8002ba2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	021b      	lsls	r3, r3, #8
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a14      	ldr	r2, [pc, #80]	; (8002bf8 <TIM_OC3_SetConfig+0xd0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d113      	bne.n	8002bd2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	621a      	str	r2, [r3, #32]
}
 8002bec:	bf00      	nop
 8002bee:	371c      	adds	r7, #28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40012c00 	.word	0x40012c00

08002bfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	021b      	lsls	r3, r3, #8
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	031b      	lsls	r3, r3, #12
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a0f      	ldr	r2, [pc, #60]	; (8002c94 <TIM_OC4_SetConfig+0x98>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d109      	bne.n	8002c70 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	019b      	lsls	r3, r3, #6
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	621a      	str	r2, [r3, #32]
}
 8002c8a:	bf00      	nop
 8002c8c:	371c      	adds	r7, #28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr
 8002c94:	40012c00 	.word	0x40012c00

08002c98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f003 031f 	and.w	r3, r3, #31
 8002caa:	2201      	movs	r2, #1
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a1a      	ldr	r2, [r3, #32]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	401a      	ands	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6a1a      	ldr	r2, [r3, #32]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f003 031f 	and.w	r3, r3, #31
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	621a      	str	r2, [r3, #32]
}
 8002cd6:	bf00      	nop
 8002cd8:	371c      	adds	r7, #28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e046      	b.n	8002d86 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a16      	ldr	r2, [pc, #88]	; (8002d90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00e      	beq.n	8002d5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d44:	d009      	beq.n	8002d5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a12      	ldr	r2, [pc, #72]	; (8002d94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d004      	beq.n	8002d5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a10      	ldr	r2, [pc, #64]	; (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d10c      	bne.n	8002d74 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr
 8002d90:	40012c00 	.word	0x40012c00
 8002d94:	40000400 	.word	0x40000400
 8002d98:	40000800 	.word	0x40000800

08002d9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr

08002dae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e042      	b.n	8002e58 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fd fdde 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2224      	movs	r2, #36	; 0x24
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f91d 	bl	8003044 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695a      	ldr	r2, [r3, #20]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08a      	sub	sp, #40	; 0x28
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b20      	cmp	r3, #32
 8002e7e:	d16d      	bne.n	8002f5c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <HAL_UART_Transmit+0x2c>
 8002e86:	88fb      	ldrh	r3, [r7, #6]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e066      	b.n	8002f5e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2221      	movs	r2, #33	; 0x21
 8002e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e9e:	f7fd feb5 	bl	8000c0c <HAL_GetTick>
 8002ea2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	88fa      	ldrh	r2, [r7, #6]
 8002ea8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	88fa      	ldrh	r2, [r7, #6]
 8002eae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb8:	d108      	bne.n	8002ecc <HAL_UART_Transmit+0x6c>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d104      	bne.n	8002ecc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	61bb      	str	r3, [r7, #24]
 8002eca:	e003      	b.n	8002ed4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ed4:	e02a      	b.n	8002f2c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2200      	movs	r2, #0
 8002ede:	2180      	movs	r1, #128	; 0x80
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 f840 	bl	8002f66 <UART_WaitOnFlagUntilTimeout>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e036      	b.n	8002f5e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10b      	bne.n	8002f0e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	3302      	adds	r3, #2
 8002f0a:	61bb      	str	r3, [r7, #24]
 8002f0c:	e007      	b.n	8002f1e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	781a      	ldrb	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1cf      	bne.n	8002ed6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2140      	movs	r1, #64	; 0x40
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 f810 	bl	8002f66 <UART_WaitOnFlagUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e006      	b.n	8002f5e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e000      	b.n	8002f5e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002f5c:	2302      	movs	r3, #2
  }
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3720      	adds	r7, #32
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b090      	sub	sp, #64	; 0x40
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	603b      	str	r3, [r7, #0]
 8002f72:	4613      	mov	r3, r2
 8002f74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f76:	e050      	b.n	800301a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7e:	d04c      	beq.n	800301a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d007      	beq.n	8002f96 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f86:	f7fd fe41 	bl	8000c0c <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d241      	bcs.n	800301a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	330c      	adds	r3, #12
 8002f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa0:	e853 3f00 	ldrex	r3, [r3]
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	330c      	adds	r3, #12
 8002fb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fb6:	637a      	str	r2, [r7, #52]	; 0x34
 8002fb8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fbe:	e841 2300 	strex	r3, r2, [r1]
 8002fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1e5      	bne.n	8002f96 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3314      	adds	r3, #20
 8002fd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	e853 3f00 	ldrex	r3, [r3]
 8002fd8:	613b      	str	r3, [r7, #16]
   return(result);
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f023 0301 	bic.w	r3, r3, #1
 8002fe0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3314      	adds	r3, #20
 8002fe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fea:	623a      	str	r2, [r7, #32]
 8002fec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fee:	69f9      	ldr	r1, [r7, #28]
 8002ff0:	6a3a      	ldr	r2, [r7, #32]
 8002ff2:	e841 2300 	strex	r3, r2, [r1]
 8002ff6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1e5      	bne.n	8002fca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e00f      	b.n	800303a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4013      	ands	r3, r2
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	429a      	cmp	r2, r3
 8003028:	bf0c      	ite	eq
 800302a:	2301      	moveq	r3, #1
 800302c:	2300      	movne	r3, #0
 800302e:	b2db      	uxtb	r3, r3
 8003030:	461a      	mov	r2, r3
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	429a      	cmp	r2, r3
 8003036:	d09f      	beq.n	8002f78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3740      	adds	r7, #64	; 0x40
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	4313      	orrs	r3, r2
 8003072:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800307e:	f023 030c 	bic.w	r3, r3, #12
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	68b9      	ldr	r1, [r7, #8]
 8003088:	430b      	orrs	r3, r1
 800308a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a2c      	ldr	r2, [pc, #176]	; (8003158 <UART_SetConfig+0x114>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d103      	bne.n	80030b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030ac:	f7fe ff68 	bl	8001f80 <HAL_RCC_GetPCLK2Freq>
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	e002      	b.n	80030ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030b4:	f7fe ff50 	bl	8001f58 <HAL_RCC_GetPCLK1Freq>
 80030b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	009a      	lsls	r2, r3, #2
 80030c4:	441a      	add	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d0:	4a22      	ldr	r2, [pc, #136]	; (800315c <UART_SetConfig+0x118>)
 80030d2:	fba2 2303 	umull	r2, r3, r2, r3
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	0119      	lsls	r1, r3, #4
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	009a      	lsls	r2, r3, #2
 80030e4:	441a      	add	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80030f0:	4b1a      	ldr	r3, [pc, #104]	; (800315c <UART_SetConfig+0x118>)
 80030f2:	fba3 0302 	umull	r0, r3, r3, r2
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	2064      	movs	r0, #100	; 0x64
 80030fa:	fb00 f303 	mul.w	r3, r0, r3
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	3332      	adds	r3, #50	; 0x32
 8003104:	4a15      	ldr	r2, [pc, #84]	; (800315c <UART_SetConfig+0x118>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003110:	4419      	add	r1, r3
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4613      	mov	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	009a      	lsls	r2, r3, #2
 800311c:	441a      	add	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	fbb2 f2f3 	udiv	r2, r2, r3
 8003128:	4b0c      	ldr	r3, [pc, #48]	; (800315c <UART_SetConfig+0x118>)
 800312a:	fba3 0302 	umull	r0, r3, r3, r2
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	2064      	movs	r0, #100	; 0x64
 8003132:	fb00 f303 	mul.w	r3, r0, r3
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	3332      	adds	r3, #50	; 0x32
 800313c:	4a07      	ldr	r2, [pc, #28]	; (800315c <UART_SetConfig+0x118>)
 800313e:	fba2 2303 	umull	r2, r3, r2, r3
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	f003 020f 	and.w	r2, r3, #15
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	440a      	add	r2, r1
 800314e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003150:	bf00      	nop
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40013800 	.word	0x40013800
 800315c:	51eb851f 	.word	0x51eb851f

08003160 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003166:	f3ef 8305 	mrs	r3, IPSR
 800316a:	60bb      	str	r3, [r7, #8]
  return(result);
 800316c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10f      	bne.n	8003192 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003172:	f3ef 8310 	mrs	r3, PRIMASK
 8003176:	607b      	str	r3, [r7, #4]
  return(result);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d109      	bne.n	8003192 <osKernelInitialize+0x32>
 800317e:	4b10      	ldr	r3, [pc, #64]	; (80031c0 <osKernelInitialize+0x60>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d109      	bne.n	800319a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003186:	f3ef 8311 	mrs	r3, BASEPRI
 800318a:	603b      	str	r3, [r7, #0]
  return(result);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003192:	f06f 0305 	mvn.w	r3, #5
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	e00c      	b.n	80031b4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800319a:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <osKernelInitialize+0x60>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d105      	bne.n	80031ae <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80031a2:	4b07      	ldr	r3, [pc, #28]	; (80031c0 <osKernelInitialize+0x60>)
 80031a4:	2201      	movs	r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	e002      	b.n	80031b4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80031ae:	f04f 33ff 	mov.w	r3, #4294967295
 80031b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80031b4:	68fb      	ldr	r3, [r7, #12]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr
 80031c0:	200017e8 	.word	0x200017e8

080031c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031ca:	f3ef 8305 	mrs	r3, IPSR
 80031ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80031d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10f      	bne.n	80031f6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031d6:	f3ef 8310 	mrs	r3, PRIMASK
 80031da:	607b      	str	r3, [r7, #4]
  return(result);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <osKernelStart+0x32>
 80031e2:	4b11      	ldr	r3, [pc, #68]	; (8003228 <osKernelStart+0x64>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d109      	bne.n	80031fe <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031ea:	f3ef 8311 	mrs	r3, BASEPRI
 80031ee:	603b      	str	r3, [r7, #0]
  return(result);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <osKernelStart+0x3a>
    stat = osErrorISR;
 80031f6:	f06f 0305 	mvn.w	r3, #5
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	e00e      	b.n	800321c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80031fe:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <osKernelStart+0x64>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d107      	bne.n	8003216 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003206:	4b08      	ldr	r3, [pc, #32]	; (8003228 <osKernelStart+0x64>)
 8003208:	2202      	movs	r2, #2
 800320a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800320c:	f001 fe64 	bl	8004ed8 <vTaskStartScheduler>
      stat = osOK;
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	e002      	b.n	800321c <osKernelStart+0x58>
    } else {
      stat = osError;
 8003216:	f04f 33ff 	mov.w	r3, #4294967295
 800321a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800321c:	68fb      	ldr	r3, [r7, #12]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	200017e8 	.word	0x200017e8

0800322c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800322c:	b580      	push	{r7, lr}
 800322e:	b092      	sub	sp, #72	; 0x48
 8003230:	af04      	add	r7, sp, #16
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800323c:	f3ef 8305 	mrs	r3, IPSR
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003244:	2b00      	cmp	r3, #0
 8003246:	f040 8094 	bne.w	8003372 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800324a:	f3ef 8310 	mrs	r3, PRIMASK
 800324e:	623b      	str	r3, [r7, #32]
  return(result);
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	2b00      	cmp	r3, #0
 8003254:	f040 808d 	bne.w	8003372 <osThreadNew+0x146>
 8003258:	4b48      	ldr	r3, [pc, #288]	; (800337c <osThreadNew+0x150>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d106      	bne.n	800326e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003260:	f3ef 8311 	mrs	r3, BASEPRI
 8003264:	61fb      	str	r3, [r7, #28]
  return(result);
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	2b00      	cmp	r3, #0
 800326a:	f040 8082 	bne.w	8003372 <osThreadNew+0x146>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d07e      	beq.n	8003372 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003278:	2318      	movs	r3, #24
 800327a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800327c:	2300      	movs	r3, #0
 800327e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003280:	f107 031b 	add.w	r3, r7, #27
 8003284:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003286:	f04f 33ff 	mov.w	r3, #4294967295
 800328a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d045      	beq.n	800331e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <osThreadNew+0x74>
        name = attr->name;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80032ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <osThreadNew+0x9a>
 80032b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b6:	2b38      	cmp	r3, #56	; 0x38
 80032b8:	d805      	bhi.n	80032c6 <osThreadNew+0x9a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <osThreadNew+0x9e>
        return (NULL);
 80032c6:	2300      	movs	r3, #0
 80032c8:	e054      	b.n	8003374 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	089b      	lsrs	r3, r3, #2
 80032d8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00e      	beq.n	8003300 <osThreadNew+0xd4>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	2b5b      	cmp	r3, #91	; 0x5b
 80032e8:	d90a      	bls.n	8003300 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d006      	beq.n	8003300 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <osThreadNew+0xd4>
        mem = 1;
 80032fa:	2301      	movs	r3, #1
 80032fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80032fe:	e010      	b.n	8003322 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10c      	bne.n	8003322 <osThreadNew+0xf6>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d108      	bne.n	8003322 <osThreadNew+0xf6>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d104      	bne.n	8003322 <osThreadNew+0xf6>
          mem = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	62bb      	str	r3, [r7, #40]	; 0x28
 800331c:	e001      	b.n	8003322 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800331e:	2300      	movs	r3, #0
 8003320:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003324:	2b01      	cmp	r3, #1
 8003326:	d110      	bne.n	800334a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003330:	9202      	str	r2, [sp, #8]
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800333c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f001 fbfe 	bl	8004b40 <xTaskCreateStatic>
 8003344:	4603      	mov	r3, r0
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	e013      	b.n	8003372 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800334a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334c:	2b00      	cmp	r3, #0
 800334e:	d110      	bne.n	8003372 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003352:	b29a      	uxth	r2, r3
 8003354:	f107 0314 	add.w	r3, r7, #20
 8003358:	9301      	str	r3, [sp, #4]
 800335a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f001 fc48 	bl	8004bf8 <xTaskCreate>
 8003368:	4603      	mov	r3, r0
 800336a:	2b01      	cmp	r3, #1
 800336c:	d001      	beq.n	8003372 <osThreadNew+0x146>
          hTask = NULL;
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003372:	697b      	ldr	r3, [r7, #20]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3738      	adds	r7, #56	; 0x38
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	200017e8 	.word	0x200017e8

08003380 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003388:	f3ef 8305 	mrs	r3, IPSR
 800338c:	613b      	str	r3, [r7, #16]
  return(result);
 800338e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10f      	bne.n	80033b4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003394:	f3ef 8310 	mrs	r3, PRIMASK
 8003398:	60fb      	str	r3, [r7, #12]
  return(result);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d109      	bne.n	80033b4 <osDelay+0x34>
 80033a0:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <osDelay+0x58>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d109      	bne.n	80033bc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033a8:	f3ef 8311 	mrs	r3, BASEPRI
 80033ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <osDelay+0x3c>
    stat = osErrorISR;
 80033b4:	f06f 0305 	mvn.w	r3, #5
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	e007      	b.n	80033cc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <osDelay+0x4c>
      vTaskDelay(ticks);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f001 fd52 	bl	8004e70 <vTaskDelay>
    }
  }

  return (stat);
 80033cc:	697b      	ldr	r3, [r7, #20]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	200017e8 	.word	0x200017e8

080033dc <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08c      	sub	sp, #48	; 0x30
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033ec:	f3ef 8305 	mrs	r3, IPSR
 80033f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80033f2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f040 8086 	bne.w	8003506 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033fa:	f3ef 8310 	mrs	r3, PRIMASK
 80033fe:	617b      	str	r3, [r7, #20]
  return(result);
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d17f      	bne.n	8003506 <osSemaphoreNew+0x12a>
 8003406:	4b42      	ldr	r3, [pc, #264]	; (8003510 <osSemaphoreNew+0x134>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d105      	bne.n	800341a <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800340e:	f3ef 8311 	mrs	r3, BASEPRI
 8003412:	613b      	str	r3, [r7, #16]
  return(result);
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d175      	bne.n	8003506 <osSemaphoreNew+0x12a>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d072      	beq.n	8003506 <osSemaphoreNew+0x12a>
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	429a      	cmp	r2, r3
 8003426:	d86e      	bhi.n	8003506 <osSemaphoreNew+0x12a>
    mem = -1;
 8003428:	f04f 33ff 	mov.w	r3, #4294967295
 800342c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d015      	beq.n	8003460 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d006      	beq.n	800344a <osSemaphoreNew+0x6e>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	2b4f      	cmp	r3, #79	; 0x4f
 8003442:	d902      	bls.n	800344a <osSemaphoreNew+0x6e>
        mem = 1;
 8003444:	2301      	movs	r3, #1
 8003446:	623b      	str	r3, [r7, #32]
 8003448:	e00c      	b.n	8003464 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d108      	bne.n	8003464 <osSemaphoreNew+0x88>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d104      	bne.n	8003464 <osSemaphoreNew+0x88>
          mem = 0;
 800345a:	2300      	movs	r3, #0
 800345c:	623b      	str	r3, [r7, #32]
 800345e:	e001      	b.n	8003464 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8003460:	2300      	movs	r3, #0
 8003462:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346a:	d04c      	beq.n	8003506 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d128      	bne.n	80034c4 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d10a      	bne.n	800348e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2203      	movs	r2, #3
 800347e:	9200      	str	r2, [sp, #0]
 8003480:	2200      	movs	r2, #0
 8003482:	2100      	movs	r1, #0
 8003484:	2001      	movs	r0, #1
 8003486:	f000 fbb9 	bl	8003bfc <xQueueGenericCreateStatic>
 800348a:	6278      	str	r0, [r7, #36]	; 0x24
 800348c:	e005      	b.n	800349a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800348e:	2203      	movs	r2, #3
 8003490:	2100      	movs	r1, #0
 8003492:	2001      	movs	r0, #1
 8003494:	f000 fc29 	bl	8003cea <xQueueGenericCreate>
 8003498:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	2b00      	cmp	r3, #0
 800349e:	d022      	beq.n	80034e6 <osSemaphoreNew+0x10a>
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d01f      	beq.n	80034e6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80034a6:	2300      	movs	r3, #0
 80034a8:	2200      	movs	r2, #0
 80034aa:	2100      	movs	r1, #0
 80034ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034ae:	f000 fce7 	bl	8003e80 <xQueueGenericSend>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d016      	beq.n	80034e6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80034b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034ba:	f001 f971 	bl	80047a0 <vQueueDelete>
            hSemaphore = NULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
 80034c2:	e010      	b.n	80034e6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d108      	bne.n	80034dc <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	461a      	mov	r2, r3
 80034d0:	68b9      	ldr	r1, [r7, #8]
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 fc6a 	bl	8003dac <xQueueCreateCountingSemaphoreStatic>
 80034d8:	6278      	str	r0, [r7, #36]	; 0x24
 80034da:	e004      	b.n	80034e6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80034dc:	68b9      	ldr	r1, [r7, #8]
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 fc9b 	bl	8003e1a <xQueueCreateCountingSemaphore>
 80034e4:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00c      	beq.n	8003506 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <osSemaphoreNew+0x11e>
          name = attr->name;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	61fb      	str	r3, [r7, #28]
 80034f8:	e001      	b.n	80034fe <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80034fe:	69f9      	ldr	r1, [r7, #28]
 8003500:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003502:	f001 fa97 	bl	8004a34 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003508:	4618      	mov	r0, r3
 800350a:	3728      	adds	r7, #40	; 0x28
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	200017e8 	.word	0x200017e8

08003514 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d103      	bne.n	8003534 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800352c:	f06f 0303 	mvn.w	r3, #3
 8003530:	61fb      	str	r3, [r7, #28]
 8003532:	e04b      	b.n	80035cc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003534:	f3ef 8305 	mrs	r3, IPSR
 8003538:	617b      	str	r3, [r7, #20]
  return(result);
 800353a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10f      	bne.n	8003560 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003540:	f3ef 8310 	mrs	r3, PRIMASK
 8003544:	613b      	str	r3, [r7, #16]
  return(result);
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d109      	bne.n	8003560 <osSemaphoreAcquire+0x4c>
 800354c:	4b22      	ldr	r3, [pc, #136]	; (80035d8 <osSemaphoreAcquire+0xc4>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b02      	cmp	r3, #2
 8003552:	d128      	bne.n	80035a6 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003554:	f3ef 8311 	mrs	r3, BASEPRI
 8003558:	60fb      	str	r3, [r7, #12]
  return(result);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d022      	beq.n	80035a6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8003566:	f06f 0303 	mvn.w	r3, #3
 800356a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800356c:	e02d      	b.n	80035ca <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800356e:	2300      	movs	r3, #0
 8003570:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003572:	f107 0308 	add.w	r3, r7, #8
 8003576:	461a      	mov	r2, r3
 8003578:	2100      	movs	r1, #0
 800357a:	69b8      	ldr	r0, [r7, #24]
 800357c:	f001 f890 	bl	80046a0 <xQueueReceiveFromISR>
 8003580:	4603      	mov	r3, r0
 8003582:	2b01      	cmp	r3, #1
 8003584:	d003      	beq.n	800358e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8003586:	f06f 0302 	mvn.w	r3, #2
 800358a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800358c:	e01d      	b.n	80035ca <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01a      	beq.n	80035ca <osSemaphoreAcquire+0xb6>
 8003594:	4b11      	ldr	r3, [pc, #68]	; (80035dc <osSemaphoreAcquire+0xc8>)
 8003596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80035a4:	e011      	b.n	80035ca <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80035a6:	6839      	ldr	r1, [r7, #0]
 80035a8:	69b8      	ldr	r0, [r7, #24]
 80035aa:	f000 ff6d 	bl	8004488 <xQueueSemaphoreTake>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d00b      	beq.n	80035cc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80035ba:	f06f 0301 	mvn.w	r3, #1
 80035be:	61fb      	str	r3, [r7, #28]
 80035c0:	e004      	b.n	80035cc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80035c2:	f06f 0302 	mvn.w	r3, #2
 80035c6:	61fb      	str	r3, [r7, #28]
 80035c8:	e000      	b.n	80035cc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80035ca:	bf00      	nop
      }
    }
  }

  return (stat);
 80035cc:	69fb      	ldr	r3, [r7, #28]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3720      	adds	r7, #32
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	200017e8 	.word	0x200017e8
 80035dc:	e000ed04 	.word	0xe000ed04

080035e0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d103      	bne.n	80035fe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80035f6:	f06f 0303 	mvn.w	r3, #3
 80035fa:	61fb      	str	r3, [r7, #28]
 80035fc:	e03e      	b.n	800367c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035fe:	f3ef 8305 	mrs	r3, IPSR
 8003602:	617b      	str	r3, [r7, #20]
  return(result);
 8003604:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10f      	bne.n	800362a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800360a:	f3ef 8310 	mrs	r3, PRIMASK
 800360e:	613b      	str	r3, [r7, #16]
  return(result);
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d109      	bne.n	800362a <osSemaphoreRelease+0x4a>
 8003616:	4b1c      	ldr	r3, [pc, #112]	; (8003688 <osSemaphoreRelease+0xa8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d120      	bne.n	8003660 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800361e:	f3ef 8311 	mrs	r3, BASEPRI
 8003622:	60fb      	str	r3, [r7, #12]
  return(result);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d01a      	beq.n	8003660 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800362a:	2300      	movs	r3, #0
 800362c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800362e:	f107 0308 	add.w	r3, r7, #8
 8003632:	4619      	mov	r1, r3
 8003634:	69b8      	ldr	r0, [r7, #24]
 8003636:	f000 fdb9 	bl	80041ac <xQueueGiveFromISR>
 800363a:	4603      	mov	r3, r0
 800363c:	2b01      	cmp	r3, #1
 800363e:	d003      	beq.n	8003648 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8003640:	f06f 0302 	mvn.w	r3, #2
 8003644:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003646:	e018      	b.n	800367a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d015      	beq.n	800367a <osSemaphoreRelease+0x9a>
 800364e:	4b0f      	ldr	r3, [pc, #60]	; (800368c <osSemaphoreRelease+0xac>)
 8003650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	f3bf 8f4f 	dsb	sy
 800365a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800365e:	e00c      	b.n	800367a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003660:	2300      	movs	r3, #0
 8003662:	2200      	movs	r2, #0
 8003664:	2100      	movs	r1, #0
 8003666:	69b8      	ldr	r0, [r7, #24]
 8003668:	f000 fc0a 	bl	8003e80 <xQueueGenericSend>
 800366c:	4603      	mov	r3, r0
 800366e:	2b01      	cmp	r3, #1
 8003670:	d004      	beq.n	800367c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8003672:	f06f 0302 	mvn.w	r3, #2
 8003676:	61fb      	str	r3, [r7, #28]
 8003678:	e000      	b.n	800367c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800367a:	bf00      	nop
    }
  }

  return (stat);
 800367c:	69fb      	ldr	r3, [r7, #28]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3720      	adds	r7, #32
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	200017e8 	.word	0x200017e8
 800368c:	e000ed04 	.word	0xe000ed04

08003690 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003690:	b580      	push	{r7, lr}
 8003692:	b08c      	sub	sp, #48	; 0x30
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800369c:	2300      	movs	r3, #0
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036a0:	f3ef 8305 	mrs	r3, IPSR
 80036a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80036a6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d16f      	bne.n	800378c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ac:	f3ef 8310 	mrs	r3, PRIMASK
 80036b0:	617b      	str	r3, [r7, #20]
  return(result);
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d169      	bne.n	800378c <osMessageQueueNew+0xfc>
 80036b8:	4b37      	ldr	r3, [pc, #220]	; (8003798 <osMessageQueueNew+0x108>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d105      	bne.n	80036cc <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036c0:	f3ef 8311 	mrs	r3, BASEPRI
 80036c4:	613b      	str	r3, [r7, #16]
  return(result);
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d15f      	bne.n	800378c <osMessageQueueNew+0xfc>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d05c      	beq.n	800378c <osMessageQueueNew+0xfc>
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d059      	beq.n	800378c <osMessageQueueNew+0xfc>
    mem = -1;
 80036d8:	f04f 33ff 	mov.w	r3, #4294967295
 80036dc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d029      	beq.n	8003738 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d012      	beq.n	8003712 <osMessageQueueNew+0x82>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	2b4f      	cmp	r3, #79	; 0x4f
 80036f2:	d90e      	bls.n	8003712 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	695a      	ldr	r2, [r3, #20]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	68b9      	ldr	r1, [r7, #8]
 8003704:	fb01 f303 	mul.w	r3, r1, r3
 8003708:	429a      	cmp	r2, r3
 800370a:	d302      	bcc.n	8003712 <osMessageQueueNew+0x82>
        mem = 1;
 800370c:	2301      	movs	r3, #1
 800370e:	623b      	str	r3, [r7, #32]
 8003710:	e014      	b.n	800373c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d110      	bne.n	800373c <osMessageQueueNew+0xac>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10c      	bne.n	800373c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003726:	2b00      	cmp	r3, #0
 8003728:	d108      	bne.n	800373c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d104      	bne.n	800373c <osMessageQueueNew+0xac>
          mem = 0;
 8003732:	2300      	movs	r3, #0
 8003734:	623b      	str	r3, [r7, #32]
 8003736:	e001      	b.n	800373c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003738:	2300      	movs	r3, #0
 800373a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d10b      	bne.n	800375a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2100      	movs	r1, #0
 800374c:	9100      	str	r1, [sp, #0]
 800374e:	68b9      	ldr	r1, [r7, #8]
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 fa53 	bl	8003bfc <xQueueGenericCreateStatic>
 8003756:	6278      	str	r0, [r7, #36]	; 0x24
 8003758:	e008      	b.n	800376c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d105      	bne.n	800376c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003760:	2200      	movs	r2, #0
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 fac0 	bl	8003cea <xQueueGenericCreate>
 800376a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00c      	beq.n	800378c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <osMessageQueueNew+0xf0>
        name = attr->name;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	e001      	b.n	8003784 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8003780:	2300      	movs	r3, #0
 8003782:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003784:	69f9      	ldr	r1, [r7, #28]
 8003786:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003788:	f001 f954 	bl	8004a34 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800378e:	4618      	mov	r0, r3
 8003790:	3728      	adds	r7, #40	; 0x28
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	200017e8 	.word	0x200017e8

0800379c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800379c:	b580      	push	{r7, lr}
 800379e:	b08a      	sub	sp, #40	; 0x28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	603b      	str	r3, [r7, #0]
 80037a8:	4613      	mov	r3, r2
 80037aa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80037b0:	2300      	movs	r3, #0
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037b4:	f3ef 8305 	mrs	r3, IPSR
 80037b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80037ba:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10f      	bne.n	80037e0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037c0:	f3ef 8310 	mrs	r3, PRIMASK
 80037c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d109      	bne.n	80037e0 <osMessageQueuePut+0x44>
 80037cc:	4b2b      	ldr	r3, [pc, #172]	; (800387c <osMessageQueuePut+0xe0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d12e      	bne.n	8003832 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037d4:	f3ef 8311 	mrs	r3, BASEPRI
 80037d8:	617b      	str	r3, [r7, #20]
  return(result);
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d028      	beq.n	8003832 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d005      	beq.n	80037f2 <osMessageQueuePut+0x56>
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <osMessageQueuePut+0x56>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80037f2:	f06f 0303 	mvn.w	r3, #3
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80037f8:	e039      	b.n	800386e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80037fa:	2300      	movs	r3, #0
 80037fc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80037fe:	f107 0210 	add.w	r2, r7, #16
 8003802:	2300      	movs	r3, #0
 8003804:	68b9      	ldr	r1, [r7, #8]
 8003806:	6a38      	ldr	r0, [r7, #32]
 8003808:	f000 fc38 	bl	800407c <xQueueGenericSendFromISR>
 800380c:	4603      	mov	r3, r0
 800380e:	2b01      	cmp	r3, #1
 8003810:	d003      	beq.n	800381a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8003812:	f06f 0302 	mvn.w	r3, #2
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003818:	e029      	b.n	800386e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d026      	beq.n	800386e <osMessageQueuePut+0xd2>
 8003820:	4b17      	ldr	r3, [pc, #92]	; (8003880 <osMessageQueuePut+0xe4>)
 8003822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003830:	e01d      	b.n	800386e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <osMessageQueuePut+0xa2>
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d103      	bne.n	8003846 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800383e:	f06f 0303 	mvn.w	r3, #3
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
 8003844:	e014      	b.n	8003870 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003846:	2300      	movs	r3, #0
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	6a38      	ldr	r0, [r7, #32]
 800384e:	f000 fb17 	bl	8003e80 <xQueueGenericSend>
 8003852:	4603      	mov	r3, r0
 8003854:	2b01      	cmp	r3, #1
 8003856:	d00b      	beq.n	8003870 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800385e:	f06f 0301 	mvn.w	r3, #1
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
 8003864:	e004      	b.n	8003870 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8003866:	f06f 0302 	mvn.w	r3, #2
 800386a:	627b      	str	r3, [r7, #36]	; 0x24
 800386c:	e000      	b.n	8003870 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800386e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003872:	4618      	mov	r0, r3
 8003874:	3728      	adds	r7, #40	; 0x28
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	200017e8 	.word	0x200017e8
 8003880:	e000ed04 	.word	0xe000ed04

08003884 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003884:	b580      	push	{r7, lr}
 8003886:	b08a      	sub	sp, #40	; 0x28
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003896:	2300      	movs	r3, #0
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800389a:	f3ef 8305 	mrs	r3, IPSR
 800389e:	61fb      	str	r3, [r7, #28]
  return(result);
 80038a0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10f      	bne.n	80038c6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038a6:	f3ef 8310 	mrs	r3, PRIMASK
 80038aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d109      	bne.n	80038c6 <osMessageQueueGet+0x42>
 80038b2:	4b2b      	ldr	r3, [pc, #172]	; (8003960 <osMessageQueueGet+0xdc>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d12e      	bne.n	8003918 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038ba:	f3ef 8311 	mrs	r3, BASEPRI
 80038be:	617b      	str	r3, [r7, #20]
  return(result);
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d028      	beq.n	8003918 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <osMessageQueueGet+0x54>
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <osMessageQueueGet+0x54>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80038d8:	f06f 0303 	mvn.w	r3, #3
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80038de:	e038      	b.n	8003952 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80038e0:	2300      	movs	r3, #0
 80038e2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80038e4:	f107 0310 	add.w	r3, r7, #16
 80038e8:	461a      	mov	r2, r3
 80038ea:	68b9      	ldr	r1, [r7, #8]
 80038ec:	6a38      	ldr	r0, [r7, #32]
 80038ee:	f000 fed7 	bl	80046a0 <xQueueReceiveFromISR>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d003      	beq.n	8003900 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80038f8:	f06f 0302 	mvn.w	r3, #2
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80038fe:	e028      	b.n	8003952 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d025      	beq.n	8003952 <osMessageQueueGet+0xce>
 8003906:	4b17      	ldr	r3, [pc, #92]	; (8003964 <osMessageQueueGet+0xe0>)
 8003908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	f3bf 8f4f 	dsb	sy
 8003912:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003916:	e01c      	b.n	8003952 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <osMessageQueueGet+0xa0>
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d103      	bne.n	800392c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8003924:	f06f 0303 	mvn.w	r3, #3
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
 800392a:	e013      	b.n	8003954 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	6a38      	ldr	r0, [r7, #32]
 8003932:	f000 fcc9 	bl	80042c8 <xQueueReceive>
 8003936:	4603      	mov	r3, r0
 8003938:	2b01      	cmp	r3, #1
 800393a:	d00b      	beq.n	8003954 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8003942:	f06f 0301 	mvn.w	r3, #1
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
 8003948:	e004      	b.n	8003954 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800394a:	f06f 0302 	mvn.w	r3, #2
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
 8003950:	e000      	b.n	8003954 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003952:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003956:	4618      	mov	r0, r3
 8003958:	3728      	adds	r7, #40	; 0x28
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	200017e8 	.word	0x200017e8
 8003964:	e000ed04 	.word	0xe000ed04

08003968 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4a06      	ldr	r2, [pc, #24]	; (8003990 <vApplicationGetIdleTaskMemory+0x28>)
 8003978:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	4a05      	ldr	r2, [pc, #20]	; (8003994 <vApplicationGetIdleTaskMemory+0x2c>)
 800397e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2280      	movs	r2, #128	; 0x80
 8003984:	601a      	str	r2, [r3, #0]
}
 8003986:	bf00      	nop
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr
 8003990:	200017ec 	.word	0x200017ec
 8003994:	20001848 	.word	0x20001848

08003998 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4a07      	ldr	r2, [pc, #28]	; (80039c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80039a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	4a06      	ldr	r2, [pc, #24]	; (80039c8 <vApplicationGetTimerTaskMemory+0x30>)
 80039ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039b6:	601a      	str	r2, [r3, #0]
}
 80039b8:	bf00      	nop
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	20001a48 	.word	0x20001a48
 80039c8:	20001aa4 	.word	0x20001aa4

080039cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f103 0208 	add.w	r2, r3, #8
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f04f 32ff 	mov.w	r2, #4294967295
 80039e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f103 0208 	add.w	r2, r3, #8
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f103 0208 	add.w	r2, r3, #8
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr

08003a0a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr

08003a22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a22:	b480      	push	{r7}
 8003a24:	b085      	sub	sp, #20
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
 8003a2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	601a      	str	r2, [r3, #0]
}
 8003a5e:	bf00      	nop
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr

08003a68 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7e:	d103      	bne.n	8003a88 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	e00c      	b.n	8003aa2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3308      	adds	r3, #8
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	e002      	b.n	8003a96 <vListInsert+0x2e>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d2f6      	bcs.n	8003a90 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	601a      	str	r2, [r3, #0]
}
 8003ace:	bf00      	nop
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr

08003ad8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6892      	ldr	r2, [r2, #8]
 8003aee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6852      	ldr	r2, [r2, #4]
 8003af8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d103      	bne.n	8003b0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	1e5a      	subs	r2, r3, #1
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr
	...

08003b2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10a      	bne.n	8003b56 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b44:	f383 8811 	msr	BASEPRI, r3
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b52:	bf00      	nop
 8003b54:	e7fe      	b.n	8003b54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003b56:	f002 fbf9 	bl	800634c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b62:	68f9      	ldr	r1, [r7, #12]
 8003b64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b66:	fb01 f303 	mul.w	r3, r1, r3
 8003b6a:	441a      	add	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b86:	3b01      	subs	r3, #1
 8003b88:	68f9      	ldr	r1, [r7, #12]
 8003b8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b8c:	fb01 f303 	mul.w	r3, r1, r3
 8003b90:	441a      	add	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	22ff      	movs	r2, #255	; 0xff
 8003b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	22ff      	movs	r2, #255	; 0xff
 8003ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d114      	bne.n	8003bd6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d01a      	beq.n	8003bea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	3310      	adds	r3, #16
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f001 fc17 	bl	80053ec <xTaskRemoveFromEventList>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d012      	beq.n	8003bea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003bc4:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <xQueueGenericReset+0xcc>)
 8003bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	e009      	b.n	8003bea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	3310      	adds	r3, #16
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff fef6 	bl	80039cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	3324      	adds	r3, #36	; 0x24
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff fef1 	bl	80039cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003bea:	f002 fbdf 	bl	80063ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003bee:	2301      	movs	r3, #1
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	e000ed04 	.word	0xe000ed04

08003bfc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08e      	sub	sp, #56	; 0x38
 8003c00:	af02      	add	r7, sp, #8
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10a      	bne.n	8003c26 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c22:	bf00      	nop
 8003c24:	e7fe      	b.n	8003c24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10a      	bne.n	8003c42 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c3e:	bf00      	nop
 8003c40:	e7fe      	b.n	8003c40 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <xQueueGenericCreateStatic+0x52>
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <xQueueGenericCreateStatic+0x56>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <xQueueGenericCreateStatic+0x58>
 8003c52:	2300      	movs	r3, #0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10a      	bne.n	8003c6e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5c:	f383 8811 	msr	BASEPRI, r3
 8003c60:	f3bf 8f6f 	isb	sy
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	623b      	str	r3, [r7, #32]
}
 8003c6a:	bf00      	nop
 8003c6c:	e7fe      	b.n	8003c6c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d102      	bne.n	8003c7a <xQueueGenericCreateStatic+0x7e>
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <xQueueGenericCreateStatic+0x82>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <xQueueGenericCreateStatic+0x84>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	61fb      	str	r3, [r7, #28]
}
 8003c96:	bf00      	nop
 8003c98:	e7fe      	b.n	8003c98 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003c9a:	2350      	movs	r3, #80	; 0x50
 8003c9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b50      	cmp	r3, #80	; 0x50
 8003ca2:	d00a      	beq.n	8003cba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	61bb      	str	r3, [r7, #24]
}
 8003cb6:	bf00      	nop
 8003cb8:	e7fe      	b.n	8003cb8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00d      	beq.n	8003ce0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ccc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f843 	bl	8003d66 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3730      	adds	r7, #48	; 0x30
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b08a      	sub	sp, #40	; 0x28
 8003cee:	af02      	add	r7, sp, #8
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10a      	bne.n	8003d14 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	613b      	str	r3, [r7, #16]
}
 8003d10:	bf00      	nop
 8003d12:	e7fe      	b.n	8003d12 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d102      	bne.n	8003d20 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	e004      	b.n	8003d2a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	fb02 f303 	mul.w	r3, r2, r3
 8003d28:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	3350      	adds	r3, #80	; 0x50
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f002 fc0c 	bl	800654c <pvPortMalloc>
 8003d34:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00f      	beq.n	8003d5c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	3350      	adds	r3, #80	; 0x50
 8003d40:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d4a:	79fa      	ldrb	r2, [r7, #7]
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	4613      	mov	r3, r2
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	68b9      	ldr	r1, [r7, #8]
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 f805 	bl	8003d66 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003d5c:	69bb      	ldr	r3, [r7, #24]
	}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3720      	adds	r7, #32
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b084      	sub	sp, #16
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	60f8      	str	r0, [r7, #12]
 8003d6e:	60b9      	str	r1, [r7, #8]
 8003d70:	607a      	str	r2, [r7, #4]
 8003d72:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d103      	bne.n	8003d82 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	e002      	b.n	8003d88 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d94:	2101      	movs	r1, #1
 8003d96:	69b8      	ldr	r0, [r7, #24]
 8003d98:	f7ff fec8 	bl	8003b2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	78fa      	ldrb	r2, [r7, #3]
 8003da0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003da4:	bf00      	nop
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08a      	sub	sp, #40	; 0x28
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8003dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	61bb      	str	r3, [r7, #24]
}
 8003dd0:	bf00      	nop
 8003dd2:	e7fe      	b.n	8003dd2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d90a      	bls.n	8003df2 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8003ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	617b      	str	r3, [r7, #20]
}
 8003dee:	bf00      	nop
 8003df0:	e7fe      	b.n	8003df0 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003df2:	2302      	movs	r3, #2
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f7ff fefd 	bl	8003bfc <xQueueGenericCreateStatic>
 8003e02:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003e10:	69fb      	ldr	r3, [r7, #28]
	}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3720      	adds	r7, #32
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b086      	sub	sp, #24
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10a      	bne.n	8003e40 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2e:	f383 8811 	msr	BASEPRI, r3
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	613b      	str	r3, [r7, #16]
}
 8003e3c:	bf00      	nop
 8003e3e:	e7fe      	b.n	8003e3e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d90a      	bls.n	8003e5e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	60fb      	str	r3, [r7, #12]
}
 8003e5a:	bf00      	nop
 8003e5c:	e7fe      	b.n	8003e5c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003e5e:	2202      	movs	r2, #2
 8003e60:	2100      	movs	r1, #0
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff ff41 	bl	8003cea <xQueueGenericCreate>
 8003e68:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003e76:	697b      	ldr	r3, [r7, #20]
	}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b08e      	sub	sp, #56	; 0x38
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
 8003e8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10a      	bne.n	8003eb2 <xQueueGenericSend+0x32>
	__asm volatile
 8003e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003eae:	bf00      	nop
 8003eb0:	e7fe      	b.n	8003eb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d103      	bne.n	8003ec0 <xQueueGenericSend+0x40>
 8003eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <xQueueGenericSend+0x44>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <xQueueGenericSend+0x46>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10a      	bne.n	8003ee0 <xQueueGenericSend+0x60>
	__asm volatile
 8003eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003edc:	bf00      	nop
 8003ede:	e7fe      	b.n	8003ede <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d103      	bne.n	8003eee <xQueueGenericSend+0x6e>
 8003ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <xQueueGenericSend+0x72>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e000      	b.n	8003ef4 <xQueueGenericSend+0x74>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10a      	bne.n	8003f0e <xQueueGenericSend+0x8e>
	__asm volatile
 8003ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efc:	f383 8811 	msr	BASEPRI, r3
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	623b      	str	r3, [r7, #32]
}
 8003f0a:	bf00      	nop
 8003f0c:	e7fe      	b.n	8003f0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f0e:	f001 fc2f 	bl	8005770 <xTaskGetSchedulerState>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d102      	bne.n	8003f1e <xQueueGenericSend+0x9e>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <xQueueGenericSend+0xa2>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <xQueueGenericSend+0xa4>
 8003f22:	2300      	movs	r3, #0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10a      	bne.n	8003f3e <xQueueGenericSend+0xbe>
	__asm volatile
 8003f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2c:	f383 8811 	msr	BASEPRI, r3
 8003f30:	f3bf 8f6f 	isb	sy
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	61fb      	str	r3, [r7, #28]
}
 8003f3a:	bf00      	nop
 8003f3c:	e7fe      	b.n	8003f3c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f3e:	f002 fa05 	bl	800634c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d302      	bcc.n	8003f54 <xQueueGenericSend+0xd4>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d129      	bne.n	8003fa8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	68b9      	ldr	r1, [r7, #8]
 8003f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f5a:	f000 fc5b 	bl	8004814 <prvCopyDataToQueue>
 8003f5e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d010      	beq.n	8003f8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6a:	3324      	adds	r3, #36	; 0x24
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f001 fa3d 	bl	80053ec <xTaskRemoveFromEventList>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d013      	beq.n	8003fa0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f78:	4b3f      	ldr	r3, [pc, #252]	; (8004078 <xQueueGenericSend+0x1f8>)
 8003f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	e00a      	b.n	8003fa0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d007      	beq.n	8003fa0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003f90:	4b39      	ldr	r3, [pc, #228]	; (8004078 <xQueueGenericSend+0x1f8>)
 8003f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003fa0:	f002 fa04 	bl	80063ac <vPortExitCritical>
				return pdPASS;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e063      	b.n	8004070 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d103      	bne.n	8003fb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fae:	f002 f9fd 	bl	80063ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e05c      	b.n	8004070 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d106      	bne.n	8003fca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fbc:	f107 0314 	add.w	r3, r7, #20
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f001 fa77 	bl	80054b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fca:	f002 f9ef 	bl	80063ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fce:	f000 ffe9 	bl	8004fa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fd2:	f002 f9bb 	bl	800634c <vPortEnterCritical>
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fdc:	b25b      	sxtb	r3, r3
 8003fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe2:	d103      	bne.n	8003fec <xQueueGenericSend+0x16c>
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ff2:	b25b      	sxtb	r3, r3
 8003ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff8:	d103      	bne.n	8004002 <xQueueGenericSend+0x182>
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004002:	f002 f9d3 	bl	80063ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004006:	1d3a      	adds	r2, r7, #4
 8004008:	f107 0314 	add.w	r3, r7, #20
 800400c:	4611      	mov	r1, r2
 800400e:	4618      	mov	r0, r3
 8004010:	f001 fa66 	bl	80054e0 <xTaskCheckForTimeOut>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d124      	bne.n	8004064 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800401a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800401c:	f000 fcf2 	bl	8004a04 <prvIsQueueFull>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d018      	beq.n	8004058 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004028:	3310      	adds	r3, #16
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	4611      	mov	r1, r2
 800402e:	4618      	mov	r0, r3
 8004030:	f001 f98c 	bl	800534c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004036:	f000 fc7d 	bl	8004934 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800403a:	f000 ffc1 	bl	8004fc0 <xTaskResumeAll>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	f47f af7c 	bne.w	8003f3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004046:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <xQueueGenericSend+0x1f8>)
 8004048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	e772      	b.n	8003f3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800405a:	f000 fc6b 	bl	8004934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800405e:	f000 ffaf 	bl	8004fc0 <xTaskResumeAll>
 8004062:	e76c      	b.n	8003f3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004066:	f000 fc65 	bl	8004934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800406a:	f000 ffa9 	bl	8004fc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800406e:	2300      	movs	r3, #0
		}
	}
}
 8004070:	4618      	mov	r0, r3
 8004072:	3738      	adds	r7, #56	; 0x38
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	e000ed04 	.word	0xe000ed04

0800407c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08e      	sub	sp, #56	; 0x38
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
 8004088:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800408e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10a      	bne.n	80040aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040a6:	bf00      	nop
 80040a8:	e7fe      	b.n	80040a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d103      	bne.n	80040b8 <xQueueGenericSendFromISR+0x3c>
 80040b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <xQueueGenericSendFromISR+0x40>
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <xQueueGenericSendFromISR+0x42>
 80040bc:	2300      	movs	r3, #0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10a      	bne.n	80040d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80040c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	623b      	str	r3, [r7, #32]
}
 80040d4:	bf00      	nop
 80040d6:	e7fe      	b.n	80040d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d103      	bne.n	80040e6 <xQueueGenericSendFromISR+0x6a>
 80040de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <xQueueGenericSendFromISR+0x6e>
 80040e6:	2301      	movs	r3, #1
 80040e8:	e000      	b.n	80040ec <xQueueGenericSendFromISR+0x70>
 80040ea:	2300      	movs	r3, #0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10a      	bne.n	8004106 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80040f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	61fb      	str	r3, [r7, #28]
}
 8004102:	bf00      	nop
 8004104:	e7fe      	b.n	8004104 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004106:	f002 f9e3 	bl	80064d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800410a:	f3ef 8211 	mrs	r2, BASEPRI
 800410e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	61ba      	str	r2, [r7, #24]
 8004120:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004122:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004124:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412e:	429a      	cmp	r2, r3
 8004130:	d302      	bcc.n	8004138 <xQueueGenericSendFromISR+0xbc>
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b02      	cmp	r3, #2
 8004136:	d12c      	bne.n	8004192 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800413e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004148:	f000 fb64 	bl	8004814 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800414c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004154:	d112      	bne.n	800417c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	2b00      	cmp	r3, #0
 800415c:	d016      	beq.n	800418c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	3324      	adds	r3, #36	; 0x24
 8004162:	4618      	mov	r0, r3
 8004164:	f001 f942 	bl	80053ec <xTaskRemoveFromEventList>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00e      	beq.n	800418c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00b      	beq.n	800418c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	e007      	b.n	800418c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800417c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004180:	3301      	adds	r3, #1
 8004182:	b2db      	uxtb	r3, r3
 8004184:	b25a      	sxtb	r2, r3
 8004186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800418c:	2301      	movs	r3, #1
 800418e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004190:	e001      	b.n	8004196 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004192:	2300      	movs	r3, #0
 8004194:	637b      	str	r3, [r7, #52]	; 0x34
 8004196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004198:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80041a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80041a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3738      	adds	r7, #56	; 0x38
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08e      	sub	sp, #56	; 0x38
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80041ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10a      	bne.n	80041d6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	623b      	str	r3, [r7, #32]
}
 80041d2:	bf00      	nop
 80041d4:	e7fe      	b.n	80041d4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <xQueueGiveFromISR+0x48>
	__asm volatile
 80041de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e2:	f383 8811 	msr	BASEPRI, r3
 80041e6:	f3bf 8f6f 	isb	sy
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	61fb      	str	r3, [r7, #28]
}
 80041f0:	bf00      	nop
 80041f2:	e7fe      	b.n	80041f2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80041f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d103      	bne.n	8004204 <xQueueGiveFromISR+0x58>
 80041fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <xQueueGiveFromISR+0x5c>
 8004204:	2301      	movs	r3, #1
 8004206:	e000      	b.n	800420a <xQueueGiveFromISR+0x5e>
 8004208:	2300      	movs	r3, #0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10a      	bne.n	8004224 <xQueueGiveFromISR+0x78>
	__asm volatile
 800420e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	61bb      	str	r3, [r7, #24]
}
 8004220:	bf00      	nop
 8004222:	e7fe      	b.n	8004222 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004224:	f002 f954 	bl	80064d0 <vPortValidateInterruptPriority>
	__asm volatile
 8004228:	f3ef 8211 	mrs	r2, BASEPRI
 800422c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	617a      	str	r2, [r7, #20]
 800423e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004240:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004248:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800424a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004250:	429a      	cmp	r2, r3
 8004252:	d22b      	bcs.n	80042ac <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800425a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004264:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004266:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800426a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426e:	d112      	bne.n	8004296 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	2b00      	cmp	r3, #0
 8004276:	d016      	beq.n	80042a6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427a:	3324      	adds	r3, #36	; 0x24
 800427c:	4618      	mov	r0, r3
 800427e:	f001 f8b5 	bl	80053ec <xTaskRemoveFromEventList>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00e      	beq.n	80042a6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00b      	beq.n	80042a6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2201      	movs	r2, #1
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	e007      	b.n	80042a6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004296:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800429a:	3301      	adds	r3, #1
 800429c:	b2db      	uxtb	r3, r3
 800429e:	b25a      	sxtb	r2, r3
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80042a6:	2301      	movs	r3, #1
 80042a8:	637b      	str	r3, [r7, #52]	; 0x34
 80042aa:	e001      	b.n	80042b0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80042ac:	2300      	movs	r3, #0
 80042ae:	637b      	str	r3, [r7, #52]	; 0x34
 80042b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f383 8811 	msr	BASEPRI, r3
}
 80042ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3738      	adds	r7, #56	; 0x38
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08c      	sub	sp, #48	; 0x30
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80042d4:	2300      	movs	r3, #0
 80042d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10a      	bne.n	80042f8 <xQueueReceive+0x30>
	__asm volatile
 80042e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e6:	f383 8811 	msr	BASEPRI, r3
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	623b      	str	r3, [r7, #32]
}
 80042f4:	bf00      	nop
 80042f6:	e7fe      	b.n	80042f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d103      	bne.n	8004306 <xQueueReceive+0x3e>
 80042fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <xQueueReceive+0x42>
 8004306:	2301      	movs	r3, #1
 8004308:	e000      	b.n	800430c <xQueueReceive+0x44>
 800430a:	2300      	movs	r3, #0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10a      	bne.n	8004326 <xQueueReceive+0x5e>
	__asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	61fb      	str	r3, [r7, #28]
}
 8004322:	bf00      	nop
 8004324:	e7fe      	b.n	8004324 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004326:	f001 fa23 	bl	8005770 <xTaskGetSchedulerState>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d102      	bne.n	8004336 <xQueueReceive+0x6e>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <xQueueReceive+0x72>
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <xQueueReceive+0x74>
 800433a:	2300      	movs	r3, #0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10a      	bne.n	8004356 <xQueueReceive+0x8e>
	__asm volatile
 8004340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	61bb      	str	r3, [r7, #24]
}
 8004352:	bf00      	nop
 8004354:	e7fe      	b.n	8004354 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004356:	f001 fff9 	bl	800634c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	2b00      	cmp	r3, #0
 8004364:	d01f      	beq.n	80043a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004366:	68b9      	ldr	r1, [r7, #8]
 8004368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800436a:	f000 fabd 	bl	80048e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	1e5a      	subs	r2, r3, #1
 8004372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004374:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00f      	beq.n	800439e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004380:	3310      	adds	r3, #16
 8004382:	4618      	mov	r0, r3
 8004384:	f001 f832 	bl	80053ec <xTaskRemoveFromEventList>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d007      	beq.n	800439e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800438e:	4b3d      	ldr	r3, [pc, #244]	; (8004484 <xQueueReceive+0x1bc>)
 8004390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800439e:	f002 f805 	bl	80063ac <vPortExitCritical>
				return pdPASS;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e069      	b.n	800447a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d103      	bne.n	80043b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043ac:	f001 fffe 	bl	80063ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043b0:	2300      	movs	r3, #0
 80043b2:	e062      	b.n	800447a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d106      	bne.n	80043c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043ba:	f107 0310 	add.w	r3, r7, #16
 80043be:	4618      	mov	r0, r3
 80043c0:	f001 f878 	bl	80054b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043c4:	2301      	movs	r3, #1
 80043c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043c8:	f001 fff0 	bl	80063ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043cc:	f000 fdea 	bl	8004fa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043d0:	f001 ffbc 	bl	800634c <vPortEnterCritical>
 80043d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043da:	b25b      	sxtb	r3, r3
 80043dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e0:	d103      	bne.n	80043ea <xQueueReceive+0x122>
 80043e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043f0:	b25b      	sxtb	r3, r3
 80043f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f6:	d103      	bne.n	8004400 <xQueueReceive+0x138>
 80043f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004400:	f001 ffd4 	bl	80063ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004404:	1d3a      	adds	r2, r7, #4
 8004406:	f107 0310 	add.w	r3, r7, #16
 800440a:	4611      	mov	r1, r2
 800440c:	4618      	mov	r0, r3
 800440e:	f001 f867 	bl	80054e0 <xTaskCheckForTimeOut>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d123      	bne.n	8004460 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004418:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800441a:	f000 fadd 	bl	80049d8 <prvIsQueueEmpty>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d017      	beq.n	8004454 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004426:	3324      	adds	r3, #36	; 0x24
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	4611      	mov	r1, r2
 800442c:	4618      	mov	r0, r3
 800442e:	f000 ff8d 	bl	800534c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004434:	f000 fa7e 	bl	8004934 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004438:	f000 fdc2 	bl	8004fc0 <xTaskResumeAll>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d189      	bne.n	8004356 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004442:	4b10      	ldr	r3, [pc, #64]	; (8004484 <xQueueReceive+0x1bc>)
 8004444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	e780      	b.n	8004356 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004456:	f000 fa6d 	bl	8004934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800445a:	f000 fdb1 	bl	8004fc0 <xTaskResumeAll>
 800445e:	e77a      	b.n	8004356 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004462:	f000 fa67 	bl	8004934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004466:	f000 fdab 	bl	8004fc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800446a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800446c:	f000 fab4 	bl	80049d8 <prvIsQueueEmpty>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	f43f af6f 	beq.w	8004356 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004478:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800447a:	4618      	mov	r0, r3
 800447c:	3730      	adds	r7, #48	; 0x30
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	e000ed04 	.word	0xe000ed04

08004488 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08e      	sub	sp, #56	; 0x38
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004492:	2300      	movs	r3, #0
 8004494:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800449a:	2300      	movs	r3, #0
 800449c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800449e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <xQueueSemaphoreTake+0x32>
	__asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	623b      	str	r3, [r7, #32]
}
 80044b6:	bf00      	nop
 80044b8:	e7fe      	b.n	80044b8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80044ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	61fb      	str	r3, [r7, #28]
}
 80044d4:	bf00      	nop
 80044d6:	e7fe      	b.n	80044d6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044d8:	f001 f94a 	bl	8005770 <xTaskGetSchedulerState>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d102      	bne.n	80044e8 <xQueueSemaphoreTake+0x60>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <xQueueSemaphoreTake+0x64>
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <xQueueSemaphoreTake+0x66>
 80044ec:	2300      	movs	r3, #0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10a      	bne.n	8004508 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80044f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f6:	f383 8811 	msr	BASEPRI, r3
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	61bb      	str	r3, [r7, #24]
}
 8004504:	bf00      	nop
 8004506:	e7fe      	b.n	8004506 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004508:	f001 ff20 	bl	800634c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800450c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004510:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004514:	2b00      	cmp	r3, #0
 8004516:	d024      	beq.n	8004562 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451a:	1e5a      	subs	r2, r3, #1
 800451c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d104      	bne.n	8004532 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004528:	f001 faa2 	bl	8005a70 <pvTaskIncrementMutexHeldCount>
 800452c:	4602      	mov	r2, r0
 800452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004530:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00f      	beq.n	800455a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800453a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453c:	3310      	adds	r3, #16
 800453e:	4618      	mov	r0, r3
 8004540:	f000 ff54 	bl	80053ec <xTaskRemoveFromEventList>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d007      	beq.n	800455a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800454a:	4b54      	ldr	r3, [pc, #336]	; (800469c <xQueueSemaphoreTake+0x214>)
 800454c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800455a:	f001 ff27 	bl	80063ac <vPortExitCritical>
				return pdPASS;
 800455e:	2301      	movs	r3, #1
 8004560:	e097      	b.n	8004692 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d111      	bne.n	800458c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	617b      	str	r3, [r7, #20]
}
 8004580:	bf00      	nop
 8004582:	e7fe      	b.n	8004582 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004584:	f001 ff12 	bl	80063ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004588:	2300      	movs	r3, #0
 800458a:	e082      	b.n	8004692 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800458c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004592:	f107 030c 	add.w	r3, r7, #12
 8004596:	4618      	mov	r0, r3
 8004598:	f000 ff8c 	bl	80054b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800459c:	2301      	movs	r3, #1
 800459e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045a0:	f001 ff04 	bl	80063ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045a4:	f000 fcfe 	bl	8004fa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045a8:	f001 fed0 	bl	800634c <vPortEnterCritical>
 80045ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045b2:	b25b      	sxtb	r3, r3
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b8:	d103      	bne.n	80045c2 <xQueueSemaphoreTake+0x13a>
 80045ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045c8:	b25b      	sxtb	r3, r3
 80045ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ce:	d103      	bne.n	80045d8 <xQueueSemaphoreTake+0x150>
 80045d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045d8:	f001 fee8 	bl	80063ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045dc:	463a      	mov	r2, r7
 80045de:	f107 030c 	add.w	r3, r7, #12
 80045e2:	4611      	mov	r1, r2
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 ff7b 	bl	80054e0 <xTaskCheckForTimeOut>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d132      	bne.n	8004656 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80045f2:	f000 f9f1 	bl	80049d8 <prvIsQueueEmpty>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d026      	beq.n	800464a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d109      	bne.n	8004618 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004604:	f001 fea2 	bl	800634c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	4618      	mov	r0, r3
 800460e:	f001 f8cd 	bl	80057ac <xTaskPriorityInherit>
 8004612:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004614:	f001 feca 	bl	80063ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461a:	3324      	adds	r3, #36	; 0x24
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	4611      	mov	r1, r2
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fe93 	bl	800534c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004626:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004628:	f000 f984 	bl	8004934 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800462c:	f000 fcc8 	bl	8004fc0 <xTaskResumeAll>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	f47f af68 	bne.w	8004508 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004638:	4b18      	ldr	r3, [pc, #96]	; (800469c <xQueueSemaphoreTake+0x214>)
 800463a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	e75e      	b.n	8004508 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800464a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800464c:	f000 f972 	bl	8004934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004650:	f000 fcb6 	bl	8004fc0 <xTaskResumeAll>
 8004654:	e758      	b.n	8004508 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004656:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004658:	f000 f96c 	bl	8004934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800465c:	f000 fcb0 	bl	8004fc0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004660:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004662:	f000 f9b9 	bl	80049d8 <prvIsQueueEmpty>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	f43f af4d 	beq.w	8004508 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800466e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00d      	beq.n	8004690 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004674:	f001 fe6a 	bl	800634c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004678:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800467a:	f000 f8b4 	bl	80047e6 <prvGetDisinheritPriorityAfterTimeout>
 800467e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004686:	4618      	mov	r0, r3
 8004688:	f001 f96c 	bl	8005964 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800468c:	f001 fe8e 	bl	80063ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004690:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004692:	4618      	mov	r0, r3
 8004694:	3738      	adds	r7, #56	; 0x38
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	e000ed04 	.word	0xe000ed04

080046a0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08e      	sub	sp, #56	; 0x38
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80046b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	623b      	str	r3, [r7, #32]
}
 80046c8:	bf00      	nop
 80046ca:	e7fe      	b.n	80046ca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d103      	bne.n	80046da <xQueueReceiveFromISR+0x3a>
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <xQueueReceiveFromISR+0x3e>
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <xQueueReceiveFromISR+0x40>
 80046de:	2300      	movs	r3, #0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10a      	bne.n	80046fa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80046e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	61fb      	str	r3, [r7, #28]
}
 80046f6:	bf00      	nop
 80046f8:	e7fe      	b.n	80046f8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046fa:	f001 fee9 	bl	80064d0 <vPortValidateInterruptPriority>
	__asm volatile
 80046fe:	f3ef 8211 	mrs	r2, BASEPRI
 8004702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	61ba      	str	r2, [r7, #24]
 8004714:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004716:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004718:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800471a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004722:	2b00      	cmp	r3, #0
 8004724:	d02f      	beq.n	8004786 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004728:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800472c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004730:	68b9      	ldr	r1, [r7, #8]
 8004732:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004734:	f000 f8d8 	bl	80048e8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	1e5a      	subs	r2, r3, #1
 800473c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004740:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004748:	d112      	bne.n	8004770 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d016      	beq.n	8004780 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004754:	3310      	adds	r3, #16
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fe48 	bl	80053ec <xTaskRemoveFromEventList>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00e      	beq.n	8004780 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00b      	beq.n	8004780 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	e007      	b.n	8004780 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004774:	3301      	adds	r3, #1
 8004776:	b2db      	uxtb	r3, r3
 8004778:	b25a      	sxtb	r2, r3
 800477a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004780:	2301      	movs	r3, #1
 8004782:	637b      	str	r3, [r7, #52]	; 0x34
 8004784:	e001      	b.n	800478a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004786:	2300      	movs	r3, #0
 8004788:	637b      	str	r3, [r7, #52]	; 0x34
 800478a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f383 8811 	msr	BASEPRI, r3
}
 8004794:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004798:	4618      	mov	r0, r3
 800479a:	3738      	adds	r7, #56	; 0x38
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10a      	bne.n	80047c8 <vQueueDelete+0x28>
	__asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	60bb      	str	r3, [r7, #8]
}
 80047c4:	bf00      	nop
 80047c6:	e7fe      	b.n	80047c6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 f95b 	bl	8004a84 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d102      	bne.n	80047de <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f001 ff7b 	bl	80066d4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80047de:	bf00      	nop
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80047e6:	b480      	push	{r7}
 80047e8:	b085      	sub	sp, #20
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d006      	beq.n	8004804 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	e001      	b.n	8004808 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004808:	68fb      	ldr	r3, [r7, #12]
	}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	bc80      	pop	{r7}
 8004812:	4770      	bx	lr

08004814 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004828:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10d      	bne.n	800484e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d14d      	bne.n	80048d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	4618      	mov	r0, r3
 8004840:	f001 f822 	bl	8005888 <xTaskPriorityDisinherit>
 8004844:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	605a      	str	r2, [r3, #4]
 800484c:	e043      	b.n	80048d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d119      	bne.n	8004888 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6898      	ldr	r0, [r3, #8]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	461a      	mov	r2, r3
 800485e:	68b9      	ldr	r1, [r7, #8]
 8004860:	f002 f870 	bl	8006944 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	441a      	add	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	429a      	cmp	r2, r3
 800487c:	d32b      	bcc.n	80048d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	609a      	str	r2, [r3, #8]
 8004886:	e026      	b.n	80048d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	68d8      	ldr	r0, [r3, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004890:	461a      	mov	r2, r3
 8004892:	68b9      	ldr	r1, [r7, #8]
 8004894:	f002 f856 	bl	8006944 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	68da      	ldr	r2, [r3, #12]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	425b      	negs	r3, r3
 80048a2:	441a      	add	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d207      	bcs.n	80048c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	425b      	negs	r3, r3
 80048be:	441a      	add	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d105      	bne.n	80048d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80048de:	697b      	ldr	r3, [r7, #20]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d018      	beq.n	800492c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	441a      	add	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	429a      	cmp	r2, r3
 8004912:	d303      	bcc.n	800491c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68d9      	ldr	r1, [r3, #12]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	461a      	mov	r2, r3
 8004926:	6838      	ldr	r0, [r7, #0]
 8004928:	f002 f80c 	bl	8006944 <memcpy>
	}
}
 800492c:	bf00      	nop
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800493c:	f001 fd06 	bl	800634c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004946:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004948:	e011      	b.n	800496e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	2b00      	cmp	r3, #0
 8004950:	d012      	beq.n	8004978 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	3324      	adds	r3, #36	; 0x24
 8004956:	4618      	mov	r0, r3
 8004958:	f000 fd48 	bl	80053ec <xTaskRemoveFromEventList>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004962:	f000 fe1f 	bl	80055a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004966:	7bfb      	ldrb	r3, [r7, #15]
 8004968:	3b01      	subs	r3, #1
 800496a:	b2db      	uxtb	r3, r3
 800496c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800496e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004972:	2b00      	cmp	r3, #0
 8004974:	dce9      	bgt.n	800494a <prvUnlockQueue+0x16>
 8004976:	e000      	b.n	800497a <prvUnlockQueue+0x46>
					break;
 8004978:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	22ff      	movs	r2, #255	; 0xff
 800497e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004982:	f001 fd13 	bl	80063ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004986:	f001 fce1 	bl	800634c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004990:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004992:	e011      	b.n	80049b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d012      	beq.n	80049c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3310      	adds	r3, #16
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fd23 	bl	80053ec <xTaskRemoveFromEventList>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80049ac:	f000 fdfa 	bl	80055a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80049b0:	7bbb      	ldrb	r3, [r7, #14]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	dce9      	bgt.n	8004994 <prvUnlockQueue+0x60>
 80049c0:	e000      	b.n	80049c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	22ff      	movs	r2, #255	; 0xff
 80049c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80049cc:	f001 fcee 	bl	80063ac <vPortExitCritical>
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049e0:	f001 fcb4 	bl	800634c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d102      	bne.n	80049f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80049ec:	2301      	movs	r3, #1
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	e001      	b.n	80049f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80049f2:	2300      	movs	r3, #0
 80049f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049f6:	f001 fcd9 	bl	80063ac <vPortExitCritical>

	return xReturn;
 80049fa:	68fb      	ldr	r3, [r7, #12]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a0c:	f001 fc9e 	bl	800634c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d102      	bne.n	8004a22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	e001      	b.n	8004a26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a26:	f001 fcc1 	bl	80063ac <vPortExitCritical>

	return xReturn;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	e014      	b.n	8004a6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a44:	4a0e      	ldr	r2, [pc, #56]	; (8004a80 <vQueueAddToRegistry+0x4c>)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10b      	bne.n	8004a68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a50:	490b      	ldr	r1, [pc, #44]	; (8004a80 <vQueueAddToRegistry+0x4c>)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a5a:	4a09      	ldr	r2, [pc, #36]	; (8004a80 <vQueueAddToRegistry+0x4c>)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	4413      	add	r3, r2
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a66:	e006      	b.n	8004a76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b07      	cmp	r3, #7
 8004a72:	d9e7      	bls.n	8004a44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bc80      	pop	{r7}
 8004a7e:	4770      	bx	lr
 8004a80:	20001ea4 	.word	0x20001ea4

08004a84 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	e016      	b.n	8004ac0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004a92:	4a10      	ldr	r2, [pc, #64]	; (8004ad4 <vQueueUnregisterQueue+0x50>)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	4413      	add	r3, r2
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d10b      	bne.n	8004aba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004aa2:	4a0c      	ldr	r2, [pc, #48]	; (8004ad4 <vQueueUnregisterQueue+0x50>)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004aac:	4a09      	ldr	r2, [pc, #36]	; (8004ad4 <vQueueUnregisterQueue+0x50>)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	4413      	add	r3, r2
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	605a      	str	r2, [r3, #4]
				break;
 8004ab8:	e006      	b.n	8004ac8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	3301      	adds	r3, #1
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2b07      	cmp	r3, #7
 8004ac4:	d9e5      	bls.n	8004a92 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004ac6:	bf00      	nop
 8004ac8:	bf00      	nop
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	20001ea4 	.word	0x20001ea4

08004ad8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ae8:	f001 fc30 	bl	800634c <vPortEnterCritical>
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004af2:	b25b      	sxtb	r3, r3
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af8:	d103      	bne.n	8004b02 <vQueueWaitForMessageRestricted+0x2a>
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b08:	b25b      	sxtb	r3, r3
 8004b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0e:	d103      	bne.n	8004b18 <vQueueWaitForMessageRestricted+0x40>
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b18:	f001 fc48 	bl	80063ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d106      	bne.n	8004b32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	3324      	adds	r3, #36	; 0x24
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	68b9      	ldr	r1, [r7, #8]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 fc31 	bl	8005394 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b32:	6978      	ldr	r0, [r7, #20]
 8004b34:	f7ff fefe 	bl	8004934 <prvUnlockQueue>
	}
 8004b38:	bf00      	nop
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08e      	sub	sp, #56	; 0x38
 8004b44:	af04      	add	r7, sp, #16
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10a      	bne.n	8004b6a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	623b      	str	r3, [r7, #32]
}
 8004b66:	bf00      	nop
 8004b68:	e7fe      	b.n	8004b68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10a      	bne.n	8004b86 <xTaskCreateStatic+0x46>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	61fb      	str	r3, [r7, #28]
}
 8004b82:	bf00      	nop
 8004b84:	e7fe      	b.n	8004b84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b86:	235c      	movs	r3, #92	; 0x5c
 8004b88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	2b5c      	cmp	r3, #92	; 0x5c
 8004b8e:	d00a      	beq.n	8004ba6 <xTaskCreateStatic+0x66>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	61bb      	str	r3, [r7, #24]
}
 8004ba2:	bf00      	nop
 8004ba4:	e7fe      	b.n	8004ba4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d01e      	beq.n	8004bea <xTaskCreateStatic+0xaa>
 8004bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d01b      	beq.n	8004bea <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	9303      	str	r3, [sp, #12]
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	9302      	str	r3, [sp, #8]
 8004bcc:	f107 0314 	add.w	r3, r7, #20
 8004bd0:	9301      	str	r3, [sp, #4]
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 f850 	bl	8004c82 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004be2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004be4:	f000 f8d4 	bl	8004d90 <prvAddNewTaskToReadyList>
 8004be8:	e001      	b.n	8004bee <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004bee:	697b      	ldr	r3, [r7, #20]
	}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3728      	adds	r7, #40	; 0x28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08c      	sub	sp, #48	; 0x30
 8004bfc:	af04      	add	r7, sp, #16
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	4613      	mov	r3, r2
 8004c06:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c08:	88fb      	ldrh	r3, [r7, #6]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f001 fc9d 	bl	800654c <pvPortMalloc>
 8004c12:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00e      	beq.n	8004c38 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004c1a:	205c      	movs	r0, #92	; 0x5c
 8004c1c:	f001 fc96 	bl	800654c <pvPortMalloc>
 8004c20:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	631a      	str	r2, [r3, #48]	; 0x30
 8004c2e:	e005      	b.n	8004c3c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c30:	6978      	ldr	r0, [r7, #20]
 8004c32:	f001 fd4f 	bl	80066d4 <vPortFree>
 8004c36:	e001      	b.n	8004c3c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d017      	beq.n	8004c72 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c4a:	88fa      	ldrh	r2, [r7, #6]
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	9303      	str	r3, [sp, #12]
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	9302      	str	r3, [sp, #8]
 8004c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c56:	9301      	str	r3, [sp, #4]
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	68b9      	ldr	r1, [r7, #8]
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f80e 	bl	8004c82 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c66:	69f8      	ldr	r0, [r7, #28]
 8004c68:	f000 f892 	bl	8004d90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	61bb      	str	r3, [r7, #24]
 8004c70:	e002      	b.n	8004c78 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c72:	f04f 33ff 	mov.w	r3, #4294967295
 8004c76:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c78:	69bb      	ldr	r3, [r7, #24]
	}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3720      	adds	r7, #32
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b088      	sub	sp, #32
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	60f8      	str	r0, [r7, #12]
 8004c8a:	60b9      	str	r1, [r7, #8]
 8004c8c:	607a      	str	r2, [r7, #4]
 8004c8e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c92:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	461a      	mov	r2, r3
 8004c9a:	21a5      	movs	r1, #165	; 0xa5
 8004c9c:	f001 fe60 	bl	8006960 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004caa:	3b01      	subs	r3, #1
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	f023 0307 	bic.w	r3, r3, #7
 8004cb8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <prvInitialiseNewTask+0x58>
	__asm volatile
 8004cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc8:	f383 8811 	msr	BASEPRI, r3
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	617b      	str	r3, [r7, #20]
}
 8004cd6:	bf00      	nop
 8004cd8:	e7fe      	b.n	8004cd8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cda:	2300      	movs	r3, #0
 8004cdc:	61fb      	str	r3, [r7, #28]
 8004cde:	e012      	b.n	8004d06 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	7819      	ldrb	r1, [r3, #0]
 8004ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	4413      	add	r3, r2
 8004cee:	3334      	adds	r3, #52	; 0x34
 8004cf0:	460a      	mov	r2, r1
 8004cf2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d006      	beq.n	8004d0e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	3301      	adds	r3, #1
 8004d04:	61fb      	str	r3, [r7, #28]
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	2b0f      	cmp	r3, #15
 8004d0a:	d9e9      	bls.n	8004ce0 <prvInitialiseNewTask+0x5e>
 8004d0c:	e000      	b.n	8004d10 <prvInitialiseNewTask+0x8e>
		{
			break;
 8004d0e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1a:	2b37      	cmp	r3, #55	; 0x37
 8004d1c:	d901      	bls.n	8004d22 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d1e:	2337      	movs	r3, #55	; 0x37
 8004d20:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d26:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d2c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	2200      	movs	r2, #0
 8004d32:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d36:	3304      	adds	r3, #4
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7fe fe66 	bl	8003a0a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d40:	3318      	adds	r3, #24
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fe fe61 	bl	8003a0a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d50:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d5c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	2200      	movs	r2, #0
 8004d62:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	68f9      	ldr	r1, [r7, #12]
 8004d70:	69b8      	ldr	r0, [r7, #24]
 8004d72:	f001 f9f7 	bl	8006164 <pxPortInitialiseStack>
 8004d76:	4602      	mov	r2, r0
 8004d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d88:	bf00      	nop
 8004d8a:	3720      	adds	r7, #32
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d98:	f001 fad8 	bl	800634c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d9c:	4b2d      	ldr	r3, [pc, #180]	; (8004e54 <prvAddNewTaskToReadyList+0xc4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3301      	adds	r3, #1
 8004da2:	4a2c      	ldr	r2, [pc, #176]	; (8004e54 <prvAddNewTaskToReadyList+0xc4>)
 8004da4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004da6:	4b2c      	ldr	r3, [pc, #176]	; (8004e58 <prvAddNewTaskToReadyList+0xc8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d109      	bne.n	8004dc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004dae:	4a2a      	ldr	r2, [pc, #168]	; (8004e58 <prvAddNewTaskToReadyList+0xc8>)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004db4:	4b27      	ldr	r3, [pc, #156]	; (8004e54 <prvAddNewTaskToReadyList+0xc4>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d110      	bne.n	8004dde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004dbc:	f000 fc16 	bl	80055ec <prvInitialiseTaskLists>
 8004dc0:	e00d      	b.n	8004dde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004dc2:	4b26      	ldr	r3, [pc, #152]	; (8004e5c <prvAddNewTaskToReadyList+0xcc>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d109      	bne.n	8004dde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004dca:	4b23      	ldr	r3, [pc, #140]	; (8004e58 <prvAddNewTaskToReadyList+0xc8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d802      	bhi.n	8004dde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004dd8:	4a1f      	ldr	r2, [pc, #124]	; (8004e58 <prvAddNewTaskToReadyList+0xc8>)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004dde:	4b20      	ldr	r3, [pc, #128]	; (8004e60 <prvAddNewTaskToReadyList+0xd0>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3301      	adds	r3, #1
 8004de4:	4a1e      	ldr	r2, [pc, #120]	; (8004e60 <prvAddNewTaskToReadyList+0xd0>)
 8004de6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004de8:	4b1d      	ldr	r3, [pc, #116]	; (8004e60 <prvAddNewTaskToReadyList+0xd0>)
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df4:	4b1b      	ldr	r3, [pc, #108]	; (8004e64 <prvAddNewTaskToReadyList+0xd4>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d903      	bls.n	8004e04 <prvAddNewTaskToReadyList+0x74>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e00:	4a18      	ldr	r2, [pc, #96]	; (8004e64 <prvAddNewTaskToReadyList+0xd4>)
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e08:	4613      	mov	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4a15      	ldr	r2, [pc, #84]	; (8004e68 <prvAddNewTaskToReadyList+0xd8>)
 8004e12:	441a      	add	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3304      	adds	r3, #4
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4610      	mov	r0, r2
 8004e1c:	f7fe fe01 	bl	8003a22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e20:	f001 fac4 	bl	80063ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e24:	4b0d      	ldr	r3, [pc, #52]	; (8004e5c <prvAddNewTaskToReadyList+0xcc>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00e      	beq.n	8004e4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e2c:	4b0a      	ldr	r3, [pc, #40]	; (8004e58 <prvAddNewTaskToReadyList+0xc8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d207      	bcs.n	8004e4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e3a:	4b0c      	ldr	r3, [pc, #48]	; (8004e6c <prvAddNewTaskToReadyList+0xdc>)
 8004e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e4a:	bf00      	nop
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	200023b8 	.word	0x200023b8
 8004e58:	20001ee4 	.word	0x20001ee4
 8004e5c:	200023c4 	.word	0x200023c4
 8004e60:	200023d4 	.word	0x200023d4
 8004e64:	200023c0 	.word	0x200023c0
 8004e68:	20001ee8 	.word	0x20001ee8
 8004e6c:	e000ed04 	.word	0xe000ed04

08004e70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d017      	beq.n	8004eb2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e82:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <vTaskDelay+0x60>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <vTaskDelay+0x30>
	__asm volatile
 8004e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8e:	f383 8811 	msr	BASEPRI, r3
 8004e92:	f3bf 8f6f 	isb	sy
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	60bb      	str	r3, [r7, #8]
}
 8004e9c:	bf00      	nop
 8004e9e:	e7fe      	b.n	8004e9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ea0:	f000 f880 	bl	8004fa4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fdf6 	bl	8005a98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004eac:	f000 f888 	bl	8004fc0 <xTaskResumeAll>
 8004eb0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d107      	bne.n	8004ec8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004eb8:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <vTaskDelay+0x64>)
 8004eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ec8:	bf00      	nop
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	200023e0 	.word	0x200023e0
 8004ed4:	e000ed04 	.word	0xe000ed04

08004ed8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08a      	sub	sp, #40	; 0x28
 8004edc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ee6:	463a      	mov	r2, r7
 8004ee8:	1d39      	adds	r1, r7, #4
 8004eea:	f107 0308 	add.w	r3, r7, #8
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fe fd3a 	bl	8003968 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ef4:	6839      	ldr	r1, [r7, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	9202      	str	r2, [sp, #8]
 8004efc:	9301      	str	r3, [sp, #4]
 8004efe:	2300      	movs	r3, #0
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	2300      	movs	r3, #0
 8004f04:	460a      	mov	r2, r1
 8004f06:	4921      	ldr	r1, [pc, #132]	; (8004f8c <vTaskStartScheduler+0xb4>)
 8004f08:	4821      	ldr	r0, [pc, #132]	; (8004f90 <vTaskStartScheduler+0xb8>)
 8004f0a:	f7ff fe19 	bl	8004b40 <xTaskCreateStatic>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4a20      	ldr	r2, [pc, #128]	; (8004f94 <vTaskStartScheduler+0xbc>)
 8004f12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f14:	4b1f      	ldr	r3, [pc, #124]	; (8004f94 <vTaskStartScheduler+0xbc>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	e001      	b.n	8004f26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d102      	bne.n	8004f32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f2c:	f000 fe08 	bl	8005b40 <xTimerCreateTimerTask>
 8004f30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d116      	bne.n	8004f66 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3c:	f383 8811 	msr	BASEPRI, r3
 8004f40:	f3bf 8f6f 	isb	sy
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	613b      	str	r3, [r7, #16]
}
 8004f4a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f4c:	4b12      	ldr	r3, [pc, #72]	; (8004f98 <vTaskStartScheduler+0xc0>)
 8004f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f52:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f54:	4b11      	ldr	r3, [pc, #68]	; (8004f9c <vTaskStartScheduler+0xc4>)
 8004f56:	2201      	movs	r2, #1
 8004f58:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004f5a:	4b11      	ldr	r3, [pc, #68]	; (8004fa0 <vTaskStartScheduler+0xc8>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f60:	f001 f982 	bl	8006268 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f64:	e00e      	b.n	8004f84 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6c:	d10a      	bne.n	8004f84 <vTaskStartScheduler+0xac>
	__asm volatile
 8004f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	60fb      	str	r3, [r7, #12]
}
 8004f80:	bf00      	nop
 8004f82:	e7fe      	b.n	8004f82 <vTaskStartScheduler+0xaa>
}
 8004f84:	bf00      	nop
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	08006a4c 	.word	0x08006a4c
 8004f90:	080055bd 	.word	0x080055bd
 8004f94:	200023dc 	.word	0x200023dc
 8004f98:	200023d8 	.word	0x200023d8
 8004f9c:	200023c4 	.word	0x200023c4
 8004fa0:	200023bc 	.word	0x200023bc

08004fa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004fa8:	4b04      	ldr	r3, [pc, #16]	; (8004fbc <vTaskSuspendAll+0x18>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3301      	adds	r3, #1
 8004fae:	4a03      	ldr	r2, [pc, #12]	; (8004fbc <vTaskSuspendAll+0x18>)
 8004fb0:	6013      	str	r3, [r2, #0]
}
 8004fb2:	bf00      	nop
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bc80      	pop	{r7}
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	200023e0 	.word	0x200023e0

08004fc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004fce:	4b42      	ldr	r3, [pc, #264]	; (80050d8 <xTaskResumeAll+0x118>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10a      	bne.n	8004fec <xTaskResumeAll+0x2c>
	__asm volatile
 8004fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	603b      	str	r3, [r7, #0]
}
 8004fe8:	bf00      	nop
 8004fea:	e7fe      	b.n	8004fea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004fec:	f001 f9ae 	bl	800634c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ff0:	4b39      	ldr	r3, [pc, #228]	; (80050d8 <xTaskResumeAll+0x118>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	4a38      	ldr	r2, [pc, #224]	; (80050d8 <xTaskResumeAll+0x118>)
 8004ff8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ffa:	4b37      	ldr	r3, [pc, #220]	; (80050d8 <xTaskResumeAll+0x118>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d162      	bne.n	80050c8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005002:	4b36      	ldr	r3, [pc, #216]	; (80050dc <xTaskResumeAll+0x11c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d05e      	beq.n	80050c8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800500a:	e02f      	b.n	800506c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800500c:	4b34      	ldr	r3, [pc, #208]	; (80050e0 <xTaskResumeAll+0x120>)
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	3318      	adds	r3, #24
 8005018:	4618      	mov	r0, r3
 800501a:	f7fe fd5d 	bl	8003ad8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	3304      	adds	r3, #4
 8005022:	4618      	mov	r0, r3
 8005024:	f7fe fd58 	bl	8003ad8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800502c:	4b2d      	ldr	r3, [pc, #180]	; (80050e4 <xTaskResumeAll+0x124>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	429a      	cmp	r2, r3
 8005032:	d903      	bls.n	800503c <xTaskResumeAll+0x7c>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005038:	4a2a      	ldr	r2, [pc, #168]	; (80050e4 <xTaskResumeAll+0x124>)
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005040:	4613      	mov	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4a27      	ldr	r2, [pc, #156]	; (80050e8 <xTaskResumeAll+0x128>)
 800504a:	441a      	add	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	3304      	adds	r3, #4
 8005050:	4619      	mov	r1, r3
 8005052:	4610      	mov	r0, r2
 8005054:	f7fe fce5 	bl	8003a22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505c:	4b23      	ldr	r3, [pc, #140]	; (80050ec <xTaskResumeAll+0x12c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	429a      	cmp	r2, r3
 8005064:	d302      	bcc.n	800506c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005066:	4b22      	ldr	r3, [pc, #136]	; (80050f0 <xTaskResumeAll+0x130>)
 8005068:	2201      	movs	r2, #1
 800506a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800506c:	4b1c      	ldr	r3, [pc, #112]	; (80050e0 <xTaskResumeAll+0x120>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1cb      	bne.n	800500c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800507a:	f000 fb55 	bl	8005728 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800507e:	4b1d      	ldr	r3, [pc, #116]	; (80050f4 <xTaskResumeAll+0x134>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d010      	beq.n	80050ac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800508a:	f000 f845 	bl	8005118 <xTaskIncrementTick>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005094:	4b16      	ldr	r3, [pc, #88]	; (80050f0 <xTaskResumeAll+0x130>)
 8005096:	2201      	movs	r2, #1
 8005098:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3b01      	subs	r3, #1
 800509e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1f1      	bne.n	800508a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80050a6:	4b13      	ldr	r3, [pc, #76]	; (80050f4 <xTaskResumeAll+0x134>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050ac:	4b10      	ldr	r3, [pc, #64]	; (80050f0 <xTaskResumeAll+0x130>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d009      	beq.n	80050c8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050b4:	2301      	movs	r3, #1
 80050b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050b8:	4b0f      	ldr	r3, [pc, #60]	; (80050f8 <xTaskResumeAll+0x138>)
 80050ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050c8:	f001 f970 	bl	80063ac <vPortExitCritical>

	return xAlreadyYielded;
 80050cc:	68bb      	ldr	r3, [r7, #8]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	200023e0 	.word	0x200023e0
 80050dc:	200023b8 	.word	0x200023b8
 80050e0:	20002378 	.word	0x20002378
 80050e4:	200023c0 	.word	0x200023c0
 80050e8:	20001ee8 	.word	0x20001ee8
 80050ec:	20001ee4 	.word	0x20001ee4
 80050f0:	200023cc 	.word	0x200023cc
 80050f4:	200023c8 	.word	0x200023c8
 80050f8:	e000ed04 	.word	0xe000ed04

080050fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005102:	4b04      	ldr	r3, [pc, #16]	; (8005114 <xTaskGetTickCount+0x18>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005108:	687b      	ldr	r3, [r7, #4]
}
 800510a:	4618      	mov	r0, r3
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr
 8005114:	200023bc 	.word	0x200023bc

08005118 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800511e:	2300      	movs	r3, #0
 8005120:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005122:	4b51      	ldr	r3, [pc, #324]	; (8005268 <xTaskIncrementTick+0x150>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	f040 808e 	bne.w	8005248 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800512c:	4b4f      	ldr	r3, [pc, #316]	; (800526c <xTaskIncrementTick+0x154>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3301      	adds	r3, #1
 8005132:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005134:	4a4d      	ldr	r2, [pc, #308]	; (800526c <xTaskIncrementTick+0x154>)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d120      	bne.n	8005182 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005140:	4b4b      	ldr	r3, [pc, #300]	; (8005270 <xTaskIncrementTick+0x158>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <xTaskIncrementTick+0x48>
	__asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	603b      	str	r3, [r7, #0]
}
 800515c:	bf00      	nop
 800515e:	e7fe      	b.n	800515e <xTaskIncrementTick+0x46>
 8005160:	4b43      	ldr	r3, [pc, #268]	; (8005270 <xTaskIncrementTick+0x158>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	4b43      	ldr	r3, [pc, #268]	; (8005274 <xTaskIncrementTick+0x15c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a41      	ldr	r2, [pc, #260]	; (8005270 <xTaskIncrementTick+0x158>)
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	4a41      	ldr	r2, [pc, #260]	; (8005274 <xTaskIncrementTick+0x15c>)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	4b40      	ldr	r3, [pc, #256]	; (8005278 <xTaskIncrementTick+0x160>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	3301      	adds	r3, #1
 800517a:	4a3f      	ldr	r2, [pc, #252]	; (8005278 <xTaskIncrementTick+0x160>)
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	f000 fad3 	bl	8005728 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005182:	4b3e      	ldr	r3, [pc, #248]	; (800527c <xTaskIncrementTick+0x164>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	429a      	cmp	r2, r3
 800518a:	d34e      	bcc.n	800522a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800518c:	4b38      	ldr	r3, [pc, #224]	; (8005270 <xTaskIncrementTick+0x158>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <xTaskIncrementTick+0x82>
 8005196:	2301      	movs	r3, #1
 8005198:	e000      	b.n	800519c <xTaskIncrementTick+0x84>
 800519a:	2300      	movs	r3, #0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d004      	beq.n	80051aa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051a0:	4b36      	ldr	r3, [pc, #216]	; (800527c <xTaskIncrementTick+0x164>)
 80051a2:	f04f 32ff 	mov.w	r2, #4294967295
 80051a6:	601a      	str	r2, [r3, #0]
					break;
 80051a8:	e03f      	b.n	800522a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80051aa:	4b31      	ldr	r3, [pc, #196]	; (8005270 <xTaskIncrementTick+0x158>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d203      	bcs.n	80051ca <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051c2:	4a2e      	ldr	r2, [pc, #184]	; (800527c <xTaskIncrementTick+0x164>)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6013      	str	r3, [r2, #0]
						break;
 80051c8:	e02f      	b.n	800522a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	3304      	adds	r3, #4
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fe fc82 	bl	8003ad8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d004      	beq.n	80051e6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	3318      	adds	r3, #24
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fe fc79 	bl	8003ad8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ea:	4b25      	ldr	r3, [pc, #148]	; (8005280 <xTaskIncrementTick+0x168>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d903      	bls.n	80051fa <xTaskIncrementTick+0xe2>
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f6:	4a22      	ldr	r2, [pc, #136]	; (8005280 <xTaskIncrementTick+0x168>)
 80051f8:	6013      	str	r3, [r2, #0]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051fe:	4613      	mov	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4a1f      	ldr	r2, [pc, #124]	; (8005284 <xTaskIncrementTick+0x16c>)
 8005208:	441a      	add	r2, r3
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	3304      	adds	r3, #4
 800520e:	4619      	mov	r1, r3
 8005210:	4610      	mov	r0, r2
 8005212:	f7fe fc06 	bl	8003a22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800521a:	4b1b      	ldr	r3, [pc, #108]	; (8005288 <xTaskIncrementTick+0x170>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005220:	429a      	cmp	r2, r3
 8005222:	d3b3      	bcc.n	800518c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005224:	2301      	movs	r3, #1
 8005226:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005228:	e7b0      	b.n	800518c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800522a:	4b17      	ldr	r3, [pc, #92]	; (8005288 <xTaskIncrementTick+0x170>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005230:	4914      	ldr	r1, [pc, #80]	; (8005284 <xTaskIncrementTick+0x16c>)
 8005232:	4613      	mov	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	440b      	add	r3, r1
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d907      	bls.n	8005252 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005242:	2301      	movs	r3, #1
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	e004      	b.n	8005252 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005248:	4b10      	ldr	r3, [pc, #64]	; (800528c <xTaskIncrementTick+0x174>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3301      	adds	r3, #1
 800524e:	4a0f      	ldr	r2, [pc, #60]	; (800528c <xTaskIncrementTick+0x174>)
 8005250:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005252:	4b0f      	ldr	r3, [pc, #60]	; (8005290 <xTaskIncrementTick+0x178>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800525a:	2301      	movs	r3, #1
 800525c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800525e:	697b      	ldr	r3, [r7, #20]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3718      	adds	r7, #24
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	200023e0 	.word	0x200023e0
 800526c:	200023bc 	.word	0x200023bc
 8005270:	20002370 	.word	0x20002370
 8005274:	20002374 	.word	0x20002374
 8005278:	200023d0 	.word	0x200023d0
 800527c:	200023d8 	.word	0x200023d8
 8005280:	200023c0 	.word	0x200023c0
 8005284:	20001ee8 	.word	0x20001ee8
 8005288:	20001ee4 	.word	0x20001ee4
 800528c:	200023c8 	.word	0x200023c8
 8005290:	200023cc 	.word	0x200023cc

08005294 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800529a:	4b27      	ldr	r3, [pc, #156]	; (8005338 <vTaskSwitchContext+0xa4>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80052a2:	4b26      	ldr	r3, [pc, #152]	; (800533c <vTaskSwitchContext+0xa8>)
 80052a4:	2201      	movs	r2, #1
 80052a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80052a8:	e041      	b.n	800532e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80052aa:	4b24      	ldr	r3, [pc, #144]	; (800533c <vTaskSwitchContext+0xa8>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80052b0:	4b23      	ldr	r3, [pc, #140]	; (8005340 <vTaskSwitchContext+0xac>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	e010      	b.n	80052da <vTaskSwitchContext+0x46>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10a      	bne.n	80052d4 <vTaskSwitchContext+0x40>
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	607b      	str	r3, [r7, #4]
}
 80052d0:	bf00      	nop
 80052d2:	e7fe      	b.n	80052d2 <vTaskSwitchContext+0x3e>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	3b01      	subs	r3, #1
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	491a      	ldr	r1, [pc, #104]	; (8005344 <vTaskSwitchContext+0xb0>)
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	440b      	add	r3, r1
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0e4      	beq.n	80052b8 <vTaskSwitchContext+0x24>
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4613      	mov	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4a12      	ldr	r2, [pc, #72]	; (8005344 <vTaskSwitchContext+0xb0>)
 80052fa:	4413      	add	r3, r2
 80052fc:	60bb      	str	r3, [r7, #8]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	605a      	str	r2, [r3, #4]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	3308      	adds	r3, #8
 8005310:	429a      	cmp	r2, r3
 8005312:	d104      	bne.n	800531e <vTaskSwitchContext+0x8a>
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	605a      	str	r2, [r3, #4]
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	4a08      	ldr	r2, [pc, #32]	; (8005348 <vTaskSwitchContext+0xb4>)
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	4a05      	ldr	r2, [pc, #20]	; (8005340 <vTaskSwitchContext+0xac>)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6013      	str	r3, [r2, #0]
}
 800532e:	bf00      	nop
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	bc80      	pop	{r7}
 8005336:	4770      	bx	lr
 8005338:	200023e0 	.word	0x200023e0
 800533c:	200023cc 	.word	0x200023cc
 8005340:	200023c0 	.word	0x200023c0
 8005344:	20001ee8 	.word	0x20001ee8
 8005348:	20001ee4 	.word	0x20001ee4

0800534c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10a      	bne.n	8005372 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800535c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	60fb      	str	r3, [r7, #12]
}
 800536e:	bf00      	nop
 8005370:	e7fe      	b.n	8005370 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005372:	4b07      	ldr	r3, [pc, #28]	; (8005390 <vTaskPlaceOnEventList+0x44>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3318      	adds	r3, #24
 8005378:	4619      	mov	r1, r3
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7fe fb74 	bl	8003a68 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005380:	2101      	movs	r1, #1
 8005382:	6838      	ldr	r0, [r7, #0]
 8005384:	f000 fb88 	bl	8005a98 <prvAddCurrentTaskToDelayedList>
}
 8005388:	bf00      	nop
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	20001ee4 	.word	0x20001ee4

08005394 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10a      	bne.n	80053bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	617b      	str	r3, [r7, #20]
}
 80053b8:	bf00      	nop
 80053ba:	e7fe      	b.n	80053ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053bc:	4b0a      	ldr	r3, [pc, #40]	; (80053e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3318      	adds	r3, #24
 80053c2:	4619      	mov	r1, r3
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f7fe fb2c 	bl	8003a22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80053d0:	f04f 33ff 	mov.w	r3, #4294967295
 80053d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80053d6:	6879      	ldr	r1, [r7, #4]
 80053d8:	68b8      	ldr	r0, [r7, #8]
 80053da:	f000 fb5d 	bl	8005a98 <prvAddCurrentTaskToDelayedList>
	}
 80053de:	bf00      	nop
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20001ee4 	.word	0x20001ee4

080053ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10a      	bne.n	8005418 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	60fb      	str	r3, [r7, #12]
}
 8005414:	bf00      	nop
 8005416:	e7fe      	b.n	8005416 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	3318      	adds	r3, #24
 800541c:	4618      	mov	r0, r3
 800541e:	f7fe fb5b 	bl	8003ad8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005422:	4b1e      	ldr	r3, [pc, #120]	; (800549c <xTaskRemoveFromEventList+0xb0>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d11d      	bne.n	8005466 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	3304      	adds	r3, #4
 800542e:	4618      	mov	r0, r3
 8005430:	f7fe fb52 	bl	8003ad8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005438:	4b19      	ldr	r3, [pc, #100]	; (80054a0 <xTaskRemoveFromEventList+0xb4>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d903      	bls.n	8005448 <xTaskRemoveFromEventList+0x5c>
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005444:	4a16      	ldr	r2, [pc, #88]	; (80054a0 <xTaskRemoveFromEventList+0xb4>)
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544c:	4613      	mov	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4a13      	ldr	r2, [pc, #76]	; (80054a4 <xTaskRemoveFromEventList+0xb8>)
 8005456:	441a      	add	r2, r3
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	3304      	adds	r3, #4
 800545c:	4619      	mov	r1, r3
 800545e:	4610      	mov	r0, r2
 8005460:	f7fe fadf 	bl	8003a22 <vListInsertEnd>
 8005464:	e005      	b.n	8005472 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	3318      	adds	r3, #24
 800546a:	4619      	mov	r1, r3
 800546c:	480e      	ldr	r0, [pc, #56]	; (80054a8 <xTaskRemoveFromEventList+0xbc>)
 800546e:	f7fe fad8 	bl	8003a22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005476:	4b0d      	ldr	r3, [pc, #52]	; (80054ac <xTaskRemoveFromEventList+0xc0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	429a      	cmp	r2, r3
 800547e:	d905      	bls.n	800548c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005480:	2301      	movs	r3, #1
 8005482:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005484:	4b0a      	ldr	r3, [pc, #40]	; (80054b0 <xTaskRemoveFromEventList+0xc4>)
 8005486:	2201      	movs	r2, #1
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	e001      	b.n	8005490 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800548c:	2300      	movs	r3, #0
 800548e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005490:	697b      	ldr	r3, [r7, #20]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	200023e0 	.word	0x200023e0
 80054a0:	200023c0 	.word	0x200023c0
 80054a4:	20001ee8 	.word	0x20001ee8
 80054a8:	20002378 	.word	0x20002378
 80054ac:	20001ee4 	.word	0x20001ee4
 80054b0:	200023cc 	.word	0x200023cc

080054b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80054bc:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <vTaskInternalSetTimeOutState+0x24>)
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80054c4:	4b05      	ldr	r3, [pc, #20]	; (80054dc <vTaskInternalSetTimeOutState+0x28>)
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	605a      	str	r2, [r3, #4]
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bc80      	pop	{r7}
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	200023d0 	.word	0x200023d0
 80054dc:	200023bc 	.word	0x200023bc

080054e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b088      	sub	sp, #32
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10a      	bne.n	8005506 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	613b      	str	r3, [r7, #16]
}
 8005502:	bf00      	nop
 8005504:	e7fe      	b.n	8005504 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10a      	bne.n	8005522 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800550c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	60fb      	str	r3, [r7, #12]
}
 800551e:	bf00      	nop
 8005520:	e7fe      	b.n	8005520 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005522:	f000 ff13 	bl	800634c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005526:	4b1d      	ldr	r3, [pc, #116]	; (800559c <xTaskCheckForTimeOut+0xbc>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553e:	d102      	bne.n	8005546 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005540:	2300      	movs	r3, #0
 8005542:	61fb      	str	r3, [r7, #28]
 8005544:	e023      	b.n	800558e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	4b15      	ldr	r3, [pc, #84]	; (80055a0 <xTaskCheckForTimeOut+0xc0>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	d007      	beq.n	8005562 <xTaskCheckForTimeOut+0x82>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	429a      	cmp	r2, r3
 800555a:	d302      	bcc.n	8005562 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800555c:	2301      	movs	r3, #1
 800555e:	61fb      	str	r3, [r7, #28]
 8005560:	e015      	b.n	800558e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	429a      	cmp	r2, r3
 800556a:	d20b      	bcs.n	8005584 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	1ad2      	subs	r2, r2, r3
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7ff ff9b 	bl	80054b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800557e:	2300      	movs	r3, #0
 8005580:	61fb      	str	r3, [r7, #28]
 8005582:	e004      	b.n	800558e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2200      	movs	r2, #0
 8005588:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800558a:	2301      	movs	r3, #1
 800558c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800558e:	f000 ff0d 	bl	80063ac <vPortExitCritical>

	return xReturn;
 8005592:	69fb      	ldr	r3, [r7, #28]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3720      	adds	r7, #32
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	200023bc 	.word	0x200023bc
 80055a0:	200023d0 	.word	0x200023d0

080055a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80055a4:	b480      	push	{r7}
 80055a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80055a8:	4b03      	ldr	r3, [pc, #12]	; (80055b8 <vTaskMissedYield+0x14>)
 80055aa:	2201      	movs	r2, #1
 80055ac:	601a      	str	r2, [r3, #0]
}
 80055ae:	bf00      	nop
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bc80      	pop	{r7}
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	200023cc 	.word	0x200023cc

080055bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80055c4:	f000 f852 	bl	800566c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80055c8:	4b06      	ldr	r3, [pc, #24]	; (80055e4 <prvIdleTask+0x28>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d9f9      	bls.n	80055c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80055d0:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <prvIdleTask+0x2c>)
 80055d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80055e0:	e7f0      	b.n	80055c4 <prvIdleTask+0x8>
 80055e2:	bf00      	nop
 80055e4:	20001ee8 	.word	0x20001ee8
 80055e8:	e000ed04 	.word	0xe000ed04

080055ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055f2:	2300      	movs	r3, #0
 80055f4:	607b      	str	r3, [r7, #4]
 80055f6:	e00c      	b.n	8005612 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	4613      	mov	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4a12      	ldr	r2, [pc, #72]	; (800564c <prvInitialiseTaskLists+0x60>)
 8005604:	4413      	add	r3, r2
 8005606:	4618      	mov	r0, r3
 8005608:	f7fe f9e0 	bl	80039cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3301      	adds	r3, #1
 8005610:	607b      	str	r3, [r7, #4]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b37      	cmp	r3, #55	; 0x37
 8005616:	d9ef      	bls.n	80055f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005618:	480d      	ldr	r0, [pc, #52]	; (8005650 <prvInitialiseTaskLists+0x64>)
 800561a:	f7fe f9d7 	bl	80039cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800561e:	480d      	ldr	r0, [pc, #52]	; (8005654 <prvInitialiseTaskLists+0x68>)
 8005620:	f7fe f9d4 	bl	80039cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005624:	480c      	ldr	r0, [pc, #48]	; (8005658 <prvInitialiseTaskLists+0x6c>)
 8005626:	f7fe f9d1 	bl	80039cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800562a:	480c      	ldr	r0, [pc, #48]	; (800565c <prvInitialiseTaskLists+0x70>)
 800562c:	f7fe f9ce 	bl	80039cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005630:	480b      	ldr	r0, [pc, #44]	; (8005660 <prvInitialiseTaskLists+0x74>)
 8005632:	f7fe f9cb 	bl	80039cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005636:	4b0b      	ldr	r3, [pc, #44]	; (8005664 <prvInitialiseTaskLists+0x78>)
 8005638:	4a05      	ldr	r2, [pc, #20]	; (8005650 <prvInitialiseTaskLists+0x64>)
 800563a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800563c:	4b0a      	ldr	r3, [pc, #40]	; (8005668 <prvInitialiseTaskLists+0x7c>)
 800563e:	4a05      	ldr	r2, [pc, #20]	; (8005654 <prvInitialiseTaskLists+0x68>)
 8005640:	601a      	str	r2, [r3, #0]
}
 8005642:	bf00      	nop
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	20001ee8 	.word	0x20001ee8
 8005650:	20002348 	.word	0x20002348
 8005654:	2000235c 	.word	0x2000235c
 8005658:	20002378 	.word	0x20002378
 800565c:	2000238c 	.word	0x2000238c
 8005660:	200023a4 	.word	0x200023a4
 8005664:	20002370 	.word	0x20002370
 8005668:	20002374 	.word	0x20002374

0800566c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005672:	e019      	b.n	80056a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005674:	f000 fe6a 	bl	800634c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005678:	4b10      	ldr	r3, [pc, #64]	; (80056bc <prvCheckTasksWaitingTermination+0x50>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3304      	adds	r3, #4
 8005684:	4618      	mov	r0, r3
 8005686:	f7fe fa27 	bl	8003ad8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800568a:	4b0d      	ldr	r3, [pc, #52]	; (80056c0 <prvCheckTasksWaitingTermination+0x54>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3b01      	subs	r3, #1
 8005690:	4a0b      	ldr	r2, [pc, #44]	; (80056c0 <prvCheckTasksWaitingTermination+0x54>)
 8005692:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005694:	4b0b      	ldr	r3, [pc, #44]	; (80056c4 <prvCheckTasksWaitingTermination+0x58>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3b01      	subs	r3, #1
 800569a:	4a0a      	ldr	r2, [pc, #40]	; (80056c4 <prvCheckTasksWaitingTermination+0x58>)
 800569c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800569e:	f000 fe85 	bl	80063ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f810 	bl	80056c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056a8:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <prvCheckTasksWaitingTermination+0x58>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1e1      	bne.n	8005674 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80056b0:	bf00      	nop
 80056b2:	bf00      	nop
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	2000238c 	.word	0x2000238c
 80056c0:	200023b8 	.word	0x200023b8
 80056c4:	200023a0 	.word	0x200023a0

080056c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d108      	bne.n	80056ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 fff8 	bl	80066d4 <vPortFree>
				vPortFree( pxTCB );
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fff5 	bl	80066d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80056ea:	e018      	b.n	800571e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d103      	bne.n	80056fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 ffec 	bl	80066d4 <vPortFree>
	}
 80056fc:	e00f      	b.n	800571e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005704:	2b02      	cmp	r3, #2
 8005706:	d00a      	beq.n	800571e <prvDeleteTCB+0x56>
	__asm volatile
 8005708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	60fb      	str	r3, [r7, #12]
}
 800571a:	bf00      	nop
 800571c:	e7fe      	b.n	800571c <prvDeleteTCB+0x54>
	}
 800571e:	bf00      	nop
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800572e:	4b0e      	ldr	r3, [pc, #56]	; (8005768 <prvResetNextTaskUnblockTime+0x40>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <prvResetNextTaskUnblockTime+0x14>
 8005738:	2301      	movs	r3, #1
 800573a:	e000      	b.n	800573e <prvResetNextTaskUnblockTime+0x16>
 800573c:	2300      	movs	r3, #0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d004      	beq.n	800574c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005742:	4b0a      	ldr	r3, [pc, #40]	; (800576c <prvResetNextTaskUnblockTime+0x44>)
 8005744:	f04f 32ff 	mov.w	r2, #4294967295
 8005748:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800574a:	e008      	b.n	800575e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800574c:	4b06      	ldr	r3, [pc, #24]	; (8005768 <prvResetNextTaskUnblockTime+0x40>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	4a04      	ldr	r2, [pc, #16]	; (800576c <prvResetNextTaskUnblockTime+0x44>)
 800575c:	6013      	str	r3, [r2, #0]
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	bc80      	pop	{r7}
 8005766:	4770      	bx	lr
 8005768:	20002370 	.word	0x20002370
 800576c:	200023d8 	.word	0x200023d8

08005770 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005776:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <xTaskGetSchedulerState+0x34>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d102      	bne.n	8005784 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800577e:	2301      	movs	r3, #1
 8005780:	607b      	str	r3, [r7, #4]
 8005782:	e008      	b.n	8005796 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005784:	4b08      	ldr	r3, [pc, #32]	; (80057a8 <xTaskGetSchedulerState+0x38>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d102      	bne.n	8005792 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800578c:	2302      	movs	r3, #2
 800578e:	607b      	str	r3, [r7, #4]
 8005790:	e001      	b.n	8005796 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005792:	2300      	movs	r3, #0
 8005794:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005796:	687b      	ldr	r3, [r7, #4]
	}
 8005798:	4618      	mov	r0, r3
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	bc80      	pop	{r7}
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	200023c4 	.word	0x200023c4
 80057a8:	200023e0 	.word	0x200023e0

080057ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d056      	beq.n	8005870 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c6:	4b2d      	ldr	r3, [pc, #180]	; (800587c <xTaskPriorityInherit+0xd0>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d246      	bcs.n	800585e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	db06      	blt.n	80057e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057d8:	4b28      	ldr	r3, [pc, #160]	; (800587c <xTaskPriorityInherit+0xd0>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	6959      	ldr	r1, [r3, #20]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ee:	4613      	mov	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4a22      	ldr	r2, [pc, #136]	; (8005880 <xTaskPriorityInherit+0xd4>)
 80057f8:	4413      	add	r3, r2
 80057fa:	4299      	cmp	r1, r3
 80057fc:	d101      	bne.n	8005802 <xTaskPriorityInherit+0x56>
 80057fe:	2301      	movs	r3, #1
 8005800:	e000      	b.n	8005804 <xTaskPriorityInherit+0x58>
 8005802:	2300      	movs	r3, #0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d022      	beq.n	800584e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	3304      	adds	r3, #4
 800580c:	4618      	mov	r0, r3
 800580e:	f7fe f963 	bl	8003ad8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005812:	4b1a      	ldr	r3, [pc, #104]	; (800587c <xTaskPriorityInherit+0xd0>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005820:	4b18      	ldr	r3, [pc, #96]	; (8005884 <xTaskPriorityInherit+0xd8>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	429a      	cmp	r2, r3
 8005826:	d903      	bls.n	8005830 <xTaskPriorityInherit+0x84>
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	4a15      	ldr	r2, [pc, #84]	; (8005884 <xTaskPriorityInherit+0xd8>)
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005834:	4613      	mov	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4a10      	ldr	r2, [pc, #64]	; (8005880 <xTaskPriorityInherit+0xd4>)
 800583e:	441a      	add	r2, r3
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	3304      	adds	r3, #4
 8005844:	4619      	mov	r1, r3
 8005846:	4610      	mov	r0, r2
 8005848:	f7fe f8eb 	bl	8003a22 <vListInsertEnd>
 800584c:	e004      	b.n	8005858 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800584e:	4b0b      	ldr	r3, [pc, #44]	; (800587c <xTaskPriorityInherit+0xd0>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005858:	2301      	movs	r3, #1
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	e008      	b.n	8005870 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005862:	4b06      	ldr	r3, [pc, #24]	; (800587c <xTaskPriorityInherit+0xd0>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005868:	429a      	cmp	r2, r3
 800586a:	d201      	bcs.n	8005870 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800586c:	2301      	movs	r3, #1
 800586e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005870:	68fb      	ldr	r3, [r7, #12]
	}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	20001ee4 	.word	0x20001ee4
 8005880:	20001ee8 	.word	0x20001ee8
 8005884:	200023c0 	.word	0x200023c0

08005888 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d056      	beq.n	800594c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800589e:	4b2e      	ldr	r3, [pc, #184]	; (8005958 <xTaskPriorityDisinherit+0xd0>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d00a      	beq.n	80058be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80058a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	f3bf 8f6f 	isb	sy
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	60fb      	str	r3, [r7, #12]
}
 80058ba:	bf00      	nop
 80058bc:	e7fe      	b.n	80058bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10a      	bne.n	80058dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80058c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ca:	f383 8811 	msr	BASEPRI, r3
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	60bb      	str	r3, [r7, #8]
}
 80058d8:	bf00      	nop
 80058da:	e7fe      	b.n	80058da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e0:	1e5a      	subs	r2, r3, #1
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d02c      	beq.n	800594c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d128      	bne.n	800594c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	3304      	adds	r3, #4
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fe f8ea 	bl	8003ad8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005910:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591c:	4b0f      	ldr	r3, [pc, #60]	; (800595c <xTaskPriorityDisinherit+0xd4>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	429a      	cmp	r2, r3
 8005922:	d903      	bls.n	800592c <xTaskPriorityDisinherit+0xa4>
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005928:	4a0c      	ldr	r2, [pc, #48]	; (800595c <xTaskPriorityDisinherit+0xd4>)
 800592a:	6013      	str	r3, [r2, #0]
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005930:	4613      	mov	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4a09      	ldr	r2, [pc, #36]	; (8005960 <xTaskPriorityDisinherit+0xd8>)
 800593a:	441a      	add	r2, r3
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	3304      	adds	r3, #4
 8005940:	4619      	mov	r1, r3
 8005942:	4610      	mov	r0, r2
 8005944:	f7fe f86d 	bl	8003a22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005948:	2301      	movs	r3, #1
 800594a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800594c:	697b      	ldr	r3, [r7, #20]
	}
 800594e:	4618      	mov	r0, r3
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	20001ee4 	.word	0x20001ee4
 800595c:	200023c0 	.word	0x200023c0
 8005960:	20001ee8 	.word	0x20001ee8

08005964 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005964:	b580      	push	{r7, lr}
 8005966:	b088      	sub	sp, #32
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005972:	2301      	movs	r3, #1
 8005974:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d06f      	beq.n	8005a5c <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10a      	bne.n	800599a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	60fb      	str	r3, [r7, #12]
}
 8005996:	bf00      	nop
 8005998:	e7fe      	b.n	8005998 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d902      	bls.n	80059aa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	61fb      	str	r3, [r7, #28]
 80059a8:	e002      	b.n	80059b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	69fa      	ldr	r2, [r7, #28]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d050      	beq.n	8005a5c <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d14b      	bne.n	8005a5c <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80059c4:	4b27      	ldr	r3, [pc, #156]	; (8005a64 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d10a      	bne.n	80059e4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	60bb      	str	r3, [r7, #8]
}
 80059e0:	bf00      	nop
 80059e2:	e7fe      	b.n	80059e2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	69fa      	ldr	r2, [r7, #28]
 80059ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	db04      	blt.n	8005a02 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	6959      	ldr	r1, [r3, #20]
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4a15      	ldr	r2, [pc, #84]	; (8005a68 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005a12:	4413      	add	r3, r2
 8005a14:	4299      	cmp	r1, r3
 8005a16:	d101      	bne.n	8005a1c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e000      	b.n	8005a1e <vTaskPriorityDisinheritAfterTimeout+0xba>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d01c      	beq.n	8005a5c <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	3304      	adds	r3, #4
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fe f856 	bl	8003ad8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a30:	4b0e      	ldr	r3, [pc, #56]	; (8005a6c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d903      	bls.n	8005a40 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	4a0b      	ldr	r2, [pc, #44]	; (8005a6c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005a3e:	6013      	str	r3, [r2, #0]
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a44:	4613      	mov	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4a06      	ldr	r2, [pc, #24]	; (8005a68 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005a4e:	441a      	add	r2, r3
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	3304      	adds	r3, #4
 8005a54:	4619      	mov	r1, r3
 8005a56:	4610      	mov	r0, r2
 8005a58:	f7fd ffe3 	bl	8003a22 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a5c:	bf00      	nop
 8005a5e:	3720      	adds	r7, #32
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	20001ee4 	.word	0x20001ee4
 8005a68:	20001ee8 	.word	0x20001ee8
 8005a6c:	200023c0 	.word	0x200023c0

08005a70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005a74:	4b07      	ldr	r3, [pc, #28]	; (8005a94 <pvTaskIncrementMutexHeldCount+0x24>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d004      	beq.n	8005a86 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005a7c:	4b05      	ldr	r3, [pc, #20]	; (8005a94 <pvTaskIncrementMutexHeldCount+0x24>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a82:	3201      	adds	r2, #1
 8005a84:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005a86:	4b03      	ldr	r3, [pc, #12]	; (8005a94 <pvTaskIncrementMutexHeldCount+0x24>)
 8005a88:	681b      	ldr	r3, [r3, #0]
	}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bc80      	pop	{r7}
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	20001ee4 	.word	0x20001ee4

08005a98 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005aa2:	4b21      	ldr	r3, [pc, #132]	; (8005b28 <prvAddCurrentTaskToDelayedList+0x90>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005aa8:	4b20      	ldr	r3, [pc, #128]	; (8005b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3304      	adds	r3, #4
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fe f812 	bl	8003ad8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aba:	d10a      	bne.n	8005ad2 <prvAddCurrentTaskToDelayedList+0x3a>
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d007      	beq.n	8005ad2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ac2:	4b1a      	ldr	r3, [pc, #104]	; (8005b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4819      	ldr	r0, [pc, #100]	; (8005b30 <prvAddCurrentTaskToDelayedList+0x98>)
 8005acc:	f7fd ffa9 	bl	8003a22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ad0:	e026      	b.n	8005b20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ada:	4b14      	ldr	r3, [pc, #80]	; (8005b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d209      	bcs.n	8005afe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005aea:	4b12      	ldr	r3, [pc, #72]	; (8005b34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	4b0f      	ldr	r3, [pc, #60]	; (8005b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3304      	adds	r3, #4
 8005af4:	4619      	mov	r1, r3
 8005af6:	4610      	mov	r0, r2
 8005af8:	f7fd ffb6 	bl	8003a68 <vListInsert>
}
 8005afc:	e010      	b.n	8005b20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005afe:	4b0e      	ldr	r3, [pc, #56]	; (8005b38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	4b0a      	ldr	r3, [pc, #40]	; (8005b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3304      	adds	r3, #4
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	f7fd ffac 	bl	8003a68 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b10:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d202      	bcs.n	8005b20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b1a:	4a08      	ldr	r2, [pc, #32]	; (8005b3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	6013      	str	r3, [r2, #0]
}
 8005b20:	bf00      	nop
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	200023bc 	.word	0x200023bc
 8005b2c:	20001ee4 	.word	0x20001ee4
 8005b30:	200023a4 	.word	0x200023a4
 8005b34:	20002374 	.word	0x20002374
 8005b38:	20002370 	.word	0x20002370
 8005b3c:	200023d8 	.word	0x200023d8

08005b40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08a      	sub	sp, #40	; 0x28
 8005b44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b4a:	f000 facb 	bl	80060e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b4e:	4b1c      	ldr	r3, [pc, #112]	; (8005bc0 <xTimerCreateTimerTask+0x80>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d021      	beq.n	8005b9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b5e:	1d3a      	adds	r2, r7, #4
 8005b60:	f107 0108 	add.w	r1, r7, #8
 8005b64:	f107 030c 	add.w	r3, r7, #12
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7fd ff15 	bl	8003998 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b6e:	6879      	ldr	r1, [r7, #4]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	9202      	str	r2, [sp, #8]
 8005b76:	9301      	str	r3, [sp, #4]
 8005b78:	2302      	movs	r3, #2
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	460a      	mov	r2, r1
 8005b80:	4910      	ldr	r1, [pc, #64]	; (8005bc4 <xTimerCreateTimerTask+0x84>)
 8005b82:	4811      	ldr	r0, [pc, #68]	; (8005bc8 <xTimerCreateTimerTask+0x88>)
 8005b84:	f7fe ffdc 	bl	8004b40 <xTaskCreateStatic>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	4a10      	ldr	r2, [pc, #64]	; (8005bcc <xTimerCreateTimerTask+0x8c>)
 8005b8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005b8e:	4b0f      	ldr	r3, [pc, #60]	; (8005bcc <xTimerCreateTimerTask+0x8c>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005b96:	2301      	movs	r3, #1
 8005b98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10a      	bne.n	8005bb6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	613b      	str	r3, [r7, #16]
}
 8005bb2:	bf00      	nop
 8005bb4:	e7fe      	b.n	8005bb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005bb6:	697b      	ldr	r3, [r7, #20]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3718      	adds	r7, #24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	20002414 	.word	0x20002414
 8005bc4:	08006a54 	.word	0x08006a54
 8005bc8:	08005ced 	.word	0x08005ced
 8005bcc:	20002418 	.word	0x20002418

08005bd0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b08a      	sub	sp, #40	; 0x28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005bde:	2300      	movs	r3, #0
 8005be0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10a      	bne.n	8005bfe <xTimerGenericCommand+0x2e>
	__asm volatile
 8005be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	623b      	str	r3, [r7, #32]
}
 8005bfa:	bf00      	nop
 8005bfc:	e7fe      	b.n	8005bfc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005bfe:	4b1a      	ldr	r3, [pc, #104]	; (8005c68 <xTimerGenericCommand+0x98>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d02a      	beq.n	8005c5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2b05      	cmp	r3, #5
 8005c16:	dc18      	bgt.n	8005c4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c18:	f7ff fdaa 	bl	8005770 <xTaskGetSchedulerState>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d109      	bne.n	8005c36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c22:	4b11      	ldr	r3, [pc, #68]	; (8005c68 <xTimerGenericCommand+0x98>)
 8005c24:	6818      	ldr	r0, [r3, #0]
 8005c26:	f107 0110 	add.w	r1, r7, #16
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c2e:	f7fe f927 	bl	8003e80 <xQueueGenericSend>
 8005c32:	6278      	str	r0, [r7, #36]	; 0x24
 8005c34:	e012      	b.n	8005c5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c36:	4b0c      	ldr	r3, [pc, #48]	; (8005c68 <xTimerGenericCommand+0x98>)
 8005c38:	6818      	ldr	r0, [r3, #0]
 8005c3a:	f107 0110 	add.w	r1, r7, #16
 8005c3e:	2300      	movs	r3, #0
 8005c40:	2200      	movs	r2, #0
 8005c42:	f7fe f91d 	bl	8003e80 <xQueueGenericSend>
 8005c46:	6278      	str	r0, [r7, #36]	; 0x24
 8005c48:	e008      	b.n	8005c5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c4a:	4b07      	ldr	r3, [pc, #28]	; (8005c68 <xTimerGenericCommand+0x98>)
 8005c4c:	6818      	ldr	r0, [r3, #0]
 8005c4e:	f107 0110 	add.w	r1, r7, #16
 8005c52:	2300      	movs	r3, #0
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	f7fe fa11 	bl	800407c <xQueueGenericSendFromISR>
 8005c5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3728      	adds	r7, #40	; 0x28
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	20002414 	.word	0x20002414

08005c6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b088      	sub	sp, #32
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c76:	4b1c      	ldr	r3, [pc, #112]	; (8005ce8 <prvProcessExpiredTimer+0x7c>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	3304      	adds	r3, #4
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7fd ff27 	bl	8003ad8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d122      	bne.n	8005cd8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	699a      	ldr	r2, [r3, #24]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	18d1      	adds	r1, r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	6978      	ldr	r0, [r7, #20]
 8005ca0:	f000 f8c8 	bl	8005e34 <prvInsertTimerInActiveList>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d016      	beq.n	8005cd8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005caa:	2300      	movs	r3, #0
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	6978      	ldr	r0, [r7, #20]
 8005cb6:	f7ff ff8b 	bl	8005bd0 <xTimerGenericCommand>
 8005cba:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10a      	bne.n	8005cd8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	60fb      	str	r3, [r7, #12]
}
 8005cd4:	bf00      	nop
 8005cd6:	e7fe      	b.n	8005cd6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	6978      	ldr	r0, [r7, #20]
 8005cde:	4798      	blx	r3
}
 8005ce0:	bf00      	nop
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	2000240c 	.word	0x2000240c

08005cec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005cf4:	f107 0308 	add.w	r3, r7, #8
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 f857 	bl	8005dac <prvGetNextExpireTime>
 8005cfe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	4619      	mov	r1, r3
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 f803 	bl	8005d10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d0a:	f000 f8d5 	bl	8005eb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d0e:	e7f1      	b.n	8005cf4 <prvTimerTask+0x8>

08005d10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d1a:	f7ff f943 	bl	8004fa4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d1e:	f107 0308 	add.w	r3, r7, #8
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 f866 	bl	8005df4 <prvSampleTimeNow>
 8005d28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d130      	bne.n	8005d92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10a      	bne.n	8005d4c <prvProcessTimerOrBlockTask+0x3c>
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d806      	bhi.n	8005d4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d3e:	f7ff f93f 	bl	8004fc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d42:	68f9      	ldr	r1, [r7, #12]
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff ff91 	bl	8005c6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d4a:	e024      	b.n	8005d96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d008      	beq.n	8005d64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d52:	4b13      	ldr	r3, [pc, #76]	; (8005da0 <prvProcessTimerOrBlockTask+0x90>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	bf0c      	ite	eq
 8005d5c:	2301      	moveq	r3, #1
 8005d5e:	2300      	movne	r3, #0
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d64:	4b0f      	ldr	r3, [pc, #60]	; (8005da4 <prvProcessTimerOrBlockTask+0x94>)
 8005d66:	6818      	ldr	r0, [r3, #0]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	4619      	mov	r1, r3
 8005d72:	f7fe feb1 	bl	8004ad8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005d76:	f7ff f923 	bl	8004fc0 <xTaskResumeAll>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10a      	bne.n	8005d96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005d80:	4b09      	ldr	r3, [pc, #36]	; (8005da8 <prvProcessTimerOrBlockTask+0x98>)
 8005d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	f3bf 8f6f 	isb	sy
}
 8005d90:	e001      	b.n	8005d96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005d92:	f7ff f915 	bl	8004fc0 <xTaskResumeAll>
}
 8005d96:	bf00      	nop
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20002410 	.word	0x20002410
 8005da4:	20002414 	.word	0x20002414
 8005da8:	e000ed04 	.word	0xe000ed04

08005dac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005db4:	4b0e      	ldr	r3, [pc, #56]	; (8005df0 <prvGetNextExpireTime+0x44>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	bf0c      	ite	eq
 8005dbe:	2301      	moveq	r3, #1
 8005dc0:	2300      	movne	r3, #0
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d105      	bne.n	8005dde <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005dd2:	4b07      	ldr	r3, [pc, #28]	; (8005df0 <prvGetNextExpireTime+0x44>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	e001      	b.n	8005de2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005de2:	68fb      	ldr	r3, [r7, #12]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bc80      	pop	{r7}
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	2000240c 	.word	0x2000240c

08005df4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005dfc:	f7ff f97e 	bl	80050fc <xTaskGetTickCount>
 8005e00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e02:	4b0b      	ldr	r3, [pc, #44]	; (8005e30 <prvSampleTimeNow+0x3c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d205      	bcs.n	8005e18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e0c:	f000 f908 	bl	8006020 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	e002      	b.n	8005e1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e1e:	4a04      	ldr	r2, [pc, #16]	; (8005e30 <prvSampleTimeNow+0x3c>)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e24:	68fb      	ldr	r3, [r7, #12]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	2000241c 	.word	0x2000241c

08005e34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e42:	2300      	movs	r3, #0
 8005e44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d812      	bhi.n	8005e80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	1ad2      	subs	r2, r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d302      	bcc.n	8005e6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	e01b      	b.n	8005ea6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e6e:	4b10      	ldr	r3, [pc, #64]	; (8005eb0 <prvInsertTimerInActiveList+0x7c>)
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	3304      	adds	r3, #4
 8005e76:	4619      	mov	r1, r3
 8005e78:	4610      	mov	r0, r2
 8005e7a:	f7fd fdf5 	bl	8003a68 <vListInsert>
 8005e7e:	e012      	b.n	8005ea6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d206      	bcs.n	8005e96 <prvInsertTimerInActiveList+0x62>
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d302      	bcc.n	8005e96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005e90:	2301      	movs	r3, #1
 8005e92:	617b      	str	r3, [r7, #20]
 8005e94:	e007      	b.n	8005ea6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e96:	4b07      	ldr	r3, [pc, #28]	; (8005eb4 <prvInsertTimerInActiveList+0x80>)
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	f7fd fde1 	bl	8003a68 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005ea6:	697b      	ldr	r3, [r7, #20]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	20002410 	.word	0x20002410
 8005eb4:	2000240c 	.word	0x2000240c

08005eb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08e      	sub	sp, #56	; 0x38
 8005ebc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ebe:	e09d      	b.n	8005ffc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	da18      	bge.n	8005ef8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005ec6:	1d3b      	adds	r3, r7, #4
 8005ec8:	3304      	adds	r3, #4
 8005eca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10a      	bne.n	8005ee8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed6:	f383 8811 	msr	BASEPRI, r3
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	61fb      	str	r3, [r7, #28]
}
 8005ee4:	bf00      	nop
 8005ee6:	e7fe      	b.n	8005ee6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eee:	6850      	ldr	r0, [r2, #4]
 8005ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ef2:	6892      	ldr	r2, [r2, #8]
 8005ef4:	4611      	mov	r1, r2
 8005ef6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	db7d      	blt.n	8005ffa <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d004      	beq.n	8005f14 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fd fde2 	bl	8003ad8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f14:	463b      	mov	r3, r7
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff ff6c 	bl	8005df4 <prvSampleTimeNow>
 8005f1c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b09      	cmp	r3, #9
 8005f22:	d86b      	bhi.n	8005ffc <prvProcessReceivedCommands+0x144>
 8005f24:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <prvProcessReceivedCommands+0x74>)
 8005f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2a:	bf00      	nop
 8005f2c:	08005f55 	.word	0x08005f55
 8005f30:	08005f55 	.word	0x08005f55
 8005f34:	08005f55 	.word	0x08005f55
 8005f38:	08005ffd 	.word	0x08005ffd
 8005f3c:	08005fb1 	.word	0x08005fb1
 8005f40:	08005fe9 	.word	0x08005fe9
 8005f44:	08005f55 	.word	0x08005f55
 8005f48:	08005f55 	.word	0x08005f55
 8005f4c:	08005ffd 	.word	0x08005ffd
 8005f50:	08005fb1 	.word	0x08005fb1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	18d1      	adds	r1, r2, r3
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f62:	f7ff ff67 	bl	8005e34 <prvInsertTimerInActiveList>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d047      	beq.n	8005ffc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f72:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f76:	69db      	ldr	r3, [r3, #28]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d13f      	bne.n	8005ffc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	441a      	add	r2, r3
 8005f84:	2300      	movs	r3, #0
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	2300      	movs	r3, #0
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f8e:	f7ff fe1f 	bl	8005bd0 <xTimerGenericCommand>
 8005f92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d130      	bne.n	8005ffc <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9e:	f383 8811 	msr	BASEPRI, r3
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	61bb      	str	r3, [r7, #24]
}
 8005fac:	bf00      	nop
 8005fae:	e7fe      	b.n	8005fae <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10a      	bne.n	8005fd4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	617b      	str	r3, [r7, #20]
}
 8005fd0:	bf00      	nop
 8005fd2:	e7fe      	b.n	8005fd2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd6:	699a      	ldr	r2, [r3, #24]
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	18d1      	adds	r1, r2, r3
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fe2:	f7ff ff27 	bl	8005e34 <prvInsertTimerInActiveList>
					break;
 8005fe6:	e009      	b.n	8005ffc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d104      	bne.n	8005ffc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005ff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ff4:	f000 fb6e 	bl	80066d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005ff8:	e000      	b.n	8005ffc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005ffa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ffc:	4b07      	ldr	r3, [pc, #28]	; (800601c <prvProcessReceivedCommands+0x164>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	1d39      	adds	r1, r7, #4
 8006002:	2200      	movs	r2, #0
 8006004:	4618      	mov	r0, r3
 8006006:	f7fe f95f 	bl	80042c8 <xQueueReceive>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	f47f af57 	bne.w	8005ec0 <prvProcessReceivedCommands+0x8>
	}
}
 8006012:	bf00      	nop
 8006014:	bf00      	nop
 8006016:	3730      	adds	r7, #48	; 0x30
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	20002414 	.word	0x20002414

08006020 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006026:	e045      	b.n	80060b4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006028:	4b2c      	ldr	r3, [pc, #176]	; (80060dc <prvSwitchTimerLists+0xbc>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006032:	4b2a      	ldr	r3, [pc, #168]	; (80060dc <prvSwitchTimerLists+0xbc>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	3304      	adds	r3, #4
 8006040:	4618      	mov	r0, r3
 8006042:	f7fd fd49 	bl	8003ad8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d12e      	bne.n	80060b4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	4413      	add	r3, r2
 800605e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	429a      	cmp	r2, r3
 8006066:	d90e      	bls.n	8006086 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006074:	4b19      	ldr	r3, [pc, #100]	; (80060dc <prvSwitchTimerLists+0xbc>)
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	3304      	adds	r3, #4
 800607c:	4619      	mov	r1, r3
 800607e:	4610      	mov	r0, r2
 8006080:	f7fd fcf2 	bl	8003a68 <vListInsert>
 8006084:	e016      	b.n	80060b4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006086:	2300      	movs	r3, #0
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	2300      	movs	r3, #0
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	2100      	movs	r1, #0
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f7ff fd9d 	bl	8005bd0 <xTimerGenericCommand>
 8006096:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10a      	bne.n	80060b4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800609e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	603b      	str	r3, [r7, #0]
}
 80060b0:	bf00      	nop
 80060b2:	e7fe      	b.n	80060b2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060b4:	4b09      	ldr	r3, [pc, #36]	; (80060dc <prvSwitchTimerLists+0xbc>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1b4      	bne.n	8006028 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80060be:	4b07      	ldr	r3, [pc, #28]	; (80060dc <prvSwitchTimerLists+0xbc>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80060c4:	4b06      	ldr	r3, [pc, #24]	; (80060e0 <prvSwitchTimerLists+0xc0>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a04      	ldr	r2, [pc, #16]	; (80060dc <prvSwitchTimerLists+0xbc>)
 80060ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80060cc:	4a04      	ldr	r2, [pc, #16]	; (80060e0 <prvSwitchTimerLists+0xc0>)
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	6013      	str	r3, [r2, #0]
}
 80060d2:	bf00      	nop
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	2000240c 	.word	0x2000240c
 80060e0:	20002410 	.word	0x20002410

080060e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80060ea:	f000 f92f 	bl	800634c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80060ee:	4b15      	ldr	r3, [pc, #84]	; (8006144 <prvCheckForValidListAndQueue+0x60>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d120      	bne.n	8006138 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80060f6:	4814      	ldr	r0, [pc, #80]	; (8006148 <prvCheckForValidListAndQueue+0x64>)
 80060f8:	f7fd fc68 	bl	80039cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80060fc:	4813      	ldr	r0, [pc, #76]	; (800614c <prvCheckForValidListAndQueue+0x68>)
 80060fe:	f7fd fc65 	bl	80039cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006102:	4b13      	ldr	r3, [pc, #76]	; (8006150 <prvCheckForValidListAndQueue+0x6c>)
 8006104:	4a10      	ldr	r2, [pc, #64]	; (8006148 <prvCheckForValidListAndQueue+0x64>)
 8006106:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006108:	4b12      	ldr	r3, [pc, #72]	; (8006154 <prvCheckForValidListAndQueue+0x70>)
 800610a:	4a10      	ldr	r2, [pc, #64]	; (800614c <prvCheckForValidListAndQueue+0x68>)
 800610c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800610e:	2300      	movs	r3, #0
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	4b11      	ldr	r3, [pc, #68]	; (8006158 <prvCheckForValidListAndQueue+0x74>)
 8006114:	4a11      	ldr	r2, [pc, #68]	; (800615c <prvCheckForValidListAndQueue+0x78>)
 8006116:	2110      	movs	r1, #16
 8006118:	200a      	movs	r0, #10
 800611a:	f7fd fd6f 	bl	8003bfc <xQueueGenericCreateStatic>
 800611e:	4603      	mov	r3, r0
 8006120:	4a08      	ldr	r2, [pc, #32]	; (8006144 <prvCheckForValidListAndQueue+0x60>)
 8006122:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006124:	4b07      	ldr	r3, [pc, #28]	; (8006144 <prvCheckForValidListAndQueue+0x60>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d005      	beq.n	8006138 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800612c:	4b05      	ldr	r3, [pc, #20]	; (8006144 <prvCheckForValidListAndQueue+0x60>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	490b      	ldr	r1, [pc, #44]	; (8006160 <prvCheckForValidListAndQueue+0x7c>)
 8006132:	4618      	mov	r0, r3
 8006134:	f7fe fc7e 	bl	8004a34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006138:	f000 f938 	bl	80063ac <vPortExitCritical>
}
 800613c:	bf00      	nop
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20002414 	.word	0x20002414
 8006148:	200023e4 	.word	0x200023e4
 800614c:	200023f8 	.word	0x200023f8
 8006150:	2000240c 	.word	0x2000240c
 8006154:	20002410 	.word	0x20002410
 8006158:	200024c0 	.word	0x200024c0
 800615c:	20002420 	.word	0x20002420
 8006160:	08006a5c 	.word	0x08006a5c

08006164 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	3b04      	subs	r3, #4
 8006174:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800617c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	3b04      	subs	r3, #4
 8006182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f023 0201 	bic.w	r2, r3, #1
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	3b04      	subs	r3, #4
 8006192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006194:	4a08      	ldr	r2, [pc, #32]	; (80061b8 <pxPortInitialiseStack+0x54>)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	3b14      	subs	r3, #20
 800619e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	3b20      	subs	r3, #32
 80061aa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80061ac:	68fb      	ldr	r3, [r7, #12]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bc80      	pop	{r7}
 80061b6:	4770      	bx	lr
 80061b8:	080061bd 	.word	0x080061bd

080061bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80061c6:	4b12      	ldr	r3, [pc, #72]	; (8006210 <prvTaskExitError+0x54>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ce:	d00a      	beq.n	80061e6 <prvTaskExitError+0x2a>
	__asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	60fb      	str	r3, [r7, #12]
}
 80061e2:	bf00      	nop
 80061e4:	e7fe      	b.n	80061e4 <prvTaskExitError+0x28>
	__asm volatile
 80061e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	60bb      	str	r3, [r7, #8]
}
 80061f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061fa:	bf00      	nop
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d0fc      	beq.n	80061fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006202:	bf00      	nop
 8006204:	bf00      	nop
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	bc80      	pop	{r7}
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	2000000c 	.word	0x2000000c
	...

08006220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006220:	4b07      	ldr	r3, [pc, #28]	; (8006240 <pxCurrentTCBConst2>)
 8006222:	6819      	ldr	r1, [r3, #0]
 8006224:	6808      	ldr	r0, [r1, #0]
 8006226:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800622a:	f380 8809 	msr	PSP, r0
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f04f 0000 	mov.w	r0, #0
 8006236:	f380 8811 	msr	BASEPRI, r0
 800623a:	f04e 0e0d 	orr.w	lr, lr, #13
 800623e:	4770      	bx	lr

08006240 <pxCurrentTCBConst2>:
 8006240:	20001ee4 	.word	0x20001ee4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop

08006248 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006248:	4806      	ldr	r0, [pc, #24]	; (8006264 <prvPortStartFirstTask+0x1c>)
 800624a:	6800      	ldr	r0, [r0, #0]
 800624c:	6800      	ldr	r0, [r0, #0]
 800624e:	f380 8808 	msr	MSP, r0
 8006252:	b662      	cpsie	i
 8006254:	b661      	cpsie	f
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	df00      	svc	0
 8006260:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006262:	bf00      	nop
 8006264:	e000ed08 	.word	0xe000ed08

08006268 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800626e:	4b32      	ldr	r3, [pc, #200]	; (8006338 <xPortStartScheduler+0xd0>)
 8006270:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	b2db      	uxtb	r3, r3
 8006278:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	22ff      	movs	r2, #255	; 0xff
 800627e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	b2db      	uxtb	r3, r3
 8006286:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006288:	78fb      	ldrb	r3, [r7, #3]
 800628a:	b2db      	uxtb	r3, r3
 800628c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006290:	b2da      	uxtb	r2, r3
 8006292:	4b2a      	ldr	r3, [pc, #168]	; (800633c <xPortStartScheduler+0xd4>)
 8006294:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006296:	4b2a      	ldr	r3, [pc, #168]	; (8006340 <xPortStartScheduler+0xd8>)
 8006298:	2207      	movs	r2, #7
 800629a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800629c:	e009      	b.n	80062b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800629e:	4b28      	ldr	r3, [pc, #160]	; (8006340 <xPortStartScheduler+0xd8>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	4a26      	ldr	r2, [pc, #152]	; (8006340 <xPortStartScheduler+0xd8>)
 80062a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80062a8:	78fb      	ldrb	r3, [r7, #3]
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062b2:	78fb      	ldrb	r3, [r7, #3]
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ba:	2b80      	cmp	r3, #128	; 0x80
 80062bc:	d0ef      	beq.n	800629e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80062be:	4b20      	ldr	r3, [pc, #128]	; (8006340 <xPortStartScheduler+0xd8>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f1c3 0307 	rsb	r3, r3, #7
 80062c6:	2b04      	cmp	r3, #4
 80062c8:	d00a      	beq.n	80062e0 <xPortStartScheduler+0x78>
	__asm volatile
 80062ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	60bb      	str	r3, [r7, #8]
}
 80062dc:	bf00      	nop
 80062de:	e7fe      	b.n	80062de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062e0:	4b17      	ldr	r3, [pc, #92]	; (8006340 <xPortStartScheduler+0xd8>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	021b      	lsls	r3, r3, #8
 80062e6:	4a16      	ldr	r2, [pc, #88]	; (8006340 <xPortStartScheduler+0xd8>)
 80062e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062ea:	4b15      	ldr	r3, [pc, #84]	; (8006340 <xPortStartScheduler+0xd8>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062f2:	4a13      	ldr	r2, [pc, #76]	; (8006340 <xPortStartScheduler+0xd8>)
 80062f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062fe:	4b11      	ldr	r3, [pc, #68]	; (8006344 <xPortStartScheduler+0xdc>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a10      	ldr	r2, [pc, #64]	; (8006344 <xPortStartScheduler+0xdc>)
 8006304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006308:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800630a:	4b0e      	ldr	r3, [pc, #56]	; (8006344 <xPortStartScheduler+0xdc>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a0d      	ldr	r2, [pc, #52]	; (8006344 <xPortStartScheduler+0xdc>)
 8006310:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006314:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006316:	f000 f8b9 	bl	800648c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800631a:	4b0b      	ldr	r3, [pc, #44]	; (8006348 <xPortStartScheduler+0xe0>)
 800631c:	2200      	movs	r2, #0
 800631e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006320:	f7ff ff92 	bl	8006248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006324:	f7fe ffb6 	bl	8005294 <vTaskSwitchContext>
	prvTaskExitError();
 8006328:	f7ff ff48 	bl	80061bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	e000e400 	.word	0xe000e400
 800633c:	20002510 	.word	0x20002510
 8006340:	20002514 	.word	0x20002514
 8006344:	e000ed20 	.word	0xe000ed20
 8006348:	2000000c 	.word	0x2000000c

0800634c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
	__asm volatile
 8006352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	607b      	str	r3, [r7, #4]
}
 8006364:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006366:	4b0f      	ldr	r3, [pc, #60]	; (80063a4 <vPortEnterCritical+0x58>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3301      	adds	r3, #1
 800636c:	4a0d      	ldr	r2, [pc, #52]	; (80063a4 <vPortEnterCritical+0x58>)
 800636e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006370:	4b0c      	ldr	r3, [pc, #48]	; (80063a4 <vPortEnterCritical+0x58>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d10f      	bne.n	8006398 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006378:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <vPortEnterCritical+0x5c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00a      	beq.n	8006398 <vPortEnterCritical+0x4c>
	__asm volatile
 8006382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	603b      	str	r3, [r7, #0]
}
 8006394:	bf00      	nop
 8006396:	e7fe      	b.n	8006396 <vPortEnterCritical+0x4a>
	}
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	bc80      	pop	{r7}
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	2000000c 	.word	0x2000000c
 80063a8:	e000ed04 	.word	0xe000ed04

080063ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80063b2:	4b11      	ldr	r3, [pc, #68]	; (80063f8 <vPortExitCritical+0x4c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10a      	bne.n	80063d0 <vPortExitCritical+0x24>
	__asm volatile
 80063ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	607b      	str	r3, [r7, #4]
}
 80063cc:	bf00      	nop
 80063ce:	e7fe      	b.n	80063ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80063d0:	4b09      	ldr	r3, [pc, #36]	; (80063f8 <vPortExitCritical+0x4c>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3b01      	subs	r3, #1
 80063d6:	4a08      	ldr	r2, [pc, #32]	; (80063f8 <vPortExitCritical+0x4c>)
 80063d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063da:	4b07      	ldr	r3, [pc, #28]	; (80063f8 <vPortExitCritical+0x4c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d105      	bne.n	80063ee <vPortExitCritical+0x42>
 80063e2:	2300      	movs	r3, #0
 80063e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	f383 8811 	msr	BASEPRI, r3
}
 80063ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80063ee:	bf00      	nop
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bc80      	pop	{r7}
 80063f6:	4770      	bx	lr
 80063f8:	2000000c 	.word	0x2000000c
 80063fc:	00000000 	.word	0x00000000

08006400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006400:	f3ef 8009 	mrs	r0, PSP
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	4b0d      	ldr	r3, [pc, #52]	; (8006440 <pxCurrentTCBConst>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006410:	6010      	str	r0, [r2, #0]
 8006412:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006416:	f04f 0050 	mov.w	r0, #80	; 0x50
 800641a:	f380 8811 	msr	BASEPRI, r0
 800641e:	f7fe ff39 	bl	8005294 <vTaskSwitchContext>
 8006422:	f04f 0000 	mov.w	r0, #0
 8006426:	f380 8811 	msr	BASEPRI, r0
 800642a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800642e:	6819      	ldr	r1, [r3, #0]
 8006430:	6808      	ldr	r0, [r1, #0]
 8006432:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006436:	f380 8809 	msr	PSP, r0
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	4770      	bx	lr

08006440 <pxCurrentTCBConst>:
 8006440:	20001ee4 	.word	0x20001ee4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop

08006448 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
	__asm volatile
 800644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	607b      	str	r3, [r7, #4]
}
 8006460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006462:	f7fe fe59 	bl	8005118 <xTaskIncrementTick>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800646c:	4b06      	ldr	r3, [pc, #24]	; (8006488 <SysTick_Handler+0x40>)
 800646e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	2300      	movs	r3, #0
 8006476:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	f383 8811 	msr	BASEPRI, r3
}
 800647e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006480:	bf00      	nop
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	e000ed04 	.word	0xe000ed04

0800648c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006490:	4b0a      	ldr	r3, [pc, #40]	; (80064bc <vPortSetupTimerInterrupt+0x30>)
 8006492:	2200      	movs	r2, #0
 8006494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006496:	4b0a      	ldr	r3, [pc, #40]	; (80064c0 <vPortSetupTimerInterrupt+0x34>)
 8006498:	2200      	movs	r2, #0
 800649a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800649c:	4b09      	ldr	r3, [pc, #36]	; (80064c4 <vPortSetupTimerInterrupt+0x38>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a09      	ldr	r2, [pc, #36]	; (80064c8 <vPortSetupTimerInterrupt+0x3c>)
 80064a2:	fba2 2303 	umull	r2, r3, r2, r3
 80064a6:	099b      	lsrs	r3, r3, #6
 80064a8:	4a08      	ldr	r2, [pc, #32]	; (80064cc <vPortSetupTimerInterrupt+0x40>)
 80064aa:	3b01      	subs	r3, #1
 80064ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064ae:	4b03      	ldr	r3, [pc, #12]	; (80064bc <vPortSetupTimerInterrupt+0x30>)
 80064b0:	2207      	movs	r2, #7
 80064b2:	601a      	str	r2, [r3, #0]
}
 80064b4:	bf00      	nop
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bc80      	pop	{r7}
 80064ba:	4770      	bx	lr
 80064bc:	e000e010 	.word	0xe000e010
 80064c0:	e000e018 	.word	0xe000e018
 80064c4:	20000000 	.word	0x20000000
 80064c8:	10624dd3 	.word	0x10624dd3
 80064cc:	e000e014 	.word	0xe000e014

080064d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80064d6:	f3ef 8305 	mrs	r3, IPSR
 80064da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b0f      	cmp	r3, #15
 80064e0:	d914      	bls.n	800650c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80064e2:	4a16      	ldr	r2, [pc, #88]	; (800653c <vPortValidateInterruptPriority+0x6c>)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	4413      	add	r3, r2
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80064ec:	4b14      	ldr	r3, [pc, #80]	; (8006540 <vPortValidateInterruptPriority+0x70>)
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	7afa      	ldrb	r2, [r7, #11]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d20a      	bcs.n	800650c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80064f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	607b      	str	r3, [r7, #4]
}
 8006508:	bf00      	nop
 800650a:	e7fe      	b.n	800650a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800650c:	4b0d      	ldr	r3, [pc, #52]	; (8006544 <vPortValidateInterruptPriority+0x74>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006514:	4b0c      	ldr	r3, [pc, #48]	; (8006548 <vPortValidateInterruptPriority+0x78>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	429a      	cmp	r2, r3
 800651a:	d90a      	bls.n	8006532 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	603b      	str	r3, [r7, #0]
}
 800652e:	bf00      	nop
 8006530:	e7fe      	b.n	8006530 <vPortValidateInterruptPriority+0x60>
	}
 8006532:	bf00      	nop
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	bc80      	pop	{r7}
 800653a:	4770      	bx	lr
 800653c:	e000e3f0 	.word	0xe000e3f0
 8006540:	20002510 	.word	0x20002510
 8006544:	e000ed0c 	.word	0xe000ed0c
 8006548:	20002514 	.word	0x20002514

0800654c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b08a      	sub	sp, #40	; 0x28
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006554:	2300      	movs	r3, #0
 8006556:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006558:	f7fe fd24 	bl	8004fa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800655c:	4b58      	ldr	r3, [pc, #352]	; (80066c0 <pvPortMalloc+0x174>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006564:	f000 f910 	bl	8006788 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006568:	4b56      	ldr	r3, [pc, #344]	; (80066c4 <pvPortMalloc+0x178>)
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4013      	ands	r3, r2
 8006570:	2b00      	cmp	r3, #0
 8006572:	f040 808e 	bne.w	8006692 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01d      	beq.n	80065b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800657c:	2208      	movs	r2, #8
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4413      	add	r3, r2
 8006582:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f003 0307 	and.w	r3, r3, #7
 800658a:	2b00      	cmp	r3, #0
 800658c:	d014      	beq.n	80065b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f023 0307 	bic.w	r3, r3, #7
 8006594:	3308      	adds	r3, #8
 8006596:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f003 0307 	and.w	r3, r3, #7
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00a      	beq.n	80065b8 <pvPortMalloc+0x6c>
	__asm volatile
 80065a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	617b      	str	r3, [r7, #20]
}
 80065b4:	bf00      	nop
 80065b6:	e7fe      	b.n	80065b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d069      	beq.n	8006692 <pvPortMalloc+0x146>
 80065be:	4b42      	ldr	r3, [pc, #264]	; (80066c8 <pvPortMalloc+0x17c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d864      	bhi.n	8006692 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80065c8:	4b40      	ldr	r3, [pc, #256]	; (80066cc <pvPortMalloc+0x180>)
 80065ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80065cc:	4b3f      	ldr	r3, [pc, #252]	; (80066cc <pvPortMalloc+0x180>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065d2:	e004      	b.n	80065de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d903      	bls.n	80065f0 <pvPortMalloc+0xa4>
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1f1      	bne.n	80065d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80065f0:	4b33      	ldr	r3, [pc, #204]	; (80066c0 <pvPortMalloc+0x174>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d04b      	beq.n	8006692 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2208      	movs	r2, #8
 8006600:	4413      	add	r3, r2
 8006602:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	1ad2      	subs	r2, r2, r3
 8006614:	2308      	movs	r3, #8
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	429a      	cmp	r2, r3
 800661a:	d91f      	bls.n	800665c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800661c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4413      	add	r3, r2
 8006622:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00a      	beq.n	8006644 <pvPortMalloc+0xf8>
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	613b      	str	r3, [r7, #16]
}
 8006640:	bf00      	nop
 8006642:	e7fe      	b.n	8006642 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	685a      	ldr	r2, [r3, #4]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	1ad2      	subs	r2, r2, r3
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006656:	69b8      	ldr	r0, [r7, #24]
 8006658:	f000 f8f8 	bl	800684c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800665c:	4b1a      	ldr	r3, [pc, #104]	; (80066c8 <pvPortMalloc+0x17c>)
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	4a18      	ldr	r2, [pc, #96]	; (80066c8 <pvPortMalloc+0x17c>)
 8006668:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800666a:	4b17      	ldr	r3, [pc, #92]	; (80066c8 <pvPortMalloc+0x17c>)
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	4b18      	ldr	r3, [pc, #96]	; (80066d0 <pvPortMalloc+0x184>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	429a      	cmp	r2, r3
 8006674:	d203      	bcs.n	800667e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006676:	4b14      	ldr	r3, [pc, #80]	; (80066c8 <pvPortMalloc+0x17c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a15      	ldr	r2, [pc, #84]	; (80066d0 <pvPortMalloc+0x184>)
 800667c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800667e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	4b10      	ldr	r3, [pc, #64]	; (80066c4 <pvPortMalloc+0x178>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	431a      	orrs	r2, r3
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	2200      	movs	r2, #0
 8006690:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006692:	f7fe fc95 	bl	8004fc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	f003 0307 	and.w	r3, r3, #7
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00a      	beq.n	80066b6 <pvPortMalloc+0x16a>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	60fb      	str	r3, [r7, #12]
}
 80066b2:	bf00      	nop
 80066b4:	e7fe      	b.n	80066b4 <pvPortMalloc+0x168>
	return pvReturn;
 80066b6:	69fb      	ldr	r3, [r7, #28]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3728      	adds	r7, #40	; 0x28
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	20003120 	.word	0x20003120
 80066c4:	2000312c 	.word	0x2000312c
 80066c8:	20003124 	.word	0x20003124
 80066cc:	20003118 	.word	0x20003118
 80066d0:	20003128 	.word	0x20003128

080066d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d048      	beq.n	8006778 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80066e6:	2308      	movs	r3, #8
 80066e8:	425b      	negs	r3, r3
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	4413      	add	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	4b21      	ldr	r3, [pc, #132]	; (8006780 <vPortFree+0xac>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4013      	ands	r3, r2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10a      	bne.n	8006718 <vPortFree+0x44>
	__asm volatile
 8006702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	60fb      	str	r3, [r7, #12]
}
 8006714:	bf00      	nop
 8006716:	e7fe      	b.n	8006716 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00a      	beq.n	8006736 <vPortFree+0x62>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	60bb      	str	r3, [r7, #8]
}
 8006732:	bf00      	nop
 8006734:	e7fe      	b.n	8006734 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	4b11      	ldr	r3, [pc, #68]	; (8006780 <vPortFree+0xac>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4013      	ands	r3, r2
 8006740:	2b00      	cmp	r3, #0
 8006742:	d019      	beq.n	8006778 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d115      	bne.n	8006778 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <vPortFree+0xac>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	43db      	mvns	r3, r3
 8006756:	401a      	ands	r2, r3
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800675c:	f7fe fc22 	bl	8004fa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	4b07      	ldr	r3, [pc, #28]	; (8006784 <vPortFree+0xb0>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4413      	add	r3, r2
 800676a:	4a06      	ldr	r2, [pc, #24]	; (8006784 <vPortFree+0xb0>)
 800676c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800676e:	6938      	ldr	r0, [r7, #16]
 8006770:	f000 f86c 	bl	800684c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006774:	f7fe fc24 	bl	8004fc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006778:	bf00      	nop
 800677a:	3718      	adds	r7, #24
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	2000312c 	.word	0x2000312c
 8006784:	20003124 	.word	0x20003124

08006788 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800678e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006792:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006794:	4b27      	ldr	r3, [pc, #156]	; (8006834 <prvHeapInit+0xac>)
 8006796:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f003 0307 	and.w	r3, r3, #7
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00c      	beq.n	80067bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	3307      	adds	r3, #7
 80067a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0307 	bic.w	r3, r3, #7
 80067ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	4a1f      	ldr	r2, [pc, #124]	; (8006834 <prvHeapInit+0xac>)
 80067b8:	4413      	add	r3, r2
 80067ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80067c0:	4a1d      	ldr	r2, [pc, #116]	; (8006838 <prvHeapInit+0xb0>)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80067c6:	4b1c      	ldr	r3, [pc, #112]	; (8006838 <prvHeapInit+0xb0>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	4413      	add	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80067d4:	2208      	movs	r2, #8
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	1a9b      	subs	r3, r3, r2
 80067da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f023 0307 	bic.w	r3, r3, #7
 80067e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4a15      	ldr	r2, [pc, #84]	; (800683c <prvHeapInit+0xb4>)
 80067e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80067ea:	4b14      	ldr	r3, [pc, #80]	; (800683c <prvHeapInit+0xb4>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2200      	movs	r2, #0
 80067f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80067f2:	4b12      	ldr	r3, [pc, #72]	; (800683c <prvHeapInit+0xb4>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2200      	movs	r2, #0
 80067f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	1ad2      	subs	r2, r2, r3
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006808:	4b0c      	ldr	r3, [pc, #48]	; (800683c <prvHeapInit+0xb4>)
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	4a0a      	ldr	r2, [pc, #40]	; (8006840 <prvHeapInit+0xb8>)
 8006816:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	4a09      	ldr	r2, [pc, #36]	; (8006844 <prvHeapInit+0xbc>)
 800681e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006820:	4b09      	ldr	r3, [pc, #36]	; (8006848 <prvHeapInit+0xc0>)
 8006822:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006826:	601a      	str	r2, [r3, #0]
}
 8006828:	bf00      	nop
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	bc80      	pop	{r7}
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	20002518 	.word	0x20002518
 8006838:	20003118 	.word	0x20003118
 800683c:	20003120 	.word	0x20003120
 8006840:	20003128 	.word	0x20003128
 8006844:	20003124 	.word	0x20003124
 8006848:	2000312c 	.word	0x2000312c

0800684c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006854:	4b27      	ldr	r3, [pc, #156]	; (80068f4 <prvInsertBlockIntoFreeList+0xa8>)
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	e002      	b.n	8006860 <prvInsertBlockIntoFreeList+0x14>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	429a      	cmp	r2, r3
 8006868:	d8f7      	bhi.n	800685a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	4413      	add	r3, r2
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	429a      	cmp	r2, r3
 800687a:	d108      	bne.n	800688e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	441a      	add	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	441a      	add	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d118      	bne.n	80068d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	4b14      	ldr	r3, [pc, #80]	; (80068f8 <prvInsertBlockIntoFreeList+0xac>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d00d      	beq.n	80068ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	441a      	add	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	e008      	b.n	80068dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068ca:	4b0b      	ldr	r3, [pc, #44]	; (80068f8 <prvInsertBlockIntoFreeList+0xac>)
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	e003      	b.n	80068dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d002      	beq.n	80068ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068ea:	bf00      	nop
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bc80      	pop	{r7}
 80068f2:	4770      	bx	lr
 80068f4:	20003118 	.word	0x20003118
 80068f8:	20003120 	.word	0x20003120

080068fc <__libc_init_array>:
 80068fc:	b570      	push	{r4, r5, r6, lr}
 80068fe:	2600      	movs	r6, #0
 8006900:	4d0c      	ldr	r5, [pc, #48]	; (8006934 <__libc_init_array+0x38>)
 8006902:	4c0d      	ldr	r4, [pc, #52]	; (8006938 <__libc_init_array+0x3c>)
 8006904:	1b64      	subs	r4, r4, r5
 8006906:	10a4      	asrs	r4, r4, #2
 8006908:	42a6      	cmp	r6, r4
 800690a:	d109      	bne.n	8006920 <__libc_init_array+0x24>
 800690c:	f000 f830 	bl	8006970 <_init>
 8006910:	2600      	movs	r6, #0
 8006912:	4d0a      	ldr	r5, [pc, #40]	; (800693c <__libc_init_array+0x40>)
 8006914:	4c0a      	ldr	r4, [pc, #40]	; (8006940 <__libc_init_array+0x44>)
 8006916:	1b64      	subs	r4, r4, r5
 8006918:	10a4      	asrs	r4, r4, #2
 800691a:	42a6      	cmp	r6, r4
 800691c:	d105      	bne.n	800692a <__libc_init_array+0x2e>
 800691e:	bd70      	pop	{r4, r5, r6, pc}
 8006920:	f855 3b04 	ldr.w	r3, [r5], #4
 8006924:	4798      	blx	r3
 8006926:	3601      	adds	r6, #1
 8006928:	e7ee      	b.n	8006908 <__libc_init_array+0xc>
 800692a:	f855 3b04 	ldr.w	r3, [r5], #4
 800692e:	4798      	blx	r3
 8006930:	3601      	adds	r6, #1
 8006932:	e7f2      	b.n	800691a <__libc_init_array+0x1e>
 8006934:	08006bb4 	.word	0x08006bb4
 8006938:	08006bb4 	.word	0x08006bb4
 800693c:	08006bb4 	.word	0x08006bb4
 8006940:	08006bb8 	.word	0x08006bb8

08006944 <memcpy>:
 8006944:	440a      	add	r2, r1
 8006946:	4291      	cmp	r1, r2
 8006948:	f100 33ff 	add.w	r3, r0, #4294967295
 800694c:	d100      	bne.n	8006950 <memcpy+0xc>
 800694e:	4770      	bx	lr
 8006950:	b510      	push	{r4, lr}
 8006952:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006956:	4291      	cmp	r1, r2
 8006958:	f803 4f01 	strb.w	r4, [r3, #1]!
 800695c:	d1f9      	bne.n	8006952 <memcpy+0xe>
 800695e:	bd10      	pop	{r4, pc}

08006960 <memset>:
 8006960:	4603      	mov	r3, r0
 8006962:	4402      	add	r2, r0
 8006964:	4293      	cmp	r3, r2
 8006966:	d100      	bne.n	800696a <memset+0xa>
 8006968:	4770      	bx	lr
 800696a:	f803 1b01 	strb.w	r1, [r3], #1
 800696e:	e7f9      	b.n	8006964 <memset+0x4>

08006970 <_init>:
 8006970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006972:	bf00      	nop
 8006974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006976:	bc08      	pop	{r3}
 8006978:	469e      	mov	lr, r3
 800697a:	4770      	bx	lr

0800697c <_fini>:
 800697c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697e:	bf00      	nop
 8006980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006982:	bc08      	pop	{r3}
 8006984:	469e      	mov	lr, r3
 8006986:	4770      	bx	lr
