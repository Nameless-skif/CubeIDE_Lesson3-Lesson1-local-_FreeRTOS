
CubeIDE_Lesson1_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aa8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08005bb8  08005bb8  00015bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d58  08005d58  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005d58  08005d58  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d58  08005d58  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d58  08005d58  00015d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d5c  08005d5c  00015d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ec0  20000010  08005d70  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ed0  08005d70  00022ed0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018cd9  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034e0  00000000  00000000  00038d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  0003c1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001368  00000000  00000000  0003d698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a58  00000000  00000000  0003ea00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016985  00000000  00000000  00042458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009959d  00000000  00000000  00058ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f237a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005654  00000000  00000000  000f23cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08005ba0 	.word	0x08005ba0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08005ba0 	.word	0x08005ba0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <USART1_IRQHandler>:
uint16_t channel_Adc_Convert(uint8_t channel);

//char RxBuffer[100] = {"ADC"};
//bool CommandReceived = true;

void USART1_IRQHandler(void){
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
	  if(USART1->SR & USART_SR_RXNE){ 	   // Проверка, что данные пришли
 8000166:	4b11      	ldr	r3, [pc, #68]	; (80001ac <USART1_IRQHandler+0x4c>)
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	f003 0320 	and.w	r3, r3, #32
 800016e:	2b00      	cmp	r3, #0
 8000170:	d019      	beq.n	80001a6 <USART1_IRQHandler+0x46>
		  uint8_t len = strlen(RxBuffer);  // Значение последнего свободного элемента в RxBuffer
 8000172:	480f      	ldr	r0, [pc, #60]	; (80001b0 <USART1_IRQHandler+0x50>)
 8000174:	f7ff ffec 	bl	8000150 <strlen>
 8000178:	4603      	mov	r3, r0
 800017a:	71fb      	strb	r3, [r7, #7]
		  RxBuffer[len] = USART1->DR;      // В последний свободный элемент RxBuffer записываем считанное значение из регистра DR
 800017c:	4b0b      	ldr	r3, [pc, #44]	; (80001ac <USART1_IRQHandler+0x4c>)
 800017e:	685a      	ldr	r2, [r3, #4]
 8000180:	79fb      	ldrb	r3, [r7, #7]
 8000182:	b2d1      	uxtb	r1, r2
 8000184:	4a0a      	ldr	r2, [pc, #40]	; (80001b0 <USART1_IRQHandler+0x50>)
 8000186:	54d1      	strb	r1, [r2, r3]
		  if((RxBuffer[len] == 0x0A) && (RxBuffer[len - 1] ==0x0D)){  		//Значит строка пришла целиком
 8000188:	79fb      	ldrb	r3, [r7, #7]
 800018a:	4a09      	ldr	r2, [pc, #36]	; (80001b0 <USART1_IRQHandler+0x50>)
 800018c:	5cd3      	ldrb	r3, [r2, r3]
 800018e:	2b0a      	cmp	r3, #10
 8000190:	d109      	bne.n	80001a6 <USART1_IRQHandler+0x46>
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	3b01      	subs	r3, #1
 8000196:	4a06      	ldr	r2, [pc, #24]	; (80001b0 <USART1_IRQHandler+0x50>)
 8000198:	5cd3      	ldrb	r3, [r2, r3]
 800019a:	2b0d      	cmp	r3, #13
 800019c:	d103      	bne.n	80001a6 <USART1_IRQHandler+0x46>
			  CommandReceived = true;
 800019e:	4b05      	ldr	r3, [pc, #20]	; (80001b4 <USART1_IRQHandler+0x54>)
 80001a0:	2201      	movs	r2, #1
 80001a2:	701a      	strb	r2, [r3, #0]
			  return;
 80001a4:	bf00      	nop
		  }
	  }
 }
 80001a6:	3708      	adds	r7, #8
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	40013800 	.word	0x40013800
 80001b0:	20000030 	.word	0x20000030
 80001b4:	2000002c 	.word	0x2000002c

080001b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001bc:	f000 fc22 	bl	8000a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001c0:	f000 f884 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c4:	f000 f99e 	bl	8000504 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001c8:	f000 f91a 	bl	8000400 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80001cc:	f000 f970 	bl	80004b0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80001d0:	f000 f8d8 	bl	8000384 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 80001d4:	4825      	ldr	r0, [pc, #148]	; (800026c <main+0xb4>)
 80001d6:	f000 fd1f 	bl	8000c18 <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80001da:	2108      	movs	r1, #8
 80001dc:	4824      	ldr	r0, [pc, #144]	; (8000270 <main+0xb8>)
 80001de:	f001 ffc9 	bl	8002174 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001e2:	f002 fdb3 	bl	8002d4c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BtnSem */
  BtnSemHandle = osSemaphoreNew(1, 1, &BtnSem_attributes);
 80001e6:	4a23      	ldr	r2, [pc, #140]	; (8000274 <main+0xbc>)
 80001e8:	2101      	movs	r1, #1
 80001ea:	2001      	movs	r0, #1
 80001ec:	f002 feec 	bl	8002fc8 <osSemaphoreNew>
 80001f0:	4603      	mov	r3, r0
 80001f2:	4a21      	ldr	r2, [pc, #132]	; (8000278 <main+0xc0>)
 80001f4:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Uart_Queue */
  Uart_QueueHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &Uart_Queue_attributes);
 80001f6:	4a21      	ldr	r2, [pc, #132]	; (800027c <main+0xc4>)
 80001f8:	2180      	movs	r1, #128	; 0x80
 80001fa:	200a      	movs	r0, #10
 80001fc:	f002 ff80 	bl	8003100 <osMessageQueueNew>
 8000200:	4603      	mov	r3, r0
 8000202:	4a1f      	ldr	r2, [pc, #124]	; (8000280 <main+0xc8>)
 8000204:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000206:	4a1f      	ldr	r2, [pc, #124]	; (8000284 <main+0xcc>)
 8000208:	2100      	movs	r1, #0
 800020a:	481f      	ldr	r0, [pc, #124]	; (8000288 <main+0xd0>)
 800020c:	f002 fe04 	bl	8002e18 <osThreadNew>
 8000210:	4603      	mov	r3, r0
 8000212:	4a1e      	ldr	r2, [pc, #120]	; (800028c <main+0xd4>)
 8000214:	6013      	str	r3, [r2, #0]

  /* creation of Led1Task */
  Led1TaskHandle = osThreadNew(StartLed1Task, NULL, &Led1Task_attributes);
 8000216:	4a1e      	ldr	r2, [pc, #120]	; (8000290 <main+0xd8>)
 8000218:	2100      	movs	r1, #0
 800021a:	481e      	ldr	r0, [pc, #120]	; (8000294 <main+0xdc>)
 800021c:	f002 fdfc 	bl	8002e18 <osThreadNew>
 8000220:	4603      	mov	r3, r0
 8000222:	4a1d      	ldr	r2, [pc, #116]	; (8000298 <main+0xe0>)
 8000224:	6013      	str	r3, [r2, #0]

  /* creation of Led3Task */
  Led3TaskHandle = osThreadNew(StartLed3Task, NULL, &Led3Task_attributes);
 8000226:	4a1d      	ldr	r2, [pc, #116]	; (800029c <main+0xe4>)
 8000228:	2100      	movs	r1, #0
 800022a:	481d      	ldr	r0, [pc, #116]	; (80002a0 <main+0xe8>)
 800022c:	f002 fdf4 	bl	8002e18 <osThreadNew>
 8000230:	4603      	mov	r3, r0
 8000232:	4a1c      	ldr	r2, [pc, #112]	; (80002a4 <main+0xec>)
 8000234:	6013      	str	r3, [r2, #0]

  /* creation of ReadBtnTask */
  ReadBtnTaskHandle = osThreadNew(StartReadBtnTask, NULL, &ReadBtnTask_attributes);
 8000236:	4a1c      	ldr	r2, [pc, #112]	; (80002a8 <main+0xf0>)
 8000238:	2100      	movs	r1, #0
 800023a:	481c      	ldr	r0, [pc, #112]	; (80002ac <main+0xf4>)
 800023c:	f002 fdec 	bl	8002e18 <osThreadNew>
 8000240:	4603      	mov	r3, r0
 8000242:	4a1b      	ldr	r2, [pc, #108]	; (80002b0 <main+0xf8>)
 8000244:	6013      	str	r3, [r2, #0]

  /* creation of ADC_Task */
  ADC_TaskHandle = osThreadNew(StartADC_Task, NULL, &ADC_Task_attributes);
 8000246:	4a1b      	ldr	r2, [pc, #108]	; (80002b4 <main+0xfc>)
 8000248:	2100      	movs	r1, #0
 800024a:	481b      	ldr	r0, [pc, #108]	; (80002b8 <main+0x100>)
 800024c:	f002 fde4 	bl	8002e18 <osThreadNew>
 8000250:	4603      	mov	r3, r0
 8000252:	4a1a      	ldr	r2, [pc, #104]	; (80002bc <main+0x104>)
 8000254:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(StartUART_Task, NULL, &UART_Task_attributes);
 8000256:	4a1a      	ldr	r2, [pc, #104]	; (80002c0 <main+0x108>)
 8000258:	2100      	movs	r1, #0
 800025a:	481a      	ldr	r0, [pc, #104]	; (80002c4 <main+0x10c>)
 800025c:	f002 fddc 	bl	8002e18 <osThreadNew>
 8000260:	4603      	mov	r3, r0
 8000262:	4a19      	ldr	r2, [pc, #100]	; (80002c8 <main+0x110>)
 8000264:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000266:	f002 fda3 	bl	8002db0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800026a:	e7fe      	b.n	800026a <main+0xb2>
 800026c:	20000094 	.word	0x20000094
 8000270:	200000c4 	.word	0x200000c4
 8000274:	08005d1c 	.word	0x08005d1c
 8000278:	200014e8 	.word	0x200014e8
 800027c:	08005d04 	.word	0x08005d04
 8000280:	20000f94 	.word	0x20000f94
 8000284:	08005c2c 	.word	0x08005c2c
 8000288:	080005b5 	.word	0x080005b5
 800028c:	20000154 	.word	0x20000154
 8000290:	08005c50 	.word	0x08005c50
 8000294:	080005c5 	.word	0x080005c5
 8000298:	200003b4 	.word	0x200003b4
 800029c:	08005c74 	.word	0x08005c74
 80002a0:	080005d5 	.word	0x080005d5
 80002a4:	20000614 	.word	0x20000614
 80002a8:	08005c98 	.word	0x08005c98
 80002ac:	080005e5 	.word	0x080005e5
 80002b0:	20000874 	.word	0x20000874
 80002b4:	08005cbc 	.word	0x08005cbc
 80002b8:	080005f5 	.word	0x080005f5
 80002bc:	20000ad4 	.word	0x20000ad4
 80002c0:	08005ce0 	.word	0x08005ce0
 80002c4:	08000605 	.word	0x08000605
 80002c8:	20000d34 	.word	0x20000d34

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b094      	sub	sp, #80	; 0x50
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002d6:	2228      	movs	r2, #40	; 0x28
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f005 fc58 	bl	8005b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	f107 0314 	add.w	r3, r7, #20
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
 80002ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002fc:	2301      	movs	r3, #1
 80002fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000304:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030a:	2301      	movs	r3, #1
 800030c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030e:	2302      	movs	r3, #2
 8000310:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000316:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000318:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800031c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000322:	4618      	mov	r0, r3
 8000324:	f001 f936 	bl	8001594 <HAL_RCC_OscConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800032e:	f000 f983 	bl	8000638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000332:	230f      	movs	r3, #15
 8000334:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000336:	2302      	movs	r3, #2
 8000338:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800033e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000342:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000348:	f107 0314 	add.w	r3, r7, #20
 800034c:	2102      	movs	r1, #2
 800034e:	4618      	mov	r0, r3
 8000350:	f001 fba2 	bl	8001a98 <HAL_RCC_ClockConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800035a:	f000 f96d 	bl	8000638 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800035e:	2302      	movs	r3, #2
 8000360:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000366:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	4618      	mov	r0, r3
 800036c:	f001 fd52 	bl	8001e14 <HAL_RCCEx_PeriphCLKConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000376:	f000 f95f 	bl	8000638 <Error_Handler>
  }
}
 800037a:	bf00      	nop
 800037c:	3750      	adds	r7, #80	; 0x50
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
	...

08000384 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000394:	4b18      	ldr	r3, [pc, #96]	; (80003f8 <MX_ADC1_Init+0x74>)
 8000396:	4a19      	ldr	r2, [pc, #100]	; (80003fc <MX_ADC1_Init+0x78>)
 8000398:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800039a:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <MX_ADC1_Init+0x74>)
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003a0:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <MX_ADC1_Init+0x74>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003a6:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <MX_ADC1_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ac:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <MX_ADC1_Init+0x74>)
 80003ae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003b4:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <MX_ADC1_Init+0x74>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80003ba:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <MX_ADC1_Init+0x74>)
 80003bc:	2201      	movs	r2, #1
 80003be:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003c0:	480d      	ldr	r0, [pc, #52]	; (80003f8 <MX_ADC1_Init+0x74>)
 80003c2:	f000 fb51 	bl	8000a68 <HAL_ADC_Init>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80003cc:	f000 f934 	bl	8000638 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003d0:	2301      	movs	r3, #1
 80003d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003d4:	2301      	movs	r3, #1
 80003d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003d8:	2300      	movs	r3, #0
 80003da:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	4619      	mov	r1, r3
 80003e0:	4805      	ldr	r0, [pc, #20]	; (80003f8 <MX_ADC1_Init+0x74>)
 80003e2:	f000 fcc7 	bl	8000d74 <HAL_ADC_ConfigChannel>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003ec:	f000 f924 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003f0:	bf00      	nop
 80003f2:	3710      	adds	r7, #16
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000094 	.word	0x20000094
 80003fc:	40012400 	.word	0x40012400

08000400 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b08a      	sub	sp, #40	; 0x28
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000406:	f107 0320 	add.w	r3, r7, #32
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
 800041c:	611a      	str	r2, [r3, #16]
 800041e:	615a      	str	r2, [r3, #20]
 8000420:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000422:	4b22      	ldr	r3, [pc, #136]	; (80004ac <MX_TIM2_Init+0xac>)
 8000424:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000428:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800042a:	4b20      	ldr	r3, [pc, #128]	; (80004ac <MX_TIM2_Init+0xac>)
 800042c:	2200      	movs	r2, #0
 800042e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000430:	4b1e      	ldr	r3, [pc, #120]	; (80004ac <MX_TIM2_Init+0xac>)
 8000432:	2200      	movs	r2, #0
 8000434:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4095;
 8000436:	4b1d      	ldr	r3, [pc, #116]	; (80004ac <MX_TIM2_Init+0xac>)
 8000438:	f640 72ff 	movw	r2, #4095	; 0xfff
 800043c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800043e:	4b1b      	ldr	r3, [pc, #108]	; (80004ac <MX_TIM2_Init+0xac>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000444:	4b19      	ldr	r3, [pc, #100]	; (80004ac <MX_TIM2_Init+0xac>)
 8000446:	2200      	movs	r2, #0
 8000448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800044a:	4818      	ldr	r0, [pc, #96]	; (80004ac <MX_TIM2_Init+0xac>)
 800044c:	f001 fe42 	bl	80020d4 <HAL_TIM_PWM_Init>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000456:	f000 f8ef 	bl	8000638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800045a:	2300      	movs	r3, #0
 800045c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800045e:	2300      	movs	r3, #0
 8000460:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000462:	f107 0320 	add.w	r3, r7, #32
 8000466:	4619      	mov	r1, r3
 8000468:	4810      	ldr	r0, [pc, #64]	; (80004ac <MX_TIM2_Init+0xac>)
 800046a:	f002 fb21 	bl	8002ab0 <HAL_TIMEx_MasterConfigSynchronization>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000474:	f000 f8e0 	bl	8000638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000478:	2360      	movs	r3, #96	; 0x60
 800047a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000480:	2300      	movs	r3, #0
 8000482:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000484:	2300      	movs	r3, #0
 8000486:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2208      	movs	r2, #8
 800048c:	4619      	mov	r1, r3
 800048e:	4807      	ldr	r0, [pc, #28]	; (80004ac <MX_TIM2_Init+0xac>)
 8000490:	f002 f81a 	bl	80024c8 <HAL_TIM_PWM_ConfigChannel>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800049a:	f000 f8cd 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800049e:	4803      	ldr	r0, [pc, #12]	; (80004ac <MX_TIM2_Init+0xac>)
 80004a0:	f000 f960 	bl	8000764 <HAL_TIM_MspPostInit>

}
 80004a4:	bf00      	nop
 80004a6:	3728      	adds	r7, #40	; 0x28
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	200000c4 	.word	0x200000c4

080004b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004b4:	4b11      	ldr	r3, [pc, #68]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004b6:	4a12      	ldr	r2, [pc, #72]	; (8000500 <MX_USART1_UART_Init+0x50>)
 80004b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004ba:	4b10      	ldr	r3, [pc, #64]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004ce:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004d4:	4b09      	ldr	r3, [pc, #36]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004d6:	220c      	movs	r2, #12
 80004d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004da:	4b08      	ldr	r3, [pc, #32]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004e6:	4805      	ldr	r0, [pc, #20]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004e8:	f002 fb52 	bl	8002b90 <HAL_UART_Init>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004f2:	f000 f8a1 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	2000010c 	.word	0x2000010c
 8000500:	40013800 	.word	0x40013800

08000504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000518:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <MX_GPIO_Init+0xa4>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a22      	ldr	r2, [pc, #136]	; (80005a8 <MX_GPIO_Init+0xa4>)
 800051e:	f043 0320 	orr.w	r3, r3, #32
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b20      	ldr	r3, [pc, #128]	; (80005a8 <MX_GPIO_Init+0xa4>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f003 0320 	and.w	r3, r3, #32
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000530:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <MX_GPIO_Init+0xa4>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a1c      	ldr	r2, [pc, #112]	; (80005a8 <MX_GPIO_Init+0xa4>)
 8000536:	f043 0304 	orr.w	r3, r3, #4
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <MX_GPIO_Init+0xa4>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f003 0304 	and.w	r3, r3, #4
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000548:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <MX_GPIO_Init+0xa4>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a16      	ldr	r2, [pc, #88]	; (80005a8 <MX_GPIO_Init+0xa4>)
 800054e:	f043 0308 	orr.w	r3, r3, #8
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <MX_GPIO_Init+0xa4>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f003 0308 	and.w	r3, r3, #8
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led1_Pin|Led3_Pin, GPIO_PIN_RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	2103      	movs	r1, #3
 8000564:	4811      	ldr	r0, [pc, #68]	; (80005ac <MX_GPIO_Init+0xa8>)
 8000566:	f000 fffd 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800056a:	2301      	movs	r3, #1
 800056c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000576:	f107 0310 	add.w	r3, r7, #16
 800057a:	4619      	mov	r1, r3
 800057c:	480c      	ldr	r0, [pc, #48]	; (80005b0 <MX_GPIO_Init+0xac>)
 800057e:	f000 fe6d 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : Led1_Pin Led3_Pin */
  GPIO_InitStruct.Pin = Led1_Pin|Led3_Pin;
 8000582:	2303      	movs	r3, #3
 8000584:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000586:	2301      	movs	r3, #1
 8000588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058e:	2302      	movs	r3, #2
 8000590:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000592:	f107 0310 	add.w	r3, r7, #16
 8000596:	4619      	mov	r1, r3
 8000598:	4804      	ldr	r0, [pc, #16]	; (80005ac <MX_GPIO_Init+0xa8>)
 800059a:	f000 fe5f 	bl	800125c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800059e:	bf00      	nop
 80005a0:	3720      	adds	r7, #32
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40010c00 	.word	0x40010c00
 80005b0:	40010800 	.word	0x40010800

080005b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005bc:	2001      	movs	r0, #1
 80005be:	f002 fcd5 	bl	8002f6c <osDelay>
 80005c2:	e7fb      	b.n	80005bc <StartDefaultTask+0x8>

080005c4 <StartLed1Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLed1Task */
void StartLed1Task(void *argument)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLed1Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f002 fccd 	bl	8002f6c <osDelay>
 80005d2:	e7fb      	b.n	80005cc <StartLed1Task+0x8>

080005d4 <StartLed3Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLed3Task */
void StartLed3Task(void *argument)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLed3Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005dc:	2001      	movs	r0, #1
 80005de:	f002 fcc5 	bl	8002f6c <osDelay>
 80005e2:	e7fb      	b.n	80005dc <StartLed3Task+0x8>

080005e4 <StartReadBtnTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadBtnTask */
void StartReadBtnTask(void *argument)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadBtnTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005ec:	2001      	movs	r0, #1
 80005ee:	f002 fcbd 	bl	8002f6c <osDelay>
 80005f2:	e7fb      	b.n	80005ec <StartReadBtnTask+0x8>

080005f4 <StartADC_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC_Task */
void StartADC_Task(void *argument)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005fc:	2001      	movs	r0, #1
 80005fe:	f002 fcb5 	bl	8002f6c <osDelay>
 8000602:	e7fb      	b.n	80005fc <StartADC_Task+0x8>

08000604 <StartUART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART_Task */
void StartUART_Task(void *argument)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUART_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800060c:	2001      	movs	r0, #1
 800060e:	f002 fcad 	bl	8002f6c <osDelay>
 8000612:	e7fb      	b.n	800060c <StartUART_Task+0x8>

08000614 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a04      	ldr	r2, [pc, #16]	; (8000634 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d101      	bne.n	800062a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000626:	f000 fa03 	bl	8000a30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40012c00 	.word	0x40012c00

08000638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063c:	b672      	cpsid	i
}
 800063e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000640:	e7fe      	b.n	8000640 <Error_Handler+0x8>
	...

08000644 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800064a:	4b18      	ldr	r3, [pc, #96]	; (80006ac <HAL_MspInit+0x68>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4a17      	ldr	r2, [pc, #92]	; (80006ac <HAL_MspInit+0x68>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6193      	str	r3, [r2, #24]
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <HAL_MspInit+0x68>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <HAL_MspInit+0x68>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	4a11      	ldr	r2, [pc, #68]	; (80006ac <HAL_MspInit+0x68>)
 8000668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066c:	61d3      	str	r3, [r2, #28]
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <HAL_MspInit+0x68>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	210f      	movs	r1, #15
 800067e:	f06f 0001 	mvn.w	r0, #1
 8000682:	f000 fdc0 	bl	8001206 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <HAL_MspInit+0x6c>)
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <HAL_MspInit+0x6c>)
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40010000 	.word	0x40010000

080006b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a14      	ldr	r2, [pc, #80]	; (8000720 <HAL_ADC_MspInit+0x6c>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d121      	bne.n	8000718 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <HAL_ADC_MspInit+0x70>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a12      	ldr	r2, [pc, #72]	; (8000724 <HAL_ADC_MspInit+0x70>)
 80006da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b10      	ldr	r3, [pc, #64]	; (8000724 <HAL_ADC_MspInit+0x70>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ec:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <HAL_ADC_MspInit+0x70>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a0c      	ldr	r2, [pc, #48]	; (8000724 <HAL_ADC_MspInit+0x70>)
 80006f2:	f043 0304 	orr.w	r3, r3, #4
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <HAL_ADC_MspInit+0x70>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000704:	2302      	movs	r3, #2
 8000706:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000708:	2303      	movs	r3, #3
 800070a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	4619      	mov	r1, r3
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <HAL_ADC_MspInit+0x74>)
 8000714:	f000 fda2 	bl	800125c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000718:	bf00      	nop
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40012400 	.word	0x40012400
 8000724:	40021000 	.word	0x40021000
 8000728:	40010800 	.word	0x40010800

0800072c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800073c:	d10b      	bne.n	8000756 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <HAL_TIM_PWM_MspInit+0x34>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	4a07      	ldr	r2, [pc, #28]	; (8000760 <HAL_TIM_PWM_MspInit+0x34>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	61d3      	str	r3, [r2, #28]
 800074a:	4b05      	ldr	r3, [pc, #20]	; (8000760 <HAL_TIM_PWM_MspInit+0x34>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000756:	bf00      	nop
 8000758:	3714      	adds	r7, #20
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	40021000 	.word	0x40021000

08000764 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000782:	d12a      	bne.n	80007da <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <HAL_TIM_MspPostInit+0x80>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a16      	ldr	r2, [pc, #88]	; (80007e4 <HAL_TIM_MspPostInit+0x80>)
 800078a:	f043 0308 	orr.w	r3, r3, #8
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <HAL_TIM_MspPostInit+0x80>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0308 	and.w	r3, r3, #8
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800079c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2302      	movs	r3, #2
 80007a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	4619      	mov	r1, r3
 80007b0:	480d      	ldr	r0, [pc, #52]	; (80007e8 <HAL_TIM_MspPostInit+0x84>)
 80007b2:	f000 fd53 	bl	800125c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <HAL_TIM_MspPostInit+0x88>)
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	61fb      	str	r3, [r7, #28]
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80007c2:	61fb      	str	r3, [r7, #28]
 80007c4:	69fb      	ldr	r3, [r7, #28]
 80007c6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80007ca:	61fb      	str	r3, [r7, #28]
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007d2:	61fb      	str	r3, [r7, #28]
 80007d4:	4a05      	ldr	r2, [pc, #20]	; (80007ec <HAL_TIM_MspPostInit+0x88>)
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80007da:	bf00      	nop
 80007dc:	3720      	adds	r7, #32
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40010c00 	.word	0x40010c00
 80007ec:	40010000 	.word	0x40010000

080007f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a1c      	ldr	r2, [pc, #112]	; (800087c <HAL_UART_MspInit+0x8c>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d131      	bne.n	8000874 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <HAL_UART_MspInit+0x90>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a1a      	ldr	r2, [pc, #104]	; (8000880 <HAL_UART_MspInit+0x90>)
 8000816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <HAL_UART_MspInit+0x90>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <HAL_UART_MspInit+0x90>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a14      	ldr	r2, [pc, #80]	; (8000880 <HAL_UART_MspInit+0x90>)
 800082e:	f043 0304 	orr.w	r3, r3, #4
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_UART_MspInit+0x90>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f003 0304 	and.w	r3, r3, #4
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000844:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800084a:	2303      	movs	r3, #3
 800084c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0310 	add.w	r3, r7, #16
 8000852:	4619      	mov	r1, r3
 8000854:	480b      	ldr	r0, [pc, #44]	; (8000884 <HAL_UART_MspInit+0x94>)
 8000856:	f000 fd01 	bl	800125c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800085a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800085e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	4619      	mov	r1, r3
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <HAL_UART_MspInit+0x94>)
 8000870:	f000 fcf4 	bl	800125c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000874:	bf00      	nop
 8000876:	3720      	adds	r7, #32
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40013800 	.word	0x40013800
 8000880:	40021000 	.word	0x40021000
 8000884:	40010800 	.word	0x40010800

08000888 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08c      	sub	sp, #48	; 0x30
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000890:	2300      	movs	r3, #0
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000898:	2300      	movs	r3, #0
 800089a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800089e:	4b2e      	ldr	r3, [pc, #184]	; (8000958 <HAL_InitTick+0xd0>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	4a2d      	ldr	r2, [pc, #180]	; (8000958 <HAL_InitTick+0xd0>)
 80008a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008a8:	6193      	str	r3, [r2, #24]
 80008aa:	4b2b      	ldr	r3, [pc, #172]	; (8000958 <HAL_InitTick+0xd0>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008b6:	f107 020c 	add.w	r2, r7, #12
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f001 fa59 	bl	8001d78 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008c6:	f001 fa43 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 80008ca:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ce:	4a23      	ldr	r2, [pc, #140]	; (800095c <HAL_InitTick+0xd4>)
 80008d0:	fba2 2303 	umull	r2, r3, r2, r3
 80008d4:	0c9b      	lsrs	r3, r3, #18
 80008d6:	3b01      	subs	r3, #1
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008da:	4b21      	ldr	r3, [pc, #132]	; (8000960 <HAL_InitTick+0xd8>)
 80008dc:	4a21      	ldr	r2, [pc, #132]	; (8000964 <HAL_InitTick+0xdc>)
 80008de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008e0:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <HAL_InitTick+0xd8>)
 80008e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008e6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008e8:	4a1d      	ldr	r2, [pc, #116]	; (8000960 <HAL_InitTick+0xd8>)
 80008ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ec:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <HAL_InitTick+0xd8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <HAL_InitTick+0xd8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <HAL_InitTick+0xd8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000900:	4817      	ldr	r0, [pc, #92]	; (8000960 <HAL_InitTick+0xd8>)
 8000902:	f001 fb3d 	bl	8001f80 <HAL_TIM_Base_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800090c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000910:	2b00      	cmp	r3, #0
 8000912:	d11b      	bne.n	800094c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000914:	4812      	ldr	r0, [pc, #72]	; (8000960 <HAL_InitTick+0xd8>)
 8000916:	f001 fb8b 	bl	8002030 <HAL_TIM_Base_Start_IT>
 800091a:	4603      	mov	r3, r0
 800091c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000920:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000924:	2b00      	cmp	r3, #0
 8000926:	d111      	bne.n	800094c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000928:	2019      	movs	r0, #25
 800092a:	f000 fc88 	bl	800123e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b0f      	cmp	r3, #15
 8000932:	d808      	bhi.n	8000946 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000934:	2200      	movs	r2, #0
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	2019      	movs	r0, #25
 800093a:	f000 fc64 	bl	8001206 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <HAL_InitTick+0xe0>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	e002      	b.n	800094c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800094c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000950:	4618      	mov	r0, r3
 8000952:	3730      	adds	r7, #48	; 0x30
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40021000 	.word	0x40021000
 800095c:	431bde83 	.word	0x431bde83
 8000960:	2000153c 	.word	0x2000153c
 8000964:	40012c00 	.word	0x40012c00
 8000968:	20000004 	.word	0x20000004

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <NMI_Handler+0x4>

08000972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <MemManage_Handler+0x4>

0800097e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <UsageFault_Handler+0x4>

0800098a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
	...

08000998 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <TIM1_UP_IRQHandler+0x10>)
 800099e:	f001 fc8b 	bl	80022b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000153c 	.word	0x2000153c

080009ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009b8:	f7ff fff8 	bl	80009ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009bc:	480b      	ldr	r0, [pc, #44]	; (80009ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009be:	490c      	ldr	r1, [pc, #48]	; (80009f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009c0:	4a0c      	ldr	r2, [pc, #48]	; (80009f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c4:	e002      	b.n	80009cc <LoopCopyDataInit>

080009c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ca:	3304      	adds	r3, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d0:	d3f9      	bcc.n	80009c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d2:	4a09      	ldr	r2, [pc, #36]	; (80009f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009d4:	4c09      	ldr	r4, [pc, #36]	; (80009fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d8:	e001      	b.n	80009de <LoopFillZerobss>

080009da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009dc:	3204      	adds	r2, #4

080009de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e0:	d3fb      	bcc.n	80009da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009e2:	f005 f8a3 	bl	8005b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009e6:	f7ff fbe7 	bl	80001b8 <main>
  bx lr
 80009ea:	4770      	bx	lr
  ldr r0, =_sdata
 80009ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009f4:	08005d60 	.word	0x08005d60
  ldr r2, =_sbss
 80009f8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009fc:	20002ed0 	.word	0x20002ed0

08000a00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a00:	e7fe      	b.n	8000a00 <ADC1_2_IRQHandler>
	...

08000a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_Init+0x28>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <HAL_Init+0x28>)
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a14:	2003      	movs	r0, #3
 8000a16:	f000 fbeb 	bl	80011f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1a:	200f      	movs	r0, #15
 8000a1c:	f7ff ff34 	bl	8000888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a20:	f7ff fe10 	bl	8000644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40022000 	.word	0x40022000

08000a30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <HAL_IncTick+0x1c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <HAL_IncTick+0x20>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4413      	add	r3, r2
 8000a40:	4a03      	ldr	r2, [pc, #12]	; (8000a50 <HAL_IncTick+0x20>)
 8000a42:	6013      	str	r3, [r2, #0]
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	20001584 	.word	0x20001584

08000a54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return uwTick;
 8000a58:	4b02      	ldr	r3, [pc, #8]	; (8000a64 <HAL_GetTick+0x10>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr
 8000a64:	20001584 	.word	0x20001584

08000a68 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d101      	bne.n	8000a8a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e0be      	b.n	8000c08 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d109      	bne.n	8000aac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff fe04 	bl	80006b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f000 fab3 	bl	8001018 <ADC_ConversionStop_Disable>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aba:	f003 0310 	and.w	r3, r3, #16
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f040 8099 	bne.w	8000bf6 <HAL_ADC_Init+0x18e>
 8000ac4:	7dfb      	ldrb	r3, [r7, #23]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f040 8095 	bne.w	8000bf6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ad4:	f023 0302 	bic.w	r3, r3, #2
 8000ad8:	f043 0202 	orr.w	r2, r3, #2
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ae8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	7b1b      	ldrb	r3, [r3, #12]
 8000aee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000af0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b00:	d003      	beq.n	8000b0a <HAL_ADC_Init+0xa2>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d102      	bne.n	8000b10 <HAL_ADC_Init+0xa8>
 8000b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b0e:	e000      	b.n	8000b12 <HAL_ADC_Init+0xaa>
 8000b10:	2300      	movs	r3, #0
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	7d1b      	ldrb	r3, [r3, #20]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d119      	bne.n	8000b54 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	7b1b      	ldrb	r3, [r3, #12]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d109      	bne.n	8000b3c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	035a      	lsls	r2, r3, #13
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	e00b      	b.n	8000b54 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b40:	f043 0220 	orr.w	r2, r3, #32
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b4c:	f043 0201 	orr.w	r2, r3, #1
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	430a      	orrs	r2, r1
 8000b66:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	689a      	ldr	r2, [r3, #8]
 8000b6e:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <HAL_ADC_Init+0x1a8>)
 8000b70:	4013      	ands	r3, r2
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	6812      	ldr	r2, [r2, #0]
 8000b76:	68b9      	ldr	r1, [r7, #8]
 8000b78:	430b      	orrs	r3, r1
 8000b7a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b84:	d003      	beq.n	8000b8e <HAL_ADC_Init+0x126>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d104      	bne.n	8000b98 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	051b      	lsls	r3, r3, #20
 8000b96:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b9e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <HAL_ADC_Init+0x1ac>)
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d10b      	bne.n	8000bd4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc6:	f023 0303 	bic.w	r3, r3, #3
 8000bca:	f043 0201 	orr.w	r2, r3, #1
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bd2:	e018      	b.n	8000c06 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd8:	f023 0312 	bic.w	r3, r3, #18
 8000bdc:	f043 0210 	orr.w	r2, r3, #16
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be8:	f043 0201 	orr.w	r2, r3, #1
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bf4:	e007      	b.n	8000c06 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfa:	f043 0210 	orr.w	r2, r3, #16
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	ffe1f7fd 	.word	0xffe1f7fd
 8000c14:	ff1f0efe 	.word	0xff1f0efe

08000c18 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c20:	2300      	movs	r3, #0
 8000c22:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d101      	bne.n	8000c32 <HAL_ADC_Start+0x1a>
 8000c2e:	2302      	movs	r3, #2
 8000c30:	e098      	b.n	8000d64 <HAL_ADC_Start+0x14c>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2201      	movs	r2, #1
 8000c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f000 f992 	bl	8000f64 <ADC_Enable>
 8000c40:	4603      	mov	r3, r0
 8000c42:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f040 8087 	bne.w	8000d5a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c54:	f023 0301 	bic.w	r3, r3, #1
 8000c58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a41      	ldr	r2, [pc, #260]	; (8000d6c <HAL_ADC_Start+0x154>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d105      	bne.n	8000c76 <HAL_ADC_Start+0x5e>
 8000c6a:	4b41      	ldr	r3, [pc, #260]	; (8000d70 <HAL_ADC_Start+0x158>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d115      	bne.n	8000ca2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c7a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d026      	beq.n	8000cde <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c98:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ca0:	e01d      	b.n	8000cde <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a2f      	ldr	r2, [pc, #188]	; (8000d70 <HAL_ADC_Start+0x158>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d004      	beq.n	8000cc2 <HAL_ADC_Start+0xaa>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a2b      	ldr	r2, [pc, #172]	; (8000d6c <HAL_ADC_Start+0x154>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d10d      	bne.n	8000cde <HAL_ADC_Start+0xc6>
 8000cc2:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <HAL_ADC_Start+0x158>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d007      	beq.n	8000cde <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d006      	beq.n	8000cf8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cee:	f023 0206 	bic.w	r2, r3, #6
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cf6:	e002      	b.n	8000cfe <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f06f 0202 	mvn.w	r2, #2
 8000d0e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d1a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d1e:	d113      	bne.n	8000d48 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d24:	4a11      	ldr	r2, [pc, #68]	; (8000d6c <HAL_ADC_Start+0x154>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d105      	bne.n	8000d36 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_ADC_Start+0x158>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d108      	bne.n	8000d48 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	e00c      	b.n	8000d62 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	689a      	ldr	r2, [r3, #8]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	e003      	b.n	8000d62 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40012800 	.word	0x40012800
 8000d70:	40012400 	.word	0x40012400

08000d74 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d101      	bne.n	8000d94 <HAL_ADC_ConfigChannel+0x20>
 8000d90:	2302      	movs	r3, #2
 8000d92:	e0dc      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x1da>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2201      	movs	r2, #1
 8000d98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b06      	cmp	r3, #6
 8000da2:	d81c      	bhi.n	8000dde <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	4613      	mov	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	3b05      	subs	r3, #5
 8000db6:	221f      	movs	r2, #31
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	4019      	ands	r1, r3
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	6818      	ldr	r0, [r3, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	4413      	add	r3, r2
 8000dce:	3b05      	subs	r3, #5
 8000dd0:	fa00 f203 	lsl.w	r2, r0, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	635a      	str	r2, [r3, #52]	; 0x34
 8000ddc:	e03c      	b.n	8000e58 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b0c      	cmp	r3, #12
 8000de4:	d81c      	bhi.n	8000e20 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	4613      	mov	r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	3b23      	subs	r3, #35	; 0x23
 8000df8:	221f      	movs	r2, #31
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	4019      	ands	r1, r3
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	6818      	ldr	r0, [r3, #0]
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4413      	add	r3, r2
 8000e10:	3b23      	subs	r3, #35	; 0x23
 8000e12:	fa00 f203 	lsl.w	r2, r0, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e1e:	e01b      	b.n	8000e58 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685a      	ldr	r2, [r3, #4]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4413      	add	r3, r2
 8000e30:	3b41      	subs	r3, #65	; 0x41
 8000e32:	221f      	movs	r2, #31
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	4019      	ands	r1, r3
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	6818      	ldr	r0, [r3, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	4613      	mov	r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4413      	add	r3, r2
 8000e4a:	3b41      	subs	r3, #65	; 0x41
 8000e4c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	430a      	orrs	r2, r1
 8000e56:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b09      	cmp	r3, #9
 8000e5e:	d91c      	bls.n	8000e9a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	68d9      	ldr	r1, [r3, #12]
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4413      	add	r3, r2
 8000e70:	3b1e      	subs	r3, #30
 8000e72:	2207      	movs	r2, #7
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	4019      	ands	r1, r3
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	6898      	ldr	r0, [r3, #8]
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4613      	mov	r3, r2
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	4413      	add	r3, r2
 8000e8a:	3b1e      	subs	r3, #30
 8000e8c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	430a      	orrs	r2, r1
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	e019      	b.n	8000ece <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	6919      	ldr	r1, [r3, #16]
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	4413      	add	r3, r2
 8000eaa:	2207      	movs	r2, #7
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	4019      	ands	r1, r3
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	6898      	ldr	r0, [r3, #8]
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4413      	add	r3, r2
 8000ec2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b10      	cmp	r3, #16
 8000ed4:	d003      	beq.n	8000ede <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000eda:	2b11      	cmp	r3, #17
 8000edc:	d132      	bne.n	8000f44 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a1d      	ldr	r2, [pc, #116]	; (8000f58 <HAL_ADC_ConfigChannel+0x1e4>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d125      	bne.n	8000f34 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d126      	bne.n	8000f44 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f04:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b10      	cmp	r3, #16
 8000f0c:	d11a      	bne.n	8000f44 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <HAL_ADC_ConfigChannel+0x1e8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a13      	ldr	r2, [pc, #76]	; (8000f60 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f14:	fba2 2303 	umull	r2, r3, r2, r3
 8000f18:	0c9a      	lsrs	r2, r3, #18
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f24:	e002      	b.n	8000f2c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d1f9      	bne.n	8000f26 <HAL_ADC_ConfigChannel+0x1b2>
 8000f32:	e007      	b.n	8000f44 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f38:	f043 0220 	orr.w	r2, r3, #32
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	40012400 	.word	0x40012400
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	431bde83 	.word	0x431bde83

08000f64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d040      	beq.n	8001004 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f042 0201 	orr.w	r2, r2, #1
 8000f90:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f92:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <ADC_Enable+0xac>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a1f      	ldr	r2, [pc, #124]	; (8001014 <ADC_Enable+0xb0>)
 8000f98:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9c:	0c9b      	lsrs	r3, r3, #18
 8000f9e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fa0:	e002      	b.n	8000fa8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1f9      	bne.n	8000fa2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fae:	f7ff fd51 	bl	8000a54 <HAL_GetTick>
 8000fb2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000fb4:	e01f      	b.n	8000ff6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000fb6:	f7ff fd4d 	bl	8000a54 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d918      	bls.n	8000ff6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d011      	beq.n	8000ff6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd6:	f043 0210 	orr.w	r2, r3, #16
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe2:	f043 0201 	orr.w	r2, r3, #1
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e007      	b.n	8001006 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b01      	cmp	r3, #1
 8001002:	d1d8      	bne.n	8000fb6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000000 	.word	0x20000000
 8001014:	431bde83 	.word	0x431bde83

08001018 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	2b01      	cmp	r3, #1
 8001030:	d12e      	bne.n	8001090 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f022 0201 	bic.w	r2, r2, #1
 8001040:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001042:	f7ff fd07 	bl	8000a54 <HAL_GetTick>
 8001046:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001048:	e01b      	b.n	8001082 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800104a:	f7ff fd03 	bl	8000a54 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d914      	bls.n	8001082 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b01      	cmp	r3, #1
 8001064:	d10d      	bne.n	8001082 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106a:	f043 0210 	orr.w	r2, r3, #16
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001076:	f043 0201 	orr.w	r2, r3, #1
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e007      	b.n	8001092 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	2b01      	cmp	r3, #1
 800108e:	d0dc      	beq.n	800104a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b8:	4013      	ands	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ce:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	60d3      	str	r3, [r2, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <__NVIC_GetPriorityGrouping+0x18>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	f003 0307 	and.w	r3, r3, #7
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	db0b      	blt.n	800112a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 021f 	and.w	r2, r3, #31
 8001118:	4906      	ldr	r1, [pc, #24]	; (8001134 <__NVIC_EnableIRQ+0x34>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	095b      	lsrs	r3, r3, #5
 8001120:	2001      	movs	r0, #1
 8001122:	fa00 f202 	lsl.w	r2, r0, r2
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100

08001138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	2b00      	cmp	r3, #0
 800114a:	db0a      	blt.n	8001162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	b2da      	uxtb	r2, r3
 8001150:	490c      	ldr	r1, [pc, #48]	; (8001184 <__NVIC_SetPriority+0x4c>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	0112      	lsls	r2, r2, #4
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	440b      	add	r3, r1
 800115c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001160:	e00a      	b.n	8001178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4908      	ldr	r1, [pc, #32]	; (8001188 <__NVIC_SetPriority+0x50>)
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	3b04      	subs	r3, #4
 8001170:	0112      	lsls	r2, r2, #4
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	440b      	add	r3, r1
 8001176:	761a      	strb	r2, [r3, #24]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000e100 	.word	0xe000e100
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f1c3 0307 	rsb	r3, r3, #7
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	bf28      	it	cs
 80011aa:	2304      	movcs	r3, #4
 80011ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3304      	adds	r3, #4
 80011b2:	2b06      	cmp	r3, #6
 80011b4:	d902      	bls.n	80011bc <NVIC_EncodePriority+0x30>
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3b03      	subs	r3, #3
 80011ba:	e000      	b.n	80011be <NVIC_EncodePriority+0x32>
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	f04f 32ff 	mov.w	r2, #4294967295
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43da      	mvns	r2, r3
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	401a      	ands	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d4:	f04f 31ff 	mov.w	r1, #4294967295
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa01 f303 	lsl.w	r3, r1, r3
 80011de:	43d9      	mvns	r1, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	4313      	orrs	r3, r2
         );
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3724      	adds	r7, #36	; 0x24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr

080011f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff4f 	bl	800109c <__NVIC_SetPriorityGrouping>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001218:	f7ff ff64 	bl	80010e4 <__NVIC_GetPriorityGrouping>
 800121c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f7ff ffb2 	bl	800118c <NVIC_EncodePriority>
 8001228:	4602      	mov	r2, r0
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff81 	bl	8001138 <__NVIC_SetPriority>
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff57 	bl	8001100 <__NVIC_EnableIRQ>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800125c:	b480      	push	{r7}
 800125e:	b08b      	sub	sp, #44	; 0x2c
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126e:	e169      	b.n	8001544 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001270:	2201      	movs	r2, #1
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	69fa      	ldr	r2, [r7, #28]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	429a      	cmp	r2, r3
 800128a:	f040 8158 	bne.w	800153e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	4a9a      	ldr	r2, [pc, #616]	; (80014fc <HAL_GPIO_Init+0x2a0>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d05e      	beq.n	8001356 <HAL_GPIO_Init+0xfa>
 8001298:	4a98      	ldr	r2, [pc, #608]	; (80014fc <HAL_GPIO_Init+0x2a0>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d875      	bhi.n	800138a <HAL_GPIO_Init+0x12e>
 800129e:	4a98      	ldr	r2, [pc, #608]	; (8001500 <HAL_GPIO_Init+0x2a4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d058      	beq.n	8001356 <HAL_GPIO_Init+0xfa>
 80012a4:	4a96      	ldr	r2, [pc, #600]	; (8001500 <HAL_GPIO_Init+0x2a4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d86f      	bhi.n	800138a <HAL_GPIO_Init+0x12e>
 80012aa:	4a96      	ldr	r2, [pc, #600]	; (8001504 <HAL_GPIO_Init+0x2a8>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d052      	beq.n	8001356 <HAL_GPIO_Init+0xfa>
 80012b0:	4a94      	ldr	r2, [pc, #592]	; (8001504 <HAL_GPIO_Init+0x2a8>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d869      	bhi.n	800138a <HAL_GPIO_Init+0x12e>
 80012b6:	4a94      	ldr	r2, [pc, #592]	; (8001508 <HAL_GPIO_Init+0x2ac>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d04c      	beq.n	8001356 <HAL_GPIO_Init+0xfa>
 80012bc:	4a92      	ldr	r2, [pc, #584]	; (8001508 <HAL_GPIO_Init+0x2ac>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d863      	bhi.n	800138a <HAL_GPIO_Init+0x12e>
 80012c2:	4a92      	ldr	r2, [pc, #584]	; (800150c <HAL_GPIO_Init+0x2b0>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d046      	beq.n	8001356 <HAL_GPIO_Init+0xfa>
 80012c8:	4a90      	ldr	r2, [pc, #576]	; (800150c <HAL_GPIO_Init+0x2b0>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d85d      	bhi.n	800138a <HAL_GPIO_Init+0x12e>
 80012ce:	2b12      	cmp	r3, #18
 80012d0:	d82a      	bhi.n	8001328 <HAL_GPIO_Init+0xcc>
 80012d2:	2b12      	cmp	r3, #18
 80012d4:	d859      	bhi.n	800138a <HAL_GPIO_Init+0x12e>
 80012d6:	a201      	add	r2, pc, #4	; (adr r2, 80012dc <HAL_GPIO_Init+0x80>)
 80012d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012dc:	08001357 	.word	0x08001357
 80012e0:	08001331 	.word	0x08001331
 80012e4:	08001343 	.word	0x08001343
 80012e8:	08001385 	.word	0x08001385
 80012ec:	0800138b 	.word	0x0800138b
 80012f0:	0800138b 	.word	0x0800138b
 80012f4:	0800138b 	.word	0x0800138b
 80012f8:	0800138b 	.word	0x0800138b
 80012fc:	0800138b 	.word	0x0800138b
 8001300:	0800138b 	.word	0x0800138b
 8001304:	0800138b 	.word	0x0800138b
 8001308:	0800138b 	.word	0x0800138b
 800130c:	0800138b 	.word	0x0800138b
 8001310:	0800138b 	.word	0x0800138b
 8001314:	0800138b 	.word	0x0800138b
 8001318:	0800138b 	.word	0x0800138b
 800131c:	0800138b 	.word	0x0800138b
 8001320:	08001339 	.word	0x08001339
 8001324:	0800134d 	.word	0x0800134d
 8001328:	4a79      	ldr	r2, [pc, #484]	; (8001510 <HAL_GPIO_Init+0x2b4>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d013      	beq.n	8001356 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800132e:	e02c      	b.n	800138a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	623b      	str	r3, [r7, #32]
          break;
 8001336:	e029      	b.n	800138c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	3304      	adds	r3, #4
 800133e:	623b      	str	r3, [r7, #32]
          break;
 8001340:	e024      	b.n	800138c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	3308      	adds	r3, #8
 8001348:	623b      	str	r3, [r7, #32]
          break;
 800134a:	e01f      	b.n	800138c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	330c      	adds	r3, #12
 8001352:	623b      	str	r3, [r7, #32]
          break;
 8001354:	e01a      	b.n	800138c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d102      	bne.n	8001364 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800135e:	2304      	movs	r3, #4
 8001360:	623b      	str	r3, [r7, #32]
          break;
 8001362:	e013      	b.n	800138c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d105      	bne.n	8001378 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800136c:	2308      	movs	r3, #8
 800136e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69fa      	ldr	r2, [r7, #28]
 8001374:	611a      	str	r2, [r3, #16]
          break;
 8001376:	e009      	b.n	800138c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001378:	2308      	movs	r3, #8
 800137a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	69fa      	ldr	r2, [r7, #28]
 8001380:	615a      	str	r2, [r3, #20]
          break;
 8001382:	e003      	b.n	800138c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
          break;
 8001388:	e000      	b.n	800138c <HAL_GPIO_Init+0x130>
          break;
 800138a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	2bff      	cmp	r3, #255	; 0xff
 8001390:	d801      	bhi.n	8001396 <HAL_GPIO_Init+0x13a>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	e001      	b.n	800139a <HAL_GPIO_Init+0x13e>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3304      	adds	r3, #4
 800139a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2bff      	cmp	r3, #255	; 0xff
 80013a0:	d802      	bhi.n	80013a8 <HAL_GPIO_Init+0x14c>
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	e002      	b.n	80013ae <HAL_GPIO_Init+0x152>
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	3b08      	subs	r3, #8
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	210f      	movs	r1, #15
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	fa01 f303 	lsl.w	r3, r1, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	401a      	ands	r2, r3
 80013c0:	6a39      	ldr	r1, [r7, #32]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	fa01 f303 	lsl.w	r3, r1, r3
 80013c8:	431a      	orrs	r2, r3
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 80b1 	beq.w	800153e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013dc:	4b4d      	ldr	r3, [pc, #308]	; (8001514 <HAL_GPIO_Init+0x2b8>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a4c      	ldr	r2, [pc, #304]	; (8001514 <HAL_GPIO_Init+0x2b8>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b4a      	ldr	r3, [pc, #296]	; (8001514 <HAL_GPIO_Init+0x2b8>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013f4:	4a48      	ldr	r2, [pc, #288]	; (8001518 <HAL_GPIO_Init+0x2bc>)
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	089b      	lsrs	r3, r3, #2
 80013fa:	3302      	adds	r3, #2
 80013fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001400:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	220f      	movs	r2, #15
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	4013      	ands	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a40      	ldr	r2, [pc, #256]	; (800151c <HAL_GPIO_Init+0x2c0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d013      	beq.n	8001448 <HAL_GPIO_Init+0x1ec>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a3f      	ldr	r2, [pc, #252]	; (8001520 <HAL_GPIO_Init+0x2c4>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d00d      	beq.n	8001444 <HAL_GPIO_Init+0x1e8>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a3e      	ldr	r2, [pc, #248]	; (8001524 <HAL_GPIO_Init+0x2c8>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d007      	beq.n	8001440 <HAL_GPIO_Init+0x1e4>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a3d      	ldr	r2, [pc, #244]	; (8001528 <HAL_GPIO_Init+0x2cc>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d101      	bne.n	800143c <HAL_GPIO_Init+0x1e0>
 8001438:	2303      	movs	r3, #3
 800143a:	e006      	b.n	800144a <HAL_GPIO_Init+0x1ee>
 800143c:	2304      	movs	r3, #4
 800143e:	e004      	b.n	800144a <HAL_GPIO_Init+0x1ee>
 8001440:	2302      	movs	r3, #2
 8001442:	e002      	b.n	800144a <HAL_GPIO_Init+0x1ee>
 8001444:	2301      	movs	r3, #1
 8001446:	e000      	b.n	800144a <HAL_GPIO_Init+0x1ee>
 8001448:	2300      	movs	r3, #0
 800144a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144c:	f002 0203 	and.w	r2, r2, #3
 8001450:	0092      	lsls	r2, r2, #2
 8001452:	4093      	lsls	r3, r2
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	4313      	orrs	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800145a:	492f      	ldr	r1, [pc, #188]	; (8001518 <HAL_GPIO_Init+0x2bc>)
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	3302      	adds	r3, #2
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d006      	beq.n	8001482 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001474:	4b2d      	ldr	r3, [pc, #180]	; (800152c <HAL_GPIO_Init+0x2d0>)
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	492c      	ldr	r1, [pc, #176]	; (800152c <HAL_GPIO_Init+0x2d0>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	608b      	str	r3, [r1, #8]
 8001480:	e006      	b.n	8001490 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001482:	4b2a      	ldr	r3, [pc, #168]	; (800152c <HAL_GPIO_Init+0x2d0>)
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	43db      	mvns	r3, r3
 800148a:	4928      	ldr	r1, [pc, #160]	; (800152c <HAL_GPIO_Init+0x2d0>)
 800148c:	4013      	ands	r3, r2
 800148e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d006      	beq.n	80014aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800149c:	4b23      	ldr	r3, [pc, #140]	; (800152c <HAL_GPIO_Init+0x2d0>)
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	4922      	ldr	r1, [pc, #136]	; (800152c <HAL_GPIO_Init+0x2d0>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	60cb      	str	r3, [r1, #12]
 80014a8:	e006      	b.n	80014b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014aa:	4b20      	ldr	r3, [pc, #128]	; (800152c <HAL_GPIO_Init+0x2d0>)
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	491e      	ldr	r1, [pc, #120]	; (800152c <HAL_GPIO_Init+0x2d0>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d006      	beq.n	80014d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014c4:	4b19      	ldr	r3, [pc, #100]	; (800152c <HAL_GPIO_Init+0x2d0>)
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	4918      	ldr	r1, [pc, #96]	; (800152c <HAL_GPIO_Init+0x2d0>)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]
 80014d0:	e006      	b.n	80014e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014d2:	4b16      	ldr	r3, [pc, #88]	; (800152c <HAL_GPIO_Init+0x2d0>)
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	43db      	mvns	r3, r3
 80014da:	4914      	ldr	r1, [pc, #80]	; (800152c <HAL_GPIO_Init+0x2d0>)
 80014dc:	4013      	ands	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d021      	beq.n	8001530 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <HAL_GPIO_Init+0x2d0>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	490e      	ldr	r1, [pc, #56]	; (800152c <HAL_GPIO_Init+0x2d0>)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	600b      	str	r3, [r1, #0]
 80014f8:	e021      	b.n	800153e <HAL_GPIO_Init+0x2e2>
 80014fa:	bf00      	nop
 80014fc:	10320000 	.word	0x10320000
 8001500:	10310000 	.word	0x10310000
 8001504:	10220000 	.word	0x10220000
 8001508:	10210000 	.word	0x10210000
 800150c:	10120000 	.word	0x10120000
 8001510:	10110000 	.word	0x10110000
 8001514:	40021000 	.word	0x40021000
 8001518:	40010000 	.word	0x40010000
 800151c:	40010800 	.word	0x40010800
 8001520:	40010c00 	.word	0x40010c00
 8001524:	40011000 	.word	0x40011000
 8001528:	40011400 	.word	0x40011400
 800152c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_GPIO_Init+0x304>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	43db      	mvns	r3, r3
 8001538:	4909      	ldr	r1, [pc, #36]	; (8001560 <HAL_GPIO_Init+0x304>)
 800153a:	4013      	ands	r3, r2
 800153c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	3301      	adds	r3, #1
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	fa22 f303 	lsr.w	r3, r2, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	f47f ae8e 	bne.w	8001270 <HAL_GPIO_Init+0x14>
  }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	372c      	adds	r7, #44	; 0x2c
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	40010400 	.word	0x40010400

08001564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
 8001570:	4613      	mov	r3, r2
 8001572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001574:	787b      	ldrb	r3, [r7, #1]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800157a:	887a      	ldrh	r2, [r7, #2]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001580:	e003      	b.n	800158a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001582:	887b      	ldrh	r3, [r7, #2]
 8001584:	041a      	lsls	r2, r3, #16
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	611a      	str	r2, [r3, #16]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e272      	b.n	8001a8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 8087 	beq.w	80016c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015b4:	4b92      	ldr	r3, [pc, #584]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b04      	cmp	r3, #4
 80015be:	d00c      	beq.n	80015da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015c0:	4b8f      	ldr	r3, [pc, #572]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 030c 	and.w	r3, r3, #12
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	d112      	bne.n	80015f2 <HAL_RCC_OscConfig+0x5e>
 80015cc:	4b8c      	ldr	r3, [pc, #560]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d8:	d10b      	bne.n	80015f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015da:	4b89      	ldr	r3, [pc, #548]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d06c      	beq.n	80016c0 <HAL_RCC_OscConfig+0x12c>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d168      	bne.n	80016c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e24c      	b.n	8001a8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fa:	d106      	bne.n	800160a <HAL_RCC_OscConfig+0x76>
 80015fc:	4b80      	ldr	r3, [pc, #512]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a7f      	ldr	r2, [pc, #508]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	e02e      	b.n	8001668 <HAL_RCC_OscConfig+0xd4>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10c      	bne.n	800162c <HAL_RCC_OscConfig+0x98>
 8001612:	4b7b      	ldr	r3, [pc, #492]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a7a      	ldr	r2, [pc, #488]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	4b78      	ldr	r3, [pc, #480]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a77      	ldr	r2, [pc, #476]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001624:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e01d      	b.n	8001668 <HAL_RCC_OscConfig+0xd4>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001634:	d10c      	bne.n	8001650 <HAL_RCC_OscConfig+0xbc>
 8001636:	4b72      	ldr	r3, [pc, #456]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a71      	ldr	r2, [pc, #452]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 800163c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	4b6f      	ldr	r3, [pc, #444]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a6e      	ldr	r2, [pc, #440]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e00b      	b.n	8001668 <HAL_RCC_OscConfig+0xd4>
 8001650:	4b6b      	ldr	r3, [pc, #428]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a6a      	ldr	r2, [pc, #424]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b68      	ldr	r3, [pc, #416]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a67      	ldr	r2, [pc, #412]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001666:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d013      	beq.n	8001698 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff f9f0 	bl	8000a54 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001678:	f7ff f9ec 	bl	8000a54 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	; 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e200      	b.n	8001a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	4b5d      	ldr	r3, [pc, #372]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0xe4>
 8001696:	e014      	b.n	80016c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001698:	f7ff f9dc 	bl	8000a54 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff f9d8 	bl	8000a54 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e1ec      	b.n	8001a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b2:	4b53      	ldr	r3, [pc, #332]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x10c>
 80016be:	e000      	b.n	80016c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d063      	beq.n	8001796 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016ce:	4b4c      	ldr	r3, [pc, #304]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00b      	beq.n	80016f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016da:	4b49      	ldr	r3, [pc, #292]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d11c      	bne.n	8001720 <HAL_RCC_OscConfig+0x18c>
 80016e6:	4b46      	ldr	r3, [pc, #280]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d116      	bne.n	8001720 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f2:	4b43      	ldr	r3, [pc, #268]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d005      	beq.n	800170a <HAL_RCC_OscConfig+0x176>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d001      	beq.n	800170a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e1c0      	b.n	8001a8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170a:	4b3d      	ldr	r3, [pc, #244]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4939      	ldr	r1, [pc, #228]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171e:	e03a      	b.n	8001796 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d020      	beq.n	800176a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001728:	4b36      	ldr	r3, [pc, #216]	; (8001804 <HAL_RCC_OscConfig+0x270>)
 800172a:	2201      	movs	r2, #1
 800172c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172e:	f7ff f991 	bl	8000a54 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001736:	f7ff f98d 	bl	8000a54 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e1a1      	b.n	8001a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001748:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001754:	4b2a      	ldr	r3, [pc, #168]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	4927      	ldr	r1, [pc, #156]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001764:	4313      	orrs	r3, r2
 8001766:	600b      	str	r3, [r1, #0]
 8001768:	e015      	b.n	8001796 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800176a:	4b26      	ldr	r3, [pc, #152]	; (8001804 <HAL_RCC_OscConfig+0x270>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff f970 	bl	8000a54 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001778:	f7ff f96c 	bl	8000a54 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e180      	b.n	8001a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178a:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d03a      	beq.n	8001818 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d019      	beq.n	80017de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <HAL_RCC_OscConfig+0x274>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b0:	f7ff f950 	bl	8000a54 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b8:	f7ff f94c 	bl	8000a54 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e160      	b.n	8001a8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f0      	beq.n	80017b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017d6:	2001      	movs	r0, #1
 80017d8:	f000 fafe 	bl	8001dd8 <RCC_Delay>
 80017dc:	e01c      	b.n	8001818 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_RCC_OscConfig+0x274>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e4:	f7ff f936 	bl	8000a54 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ea:	e00f      	b.n	800180c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ec:	f7ff f932 	bl	8000a54 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d908      	bls.n	800180c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e146      	b.n	8001a8c <HAL_RCC_OscConfig+0x4f8>
 80017fe:	bf00      	nop
 8001800:	40021000 	.word	0x40021000
 8001804:	42420000 	.word	0x42420000
 8001808:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180c:	4b92      	ldr	r3, [pc, #584]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 800180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1e9      	bne.n	80017ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 80a6 	beq.w	8001972 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001826:	2300      	movs	r3, #0
 8001828:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800182a:	4b8b      	ldr	r3, [pc, #556]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10d      	bne.n	8001852 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	4b88      	ldr	r3, [pc, #544]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	4a87      	ldr	r2, [pc, #540]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001840:	61d3      	str	r3, [r2, #28]
 8001842:	4b85      	ldr	r3, [pc, #532]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800184e:	2301      	movs	r3, #1
 8001850:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001852:	4b82      	ldr	r3, [pc, #520]	; (8001a5c <HAL_RCC_OscConfig+0x4c8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185a:	2b00      	cmp	r3, #0
 800185c:	d118      	bne.n	8001890 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800185e:	4b7f      	ldr	r3, [pc, #508]	; (8001a5c <HAL_RCC_OscConfig+0x4c8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a7e      	ldr	r2, [pc, #504]	; (8001a5c <HAL_RCC_OscConfig+0x4c8>)
 8001864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186a:	f7ff f8f3 	bl	8000a54 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001872:	f7ff f8ef 	bl	8000a54 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b64      	cmp	r3, #100	; 0x64
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e103      	b.n	8001a8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001884:	4b75      	ldr	r3, [pc, #468]	; (8001a5c <HAL_RCC_OscConfig+0x4c8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d106      	bne.n	80018a6 <HAL_RCC_OscConfig+0x312>
 8001898:	4b6f      	ldr	r3, [pc, #444]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	4a6e      	ldr	r2, [pc, #440]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6213      	str	r3, [r2, #32]
 80018a4:	e02d      	b.n	8001902 <HAL_RCC_OscConfig+0x36e>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10c      	bne.n	80018c8 <HAL_RCC_OscConfig+0x334>
 80018ae:	4b6a      	ldr	r3, [pc, #424]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	4a69      	ldr	r2, [pc, #420]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 80018b4:	f023 0301 	bic.w	r3, r3, #1
 80018b8:	6213      	str	r3, [r2, #32]
 80018ba:	4b67      	ldr	r3, [pc, #412]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	4a66      	ldr	r2, [pc, #408]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	f023 0304 	bic.w	r3, r3, #4
 80018c4:	6213      	str	r3, [r2, #32]
 80018c6:	e01c      	b.n	8001902 <HAL_RCC_OscConfig+0x36e>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	2b05      	cmp	r3, #5
 80018ce:	d10c      	bne.n	80018ea <HAL_RCC_OscConfig+0x356>
 80018d0:	4b61      	ldr	r3, [pc, #388]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	4a60      	ldr	r2, [pc, #384]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 80018d6:	f043 0304 	orr.w	r3, r3, #4
 80018da:	6213      	str	r3, [r2, #32]
 80018dc:	4b5e      	ldr	r3, [pc, #376]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	4a5d      	ldr	r2, [pc, #372]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6213      	str	r3, [r2, #32]
 80018e8:	e00b      	b.n	8001902 <HAL_RCC_OscConfig+0x36e>
 80018ea:	4b5b      	ldr	r3, [pc, #364]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	4a5a      	ldr	r2, [pc, #360]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 80018f0:	f023 0301 	bic.w	r3, r3, #1
 80018f4:	6213      	str	r3, [r2, #32]
 80018f6:	4b58      	ldr	r3, [pc, #352]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	4a57      	ldr	r2, [pc, #348]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	f023 0304 	bic.w	r3, r3, #4
 8001900:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d015      	beq.n	8001936 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190a:	f7ff f8a3 	bl	8000a54 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001910:	e00a      	b.n	8001928 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001912:	f7ff f89f 	bl	8000a54 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001920:	4293      	cmp	r3, r2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e0b1      	b.n	8001a8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001928:	4b4b      	ldr	r3, [pc, #300]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0ee      	beq.n	8001912 <HAL_RCC_OscConfig+0x37e>
 8001934:	e014      	b.n	8001960 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001936:	f7ff f88d 	bl	8000a54 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193c:	e00a      	b.n	8001954 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193e:	f7ff f889 	bl	8000a54 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	f241 3288 	movw	r2, #5000	; 0x1388
 800194c:	4293      	cmp	r3, r2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e09b      	b.n	8001a8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001954:	4b40      	ldr	r3, [pc, #256]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1ee      	bne.n	800193e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001960:	7dfb      	ldrb	r3, [r7, #23]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d105      	bne.n	8001972 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001966:	4b3c      	ldr	r3, [pc, #240]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	4a3b      	ldr	r2, [pc, #236]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 800196c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001970:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 8087 	beq.w	8001a8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800197c:	4b36      	ldr	r3, [pc, #216]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b08      	cmp	r3, #8
 8001986:	d061      	beq.n	8001a4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d146      	bne.n	8001a1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001990:	4b33      	ldr	r3, [pc, #204]	; (8001a60 <HAL_RCC_OscConfig+0x4cc>)
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7ff f85d 	bl	8000a54 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199e:	f7ff f859 	bl	8000a54 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e06d      	b.n	8001a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b0:	4b29      	ldr	r3, [pc, #164]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1f0      	bne.n	800199e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c4:	d108      	bne.n	80019d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019c6:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	4921      	ldr	r1, [pc, #132]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d8:	4b1f      	ldr	r3, [pc, #124]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a19      	ldr	r1, [r3, #32]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	430b      	orrs	r3, r1
 80019ea:	491b      	ldr	r1, [pc, #108]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f0:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <HAL_RCC_OscConfig+0x4cc>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f6:	f7ff f82d 	bl	8000a54 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fe:	f7ff f829 	bl	8000a54 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e03d      	b.n	8001a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCC_OscConfig+0x46a>
 8001a1c:	e035      	b.n	8001a8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <HAL_RCC_OscConfig+0x4cc>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f7ff f816 	bl	8000a54 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2c:	f7ff f812 	bl	8000a54 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e026      	b.n	8001a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_RCC_OscConfig+0x4c4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0x498>
 8001a4a:	e01e      	b.n	8001a8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d107      	bne.n	8001a64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e019      	b.n	8001a8c <HAL_RCC_OscConfig+0x4f8>
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40007000 	.word	0x40007000
 8001a60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_RCC_OscConfig+0x500>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d106      	bne.n	8001a86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d001      	beq.n	8001a8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40021000 	.word	0x40021000

08001a98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0d0      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aac:	4b6a      	ldr	r3, [pc, #424]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d910      	bls.n	8001adc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aba:	4b67      	ldr	r3, [pc, #412]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 0207 	bic.w	r2, r3, #7
 8001ac2:	4965      	ldr	r1, [pc, #404]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	4b63      	ldr	r3, [pc, #396]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0b8      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d020      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af4:	4b59      	ldr	r3, [pc, #356]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	4a58      	ldr	r2, [pc, #352]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001afa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001afe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b0c:	4b53      	ldr	r3, [pc, #332]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	4a52      	ldr	r2, [pc, #328]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b18:	4b50      	ldr	r3, [pc, #320]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	494d      	ldr	r1, [pc, #308]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d040      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d115      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e07f      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d107      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b56:	4b41      	ldr	r3, [pc, #260]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d109      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e073      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b66:	4b3d      	ldr	r3, [pc, #244]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e06b      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b76:	4b39      	ldr	r3, [pc, #228]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f023 0203 	bic.w	r2, r3, #3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4936      	ldr	r1, [pc, #216]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b88:	f7fe ff64 	bl	8000a54 <HAL_GetTick>
 8001b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b90:	f7fe ff60 	bl	8000a54 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e053      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba6:	4b2d      	ldr	r3, [pc, #180]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 020c 	and.w	r2, r3, #12
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d1eb      	bne.n	8001b90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb8:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d210      	bcs.n	8001be8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc6:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 0207 	bic.w	r2, r3, #7
 8001bce:	4922      	ldr	r1, [pc, #136]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e032      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf4:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	4916      	ldr	r1, [pc, #88]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d009      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	490e      	ldr	r1, [pc, #56]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c26:	f000 f821 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	490a      	ldr	r1, [pc, #40]	; (8001c60 <HAL_RCC_ClockConfig+0x1c8>)
 8001c38:	5ccb      	ldrb	r3, [r1, r3]
 8001c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3e:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <HAL_RCC_ClockConfig+0x1cc>)
 8001c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_RCC_ClockConfig+0x1d0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fe1e 	bl	8000888 <HAL_InitTick>

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40022000 	.word	0x40022000
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	08005d2c 	.word	0x08005d2c
 8001c64:	20000000 	.word	0x20000000
 8001c68:	20000004 	.word	0x20000004

08001c6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c86:	4b1e      	ldr	r3, [pc, #120]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d002      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0x30>
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d003      	beq.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x36>
 8001c9a:	e027      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c9c:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c9e:	613b      	str	r3, [r7, #16]
      break;
 8001ca0:	e027      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	0c9b      	lsrs	r3, r3, #18
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	4a17      	ldr	r2, [pc, #92]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cac:	5cd3      	ldrb	r3, [r2, r3]
 8001cae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d010      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cba:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	0c5b      	lsrs	r3, r3, #17
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	4a11      	ldr	r2, [pc, #68]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cc6:	5cd3      	ldrb	r3, [r2, r3]
 8001cc8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cce:	fb03 f202 	mul.w	r2, r3, r2
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	e004      	b.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ce0:	fb02 f303 	mul.w	r3, r2, r3
 8001ce4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	613b      	str	r3, [r7, #16]
      break;
 8001cea:	e002      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cee:	613b      	str	r3, [r7, #16]
      break;
 8001cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf2:	693b      	ldr	r3, [r7, #16]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	371c      	adds	r7, #28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
 8001d04:	007a1200 	.word	0x007a1200
 8001d08:	08005d44 	.word	0x08005d44
 8001d0c:	08005d54 	.word	0x08005d54
 8001d10:	003d0900 	.word	0x003d0900

08001d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d18:	4b02      	ldr	r3, [pc, #8]	; (8001d24 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr
 8001d24:	20000000 	.word	0x20000000

08001d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d2c:	f7ff fff2 	bl	8001d14 <HAL_RCC_GetHCLKFreq>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	4903      	ldr	r1, [pc, #12]	; (8001d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d3e:	5ccb      	ldrb	r3, [r1, r3]
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	08005d3c 	.word	0x08005d3c

08001d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d54:	f7ff ffde 	bl	8001d14 <HAL_RCC_GetHCLKFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	0adb      	lsrs	r3, r3, #11
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4903      	ldr	r1, [pc, #12]	; (8001d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40021000 	.word	0x40021000
 8001d74:	08005d3c 	.word	0x08005d3c

08001d78 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	220f      	movs	r2, #15
 8001d86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_RCC_GetClockConfig+0x58>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0203 	and.w	r2, r3, #3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d94:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_RCC_GetClockConfig+0x58>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_GetClockConfig+0x58>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_RCC_GetClockConfig+0x58>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	08db      	lsrs	r3, r3, #3
 8001db2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0207 	and.w	r2, r3, #7
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40022000 	.word	0x40022000

08001dd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <RCC_Delay+0x34>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <RCC_Delay+0x38>)
 8001de6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dea:	0a5b      	lsrs	r3, r3, #9
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	fb02 f303 	mul.w	r3, r2, r3
 8001df2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001df4:	bf00      	nop
  }
  while (Delay --);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1e5a      	subs	r2, r3, #1
 8001dfa:	60fa      	str	r2, [r7, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1f9      	bne.n	8001df4 <RCC_Delay+0x1c>
}
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	10624dd3 	.word	0x10624dd3

08001e14 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d07d      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001e30:	2300      	movs	r3, #0
 8001e32:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e34:	4b4f      	ldr	r3, [pc, #316]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10d      	bne.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e40:	4b4c      	ldr	r3, [pc, #304]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	4a4b      	ldr	r2, [pc, #300]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	61d3      	str	r3, [r2, #28]
 8001e4c:	4b49      	ldr	r3, [pc, #292]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5c:	4b46      	ldr	r3, [pc, #280]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d118      	bne.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e68:	4b43      	ldr	r3, [pc, #268]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a42      	ldr	r2, [pc, #264]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e74:	f7fe fdee 	bl	8000a54 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7a:	e008      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7c:	f7fe fdea 	bl	8000a54 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b64      	cmp	r3, #100	; 0x64
 8001e88:	d901      	bls.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e06d      	b.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8e:	4b3a      	ldr	r3, [pc, #232]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e9a:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ea2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d02e      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d027      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001eb8:	4b2e      	ldr	r3, [pc, #184]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ec0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ec2:	4b2e      	ldr	r3, [pc, #184]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ec8:	4b2c      	ldr	r3, [pc, #176]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ece:	4a29      	ldr	r2, [pc, #164]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d014      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ede:	f7fe fdb9 	bl	8000a54 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee4:	e00a      	b.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee6:	f7fe fdb5 	bl	8000a54 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e036      	b.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efc:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0ee      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f08:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	4917      	ldr	r1, [pc, #92]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f1a:	7dfb      	ldrb	r3, [r7, #23]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d105      	bne.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f38:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	490b      	ldr	r1, [pc, #44]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0310 	and.w	r3, r3, #16
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d008      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f56:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	4904      	ldr	r1, [pc, #16]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40007000 	.word	0x40007000
 8001f7c:	42420440 	.word	0x42420440

08001f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e041      	b.n	8002016 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d106      	bne.n	8001fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f839 	bl	800201e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3304      	adds	r3, #4
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	f000 fb68 	bl	8002694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b01      	cmp	r3, #1
 8002042:	d001      	beq.n	8002048 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e03a      	b.n	80020be <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a18      	ldr	r2, [pc, #96]	; (80020c8 <HAL_TIM_Base_Start_IT+0x98>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00e      	beq.n	8002088 <HAL_TIM_Base_Start_IT+0x58>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002072:	d009      	beq.n	8002088 <HAL_TIM_Base_Start_IT+0x58>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a14      	ldr	r2, [pc, #80]	; (80020cc <HAL_TIM_Base_Start_IT+0x9c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d004      	beq.n	8002088 <HAL_TIM_Base_Start_IT+0x58>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a13      	ldr	r2, [pc, #76]	; (80020d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d111      	bne.n	80020ac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2b06      	cmp	r3, #6
 8002098:	d010      	beq.n	80020bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 0201 	orr.w	r2, r2, #1
 80020a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020aa:	e007      	b.n	80020bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	40012c00 	.word	0x40012c00
 80020cc:	40000400 	.word	0x40000400
 80020d0:	40000800 	.word	0x40000800

080020d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e041      	b.n	800216a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d106      	bne.n	8002100 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7fe fb16 	bl	800072c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3304      	adds	r3, #4
 8002110:	4619      	mov	r1, r3
 8002112:	4610      	mov	r0, r2
 8002114:	f000 fabe 	bl	8002694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d109      	bne.n	8002198 <HAL_TIM_PWM_Start+0x24>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b01      	cmp	r3, #1
 800218e:	bf14      	ite	ne
 8002190:	2301      	movne	r3, #1
 8002192:	2300      	moveq	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	e022      	b.n	80021de <HAL_TIM_PWM_Start+0x6a>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	2b04      	cmp	r3, #4
 800219c:	d109      	bne.n	80021b2 <HAL_TIM_PWM_Start+0x3e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	bf14      	ite	ne
 80021aa:	2301      	movne	r3, #1
 80021ac:	2300      	moveq	r3, #0
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	e015      	b.n	80021de <HAL_TIM_PWM_Start+0x6a>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d109      	bne.n	80021cc <HAL_TIM_PWM_Start+0x58>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	bf14      	ite	ne
 80021c4:	2301      	movne	r3, #1
 80021c6:	2300      	moveq	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	e008      	b.n	80021de <HAL_TIM_PWM_Start+0x6a>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	bf14      	ite	ne
 80021d8:	2301      	movne	r3, #1
 80021da:	2300      	moveq	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e05e      	b.n	80022a4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d104      	bne.n	80021f6 <HAL_TIM_PWM_Start+0x82>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021f4:	e013      	b.n	800221e <HAL_TIM_PWM_Start+0xaa>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d104      	bne.n	8002206 <HAL_TIM_PWM_Start+0x92>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002204:	e00b      	b.n	800221e <HAL_TIM_PWM_Start+0xaa>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2b08      	cmp	r3, #8
 800220a:	d104      	bne.n	8002216 <HAL_TIM_PWM_Start+0xa2>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002214:	e003      	b.n	800221e <HAL_TIM_PWM_Start+0xaa>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2202      	movs	r2, #2
 800221a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2201      	movs	r2, #1
 8002224:	6839      	ldr	r1, [r7, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f000 fc1e 	bl	8002a68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a1e      	ldr	r2, [pc, #120]	; (80022ac <HAL_TIM_PWM_Start+0x138>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d107      	bne.n	8002246 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002244:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a18      	ldr	r2, [pc, #96]	; (80022ac <HAL_TIM_PWM_Start+0x138>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d00e      	beq.n	800226e <HAL_TIM_PWM_Start+0xfa>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002258:	d009      	beq.n	800226e <HAL_TIM_PWM_Start+0xfa>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <HAL_TIM_PWM_Start+0x13c>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d004      	beq.n	800226e <HAL_TIM_PWM_Start+0xfa>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a12      	ldr	r2, [pc, #72]	; (80022b4 <HAL_TIM_PWM_Start+0x140>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d111      	bne.n	8002292 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b06      	cmp	r3, #6
 800227e:	d010      	beq.n	80022a2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0201 	orr.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002290:	e007      	b.n	80022a2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0201 	orr.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40012c00 	.word	0x40012c00
 80022b0:	40000400 	.word	0x40000400
 80022b4:	40000800 	.word	0x40000800

080022b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d122      	bne.n	8002314 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d11b      	bne.n	8002314 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f06f 0202 	mvn.w	r2, #2
 80022e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f9af 	bl	800265e <HAL_TIM_IC_CaptureCallback>
 8002300:	e005      	b.n	800230e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f9a2 	bl	800264c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f9b1 	bl	8002670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b04      	cmp	r3, #4
 8002320:	d122      	bne.n	8002368 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b04      	cmp	r3, #4
 800232e:	d11b      	bne.n	8002368 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f06f 0204 	mvn.w	r2, #4
 8002338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2202      	movs	r2, #2
 800233e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f985 	bl	800265e <HAL_TIM_IC_CaptureCallback>
 8002354:	e005      	b.n	8002362 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f978 	bl	800264c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f987 	bl	8002670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b08      	cmp	r3, #8
 8002374:	d122      	bne.n	80023bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b08      	cmp	r3, #8
 8002382:	d11b      	bne.n	80023bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f06f 0208 	mvn.w	r2, #8
 800238c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2204      	movs	r2, #4
 8002392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f95b 	bl	800265e <HAL_TIM_IC_CaptureCallback>
 80023a8:	e005      	b.n	80023b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f94e 	bl	800264c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f95d 	bl	8002670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f003 0310 	and.w	r3, r3, #16
 80023c6:	2b10      	cmp	r3, #16
 80023c8:	d122      	bne.n	8002410 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0310 	and.w	r3, r3, #16
 80023d4:	2b10      	cmp	r3, #16
 80023d6:	d11b      	bne.n	8002410 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f06f 0210 	mvn.w	r2, #16
 80023e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2208      	movs	r2, #8
 80023e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f931 	bl	800265e <HAL_TIM_IC_CaptureCallback>
 80023fc:	e005      	b.n	800240a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f924 	bl	800264c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f933 	bl	8002670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b01      	cmp	r3, #1
 800241c:	d10e      	bne.n	800243c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b01      	cmp	r3, #1
 800242a:	d107      	bne.n	800243c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0201 	mvn.w	r2, #1
 8002434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7fe f8ec 	bl	8000614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002446:	2b80      	cmp	r3, #128	; 0x80
 8002448:	d10e      	bne.n	8002468 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002454:	2b80      	cmp	r3, #128	; 0x80
 8002456:	d107      	bne.n	8002468 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 fb8b 	bl	8002b7e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002472:	2b40      	cmp	r3, #64	; 0x40
 8002474:	d10e      	bne.n	8002494 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002480:	2b40      	cmp	r3, #64	; 0x40
 8002482:	d107      	bne.n	8002494 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800248c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f8f7 	bl	8002682 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f003 0320 	and.w	r3, r3, #32
 800249e:	2b20      	cmp	r3, #32
 80024a0:	d10e      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 0320 	and.w	r3, r3, #32
 80024ac:	2b20      	cmp	r3, #32
 80024ae:	d107      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f06f 0220 	mvn.w	r2, #32
 80024b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 fb56 	bl	8002b6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e0ae      	b.n	8002644 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b0c      	cmp	r3, #12
 80024f2:	f200 809f 	bhi.w	8002634 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80024f6:	a201      	add	r2, pc, #4	; (adr r2, 80024fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80024f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fc:	08002531 	.word	0x08002531
 8002500:	08002635 	.word	0x08002635
 8002504:	08002635 	.word	0x08002635
 8002508:	08002635 	.word	0x08002635
 800250c:	08002571 	.word	0x08002571
 8002510:	08002635 	.word	0x08002635
 8002514:	08002635 	.word	0x08002635
 8002518:	08002635 	.word	0x08002635
 800251c:	080025b3 	.word	0x080025b3
 8002520:	08002635 	.word	0x08002635
 8002524:	08002635 	.word	0x08002635
 8002528:	08002635 	.word	0x08002635
 800252c:	080025f3 	.word	0x080025f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f90e 	bl	8002758 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699a      	ldr	r2, [r3, #24]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0208 	orr.w	r2, r2, #8
 800254a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699a      	ldr	r2, [r3, #24]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0204 	bic.w	r2, r2, #4
 800255a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6999      	ldr	r1, [r3, #24]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	691a      	ldr	r2, [r3, #16]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	619a      	str	r2, [r3, #24]
      break;
 800256e:	e064      	b.n	800263a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	4618      	mov	r0, r3
 8002578:	f000 f954 	bl	8002824 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699a      	ldr	r2, [r3, #24]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800258a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699a      	ldr	r2, [r3, #24]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800259a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6999      	ldr	r1, [r3, #24]
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	021a      	lsls	r2, r3, #8
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	619a      	str	r2, [r3, #24]
      break;
 80025b0:	e043      	b.n	800263a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68b9      	ldr	r1, [r7, #8]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 f99d 	bl	80028f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	69da      	ldr	r2, [r3, #28]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0208 	orr.w	r2, r2, #8
 80025cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	69da      	ldr	r2, [r3, #28]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0204 	bic.w	r2, r2, #4
 80025dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	69d9      	ldr	r1, [r3, #28]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	61da      	str	r2, [r3, #28]
      break;
 80025f0:	e023      	b.n	800263a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68b9      	ldr	r1, [r7, #8]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 f9e7 	bl	80029cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	69da      	ldr	r2, [r3, #28]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800260c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	69da      	ldr	r2, [r3, #28]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800261c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	69d9      	ldr	r1, [r3, #28]
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	021a      	lsls	r2, r3, #8
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	61da      	str	r2, [r3, #28]
      break;
 8002632:	e002      	b.n	800263a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	75fb      	strb	r3, [r7, #23]
      break;
 8002638:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002642:	7dfb      	ldrb	r3, [r7, #23]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr

0800265e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr

08002682 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a29      	ldr	r2, [pc, #164]	; (800274c <TIM_Base_SetConfig+0xb8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d00b      	beq.n	80026c4 <TIM_Base_SetConfig+0x30>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b2:	d007      	beq.n	80026c4 <TIM_Base_SetConfig+0x30>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a26      	ldr	r2, [pc, #152]	; (8002750 <TIM_Base_SetConfig+0xbc>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d003      	beq.n	80026c4 <TIM_Base_SetConfig+0x30>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a25      	ldr	r2, [pc, #148]	; (8002754 <TIM_Base_SetConfig+0xc0>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d108      	bne.n	80026d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a1c      	ldr	r2, [pc, #112]	; (800274c <TIM_Base_SetConfig+0xb8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00b      	beq.n	80026f6 <TIM_Base_SetConfig+0x62>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e4:	d007      	beq.n	80026f6 <TIM_Base_SetConfig+0x62>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a19      	ldr	r2, [pc, #100]	; (8002750 <TIM_Base_SetConfig+0xbc>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d003      	beq.n	80026f6 <TIM_Base_SetConfig+0x62>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a18      	ldr	r2, [pc, #96]	; (8002754 <TIM_Base_SetConfig+0xc0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d108      	bne.n	8002708 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4313      	orrs	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	4313      	orrs	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a07      	ldr	r2, [pc, #28]	; (800274c <TIM_Base_SetConfig+0xb8>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d103      	bne.n	800273c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	615a      	str	r2, [r3, #20]
}
 8002742:	bf00      	nop
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	40012c00 	.word	0x40012c00
 8002750:	40000400 	.word	0x40000400
 8002754:	40000800 	.word	0x40000800

08002758 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f023 0201 	bic.w	r2, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f023 0303 	bic.w	r3, r3, #3
 800278e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4313      	orrs	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f023 0302 	bic.w	r3, r3, #2
 80027a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a1c      	ldr	r2, [pc, #112]	; (8002820 <TIM_OC1_SetConfig+0xc8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d10c      	bne.n	80027ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f023 0308 	bic.w	r3, r3, #8
 80027ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f023 0304 	bic.w	r3, r3, #4
 80027cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a13      	ldr	r2, [pc, #76]	; (8002820 <TIM_OC1_SetConfig+0xc8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d111      	bne.n	80027fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	621a      	str	r2, [r3, #32]
}
 8002814:	bf00      	nop
 8002816:	371c      	adds	r7, #28
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40012c00 	.word	0x40012c00

08002824 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002824:	b480      	push	{r7}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	f023 0210 	bic.w	r2, r3, #16
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800285a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4313      	orrs	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f023 0320 	bic.w	r3, r3, #32
 800286e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4313      	orrs	r3, r2
 800287a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a1d      	ldr	r2, [pc, #116]	; (80028f4 <TIM_OC2_SetConfig+0xd0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d10d      	bne.n	80028a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800288a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800289e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a14      	ldr	r2, [pc, #80]	; (80028f4 <TIM_OC2_SetConfig+0xd0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d113      	bne.n	80028d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	621a      	str	r2, [r3, #32]
}
 80028ea:	bf00      	nop
 80028ec:	371c      	adds	r7, #28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr
 80028f4:	40012c00 	.word	0x40012c00

080028f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f023 0303 	bic.w	r3, r3, #3
 800292e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	021b      	lsls	r3, r3, #8
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	4313      	orrs	r3, r2
 800294c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a1d      	ldr	r2, [pc, #116]	; (80029c8 <TIM_OC3_SetConfig+0xd0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d10d      	bne.n	8002972 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800295c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	021b      	lsls	r3, r3, #8
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	4313      	orrs	r3, r2
 8002968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a14      	ldr	r2, [pc, #80]	; (80029c8 <TIM_OC3_SetConfig+0xd0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d113      	bne.n	80029a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4313      	orrs	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	621a      	str	r2, [r3, #32]
}
 80029bc:	bf00      	nop
 80029be:	371c      	adds	r7, #28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40012c00 	.word	0x40012c00

080029cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	031b      	lsls	r3, r3, #12
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a0f      	ldr	r2, [pc, #60]	; (8002a64 <TIM_OC4_SetConfig+0x98>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d109      	bne.n	8002a40 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	019b      	lsls	r3, r3, #6
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	621a      	str	r2, [r3, #32]
}
 8002a5a:	bf00      	nop
 8002a5c:	371c      	adds	r7, #28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	40012c00 	.word	0x40012c00

08002a68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a1a      	ldr	r2, [r3, #32]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	401a      	ands	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a1a      	ldr	r2, [r3, #32]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f003 031f 	and.w	r3, r3, #31
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	621a      	str	r2, [r3, #32]
}
 8002aa6:	bf00      	nop
 8002aa8:	371c      	adds	r7, #28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e046      	b.n	8002b56 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a16      	ldr	r2, [pc, #88]	; (8002b60 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00e      	beq.n	8002b2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b14:	d009      	beq.n	8002b2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a12      	ldr	r2, [pc, #72]	; (8002b64 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d004      	beq.n	8002b2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a10      	ldr	r2, [pc, #64]	; (8002b68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d10c      	bne.n	8002b44 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr
 8002b60:	40012c00 	.word	0x40012c00
 8002b64:	40000400 	.word	0x40000400
 8002b68:	40000800 	.word	0x40000800

08002b6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e042      	b.n	8002c28 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d106      	bne.n	8002bbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fd fe1a 	bl	80007f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2224      	movs	r2, #36	; 0x24
 8002bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f82b 	bl	8002c30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002be8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695a      	ldr	r2, [r3, #20]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c6a:	f023 030c 	bic.w	r3, r3, #12
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	68b9      	ldr	r1, [r7, #8]
 8002c74:	430b      	orrs	r3, r1
 8002c76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699a      	ldr	r2, [r3, #24]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a2c      	ldr	r2, [pc, #176]	; (8002d44 <UART_SetConfig+0x114>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d103      	bne.n	8002ca0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c98:	f7ff f85a 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	e002      	b.n	8002ca6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ca0:	f7ff f842 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8002ca4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	009a      	lsls	r2, r3, #2
 8002cb0:	441a      	add	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbc:	4a22      	ldr	r2, [pc, #136]	; (8002d48 <UART_SetConfig+0x118>)
 8002cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc2:	095b      	lsrs	r3, r3, #5
 8002cc4:	0119      	lsls	r1, r3, #4
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	009a      	lsls	r2, r3, #2
 8002cd0:	441a      	add	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cdc:	4b1a      	ldr	r3, [pc, #104]	; (8002d48 <UART_SetConfig+0x118>)
 8002cde:	fba3 0302 	umull	r0, r3, r3, r2
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2064      	movs	r0, #100	; 0x64
 8002ce6:	fb00 f303 	mul.w	r3, r0, r3
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	3332      	adds	r3, #50	; 0x32
 8002cf0:	4a15      	ldr	r2, [pc, #84]	; (8002d48 <UART_SetConfig+0x118>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cfc:	4419      	add	r1, r3
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	009a      	lsls	r2, r3, #2
 8002d08:	441a      	add	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <UART_SetConfig+0x118>)
 8002d16:	fba3 0302 	umull	r0, r3, r3, r2
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	2064      	movs	r0, #100	; 0x64
 8002d1e:	fb00 f303 	mul.w	r3, r0, r3
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	3332      	adds	r3, #50	; 0x32
 8002d28:	4a07      	ldr	r2, [pc, #28]	; (8002d48 <UART_SetConfig+0x118>)
 8002d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	f003 020f 	and.w	r2, r3, #15
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	440a      	add	r2, r1
 8002d3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d3c:	bf00      	nop
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40013800 	.word	0x40013800
 8002d48:	51eb851f 	.word	0x51eb851f

08002d4c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d52:	f3ef 8305 	mrs	r3, IPSR
 8002d56:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10f      	bne.n	8002d7e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d62:	607b      	str	r3, [r7, #4]
  return(result);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d109      	bne.n	8002d7e <osKernelInitialize+0x32>
 8002d6a:	4b10      	ldr	r3, [pc, #64]	; (8002dac <osKernelInitialize+0x60>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d109      	bne.n	8002d86 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d72:	f3ef 8311 	mrs	r3, BASEPRI
 8002d76:	603b      	str	r3, [r7, #0]
  return(result);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002d7e:	f06f 0305 	mvn.w	r3, #5
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	e00c      	b.n	8002da0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002d86:	4b09      	ldr	r3, [pc, #36]	; (8002dac <osKernelInitialize+0x60>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d105      	bne.n	8002d9a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002d8e:	4b07      	ldr	r3, [pc, #28]	; (8002dac <osKernelInitialize+0x60>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	e002      	b.n	8002da0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002da0:	68fb      	ldr	r3, [r7, #12]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr
 8002dac:	20001588 	.word	0x20001588

08002db0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002db6:	f3ef 8305 	mrs	r3, IPSR
 8002dba:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dbc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10f      	bne.n	8002de2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8002dc6:	607b      	str	r3, [r7, #4]
  return(result);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <osKernelStart+0x32>
 8002dce:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <osKernelStart+0x64>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d109      	bne.n	8002dea <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002dd6:	f3ef 8311 	mrs	r3, BASEPRI
 8002dda:	603b      	str	r3, [r7, #0]
  return(result);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <osKernelStart+0x3a>
    stat = osErrorISR;
 8002de2:	f06f 0305 	mvn.w	r3, #5
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	e00e      	b.n	8002e08 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002dea:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <osKernelStart+0x64>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d107      	bne.n	8002e02 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002df2:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <osKernelStart+0x64>)
 8002df4:	2202      	movs	r2, #2
 8002df6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002df8:	f001 fa90 	bl	800431c <vTaskStartScheduler>
      stat = osOK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	e002      	b.n	8002e08 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002e02:	f04f 33ff 	mov.w	r3, #4294967295
 8002e06:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002e08:	68fb      	ldr	r3, [r7, #12]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20001588 	.word	0x20001588

08002e18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b092      	sub	sp, #72	; 0x48
 8002e1c:	af04      	add	r7, sp, #16
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e28:	f3ef 8305 	mrs	r3, IPSR
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f040 8094 	bne.w	8002f5e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e36:	f3ef 8310 	mrs	r3, PRIMASK
 8002e3a:	623b      	str	r3, [r7, #32]
  return(result);
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f040 808d 	bne.w	8002f5e <osThreadNew+0x146>
 8002e44:	4b48      	ldr	r3, [pc, #288]	; (8002f68 <osThreadNew+0x150>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d106      	bne.n	8002e5a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e4c:	f3ef 8311 	mrs	r3, BASEPRI
 8002e50:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f040 8082 	bne.w	8002f5e <osThreadNew+0x146>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d07e      	beq.n	8002f5e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002e64:	2318      	movs	r3, #24
 8002e66:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002e68:	2300      	movs	r3, #0
 8002e6a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002e6c:	f107 031b 	add.w	r3, r7, #27
 8002e70:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002e72:	f04f 33ff 	mov.w	r3, #4294967295
 8002e76:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d045      	beq.n	8002f0a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <osThreadNew+0x74>
        name = attr->name;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <osThreadNew+0x9a>
 8002ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea2:	2b38      	cmp	r3, #56	; 0x38
 8002ea4:	d805      	bhi.n	8002eb2 <osThreadNew+0x9a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <osThreadNew+0x9e>
        return (NULL);
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e054      	b.n	8002f60 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	089b      	lsrs	r3, r3, #2
 8002ec4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00e      	beq.n	8002eec <osThreadNew+0xd4>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	2b5b      	cmp	r3, #91	; 0x5b
 8002ed4:	d90a      	bls.n	8002eec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d006      	beq.n	8002eec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <osThreadNew+0xd4>
        mem = 1;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eea:	e010      	b.n	8002f0e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10c      	bne.n	8002f0e <osThreadNew+0xf6>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d108      	bne.n	8002f0e <osThreadNew+0xf6>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d104      	bne.n	8002f0e <osThreadNew+0xf6>
          mem = 0;
 8002f04:	2300      	movs	r3, #0
 8002f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f08:	e001      	b.n	8002f0e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d110      	bne.n	8002f36 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f1c:	9202      	str	r2, [sp, #8]
 8002f1e:	9301      	str	r3, [sp, #4]
 8002f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f001 f82a 	bl	8003f84 <xTaskCreateStatic>
 8002f30:	4603      	mov	r3, r0
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	e013      	b.n	8002f5e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d110      	bne.n	8002f5e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	f107 0314 	add.w	r3, r7, #20
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f001 f874 	bl	800403c <xTaskCreate>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d001      	beq.n	8002f5e <osThreadNew+0x146>
          hTask = NULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002f5e:	697b      	ldr	r3, [r7, #20]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3738      	adds	r7, #56	; 0x38
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20001588 	.word	0x20001588

08002f6c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f74:	f3ef 8305 	mrs	r3, IPSR
 8002f78:	613b      	str	r3, [r7, #16]
  return(result);
 8002f7a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10f      	bne.n	8002fa0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f80:	f3ef 8310 	mrs	r3, PRIMASK
 8002f84:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d109      	bne.n	8002fa0 <osDelay+0x34>
 8002f8c:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <osDelay+0x58>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d109      	bne.n	8002fa8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f94:	f3ef 8311 	mrs	r3, BASEPRI
 8002f98:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <osDelay+0x3c>
    stat = osErrorISR;
 8002fa0:	f06f 0305 	mvn.w	r3, #5
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	e007      	b.n	8002fb8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f001 f97e 	bl	80042b4 <vTaskDelay>
    }
  }

  return (stat);
 8002fb8:	697b      	ldr	r3, [r7, #20]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20001588 	.word	0x20001588

08002fc8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08c      	sub	sp, #48	; 0x30
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fd8:	f3ef 8305 	mrs	r3, IPSR
 8002fdc:	61bb      	str	r3, [r7, #24]
  return(result);
 8002fde:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f040 8086 	bne.w	80030f2 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8002fea:	617b      	str	r3, [r7, #20]
  return(result);
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d17f      	bne.n	80030f2 <osSemaphoreNew+0x12a>
 8002ff2:	4b42      	ldr	r3, [pc, #264]	; (80030fc <osSemaphoreNew+0x134>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d105      	bne.n	8003006 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ffa:	f3ef 8311 	mrs	r3, BASEPRI
 8002ffe:	613b      	str	r3, [r7, #16]
  return(result);
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d175      	bne.n	80030f2 <osSemaphoreNew+0x12a>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d072      	beq.n	80030f2 <osSemaphoreNew+0x12a>
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	429a      	cmp	r2, r3
 8003012:	d86e      	bhi.n	80030f2 <osSemaphoreNew+0x12a>
    mem = -1;
 8003014:	f04f 33ff 	mov.w	r3, #4294967295
 8003018:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d015      	beq.n	800304c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d006      	beq.n	8003036 <osSemaphoreNew+0x6e>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	2b4f      	cmp	r3, #79	; 0x4f
 800302e:	d902      	bls.n	8003036 <osSemaphoreNew+0x6e>
        mem = 1;
 8003030:	2301      	movs	r3, #1
 8003032:	623b      	str	r3, [r7, #32]
 8003034:	e00c      	b.n	8003050 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d108      	bne.n	8003050 <osSemaphoreNew+0x88>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d104      	bne.n	8003050 <osSemaphoreNew+0x88>
          mem = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	623b      	str	r3, [r7, #32]
 800304a:	e001      	b.n	8003050 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800304c:	2300      	movs	r3, #0
 800304e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003056:	d04c      	beq.n	80030f2 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d128      	bne.n	80030b0 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d10a      	bne.n	800307a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2203      	movs	r2, #3
 800306a:	9200      	str	r2, [sp, #0]
 800306c:	2200      	movs	r2, #0
 800306e:	2100      	movs	r1, #0
 8003070:	2001      	movs	r0, #1
 8003072:	f000 fa15 	bl	80034a0 <xQueueGenericCreateStatic>
 8003076:	6278      	str	r0, [r7, #36]	; 0x24
 8003078:	e005      	b.n	8003086 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800307a:	2203      	movs	r2, #3
 800307c:	2100      	movs	r1, #0
 800307e:	2001      	movs	r0, #1
 8003080:	f000 fa85 	bl	800358e <xQueueGenericCreate>
 8003084:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	2b00      	cmp	r3, #0
 800308a:	d022      	beq.n	80030d2 <osSemaphoreNew+0x10a>
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d01f      	beq.n	80030d2 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003092:	2300      	movs	r3, #0
 8003094:	2200      	movs	r2, #0
 8003096:	2100      	movs	r1, #0
 8003098:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800309a:	f000 fb43 	bl	8003724 <xQueueGenericSend>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d016      	beq.n	80030d2 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80030a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030a6:	f000 fdb3 	bl	8003c10 <vQueueDelete>
            hSemaphore = NULL;
 80030aa:	2300      	movs	r3, #0
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
 80030ae:	e010      	b.n	80030d2 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d108      	bne.n	80030c8 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	461a      	mov	r2, r3
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fac6 	bl	8003650 <xQueueCreateCountingSemaphoreStatic>
 80030c4:	6278      	str	r0, [r7, #36]	; 0x24
 80030c6:	e004      	b.n	80030d2 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80030c8:	68b9      	ldr	r1, [r7, #8]
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 faf7 	bl	80036be <xQueueCreateCountingSemaphore>
 80030d0:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00c      	beq.n	80030f2 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <osSemaphoreNew+0x11e>
          name = attr->name;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	61fb      	str	r3, [r7, #28]
 80030e4:	e001      	b.n	80030ea <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80030ea:	69f9      	ldr	r1, [r7, #28]
 80030ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030ee:	f000 fec3 	bl	8003e78 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3728      	adds	r7, #40	; 0x28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20001588 	.word	0x20001588

08003100 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003100:	b580      	push	{r7, lr}
 8003102:	b08c      	sub	sp, #48	; 0x30
 8003104:	af02      	add	r7, sp, #8
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800310c:	2300      	movs	r3, #0
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003110:	f3ef 8305 	mrs	r3, IPSR
 8003114:	61bb      	str	r3, [r7, #24]
  return(result);
 8003116:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003118:	2b00      	cmp	r3, #0
 800311a:	d16f      	bne.n	80031fc <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800311c:	f3ef 8310 	mrs	r3, PRIMASK
 8003120:	617b      	str	r3, [r7, #20]
  return(result);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d169      	bne.n	80031fc <osMessageQueueNew+0xfc>
 8003128:	4b37      	ldr	r3, [pc, #220]	; (8003208 <osMessageQueueNew+0x108>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b02      	cmp	r3, #2
 800312e:	d105      	bne.n	800313c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003130:	f3ef 8311 	mrs	r3, BASEPRI
 8003134:	613b      	str	r3, [r7, #16]
  return(result);
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d15f      	bne.n	80031fc <osMessageQueueNew+0xfc>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d05c      	beq.n	80031fc <osMessageQueueNew+0xfc>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d059      	beq.n	80031fc <osMessageQueueNew+0xfc>
    mem = -1;
 8003148:	f04f 33ff 	mov.w	r3, #4294967295
 800314c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d029      	beq.n	80031a8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d012      	beq.n	8003182 <osMessageQueueNew+0x82>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b4f      	cmp	r3, #79	; 0x4f
 8003162:	d90e      	bls.n	8003182 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	695a      	ldr	r2, [r3, #20]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	68b9      	ldr	r1, [r7, #8]
 8003174:	fb01 f303 	mul.w	r3, r1, r3
 8003178:	429a      	cmp	r2, r3
 800317a:	d302      	bcc.n	8003182 <osMessageQueueNew+0x82>
        mem = 1;
 800317c:	2301      	movs	r3, #1
 800317e:	623b      	str	r3, [r7, #32]
 8003180:	e014      	b.n	80031ac <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d110      	bne.n	80031ac <osMessageQueueNew+0xac>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10c      	bne.n	80031ac <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003196:	2b00      	cmp	r3, #0
 8003198:	d108      	bne.n	80031ac <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d104      	bne.n	80031ac <osMessageQueueNew+0xac>
          mem = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	623b      	str	r3, [r7, #32]
 80031a6:	e001      	b.n	80031ac <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d10b      	bne.n	80031ca <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691a      	ldr	r2, [r3, #16]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	2100      	movs	r1, #0
 80031bc:	9100      	str	r1, [sp, #0]
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 f96d 	bl	80034a0 <xQueueGenericCreateStatic>
 80031c6:	6278      	str	r0, [r7, #36]	; 0x24
 80031c8:	e008      	b.n	80031dc <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d105      	bne.n	80031dc <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80031d0:	2200      	movs	r2, #0
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f9da 	bl	800358e <xQueueGenericCreate>
 80031da:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00c      	beq.n	80031fc <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <osMessageQueueNew+0xf0>
        name = attr->name;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	e001      	b.n	80031f4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80031f4:	69f9      	ldr	r1, [r7, #28]
 80031f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031f8:	f000 fe3e 	bl	8003e78 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3728      	adds	r7, #40	; 0x28
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20001588 	.word	0x20001588

0800320c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4a06      	ldr	r2, [pc, #24]	; (8003234 <vApplicationGetIdleTaskMemory+0x28>)
 800321c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	4a05      	ldr	r2, [pc, #20]	; (8003238 <vApplicationGetIdleTaskMemory+0x2c>)
 8003222:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2280      	movs	r2, #128	; 0x80
 8003228:	601a      	str	r2, [r3, #0]
}
 800322a:	bf00      	nop
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr
 8003234:	2000158c 	.word	0x2000158c
 8003238:	200015e8 	.word	0x200015e8

0800323c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4a07      	ldr	r2, [pc, #28]	; (8003268 <vApplicationGetTimerTaskMemory+0x2c>)
 800324c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	4a06      	ldr	r2, [pc, #24]	; (800326c <vApplicationGetTimerTaskMemory+0x30>)
 8003252:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f44f 7280 	mov.w	r2, #256	; 0x100
 800325a:	601a      	str	r2, [r3, #0]
}
 800325c:	bf00      	nop
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	200017e8 	.word	0x200017e8
 800326c:	20001844 	.word	0x20001844

08003270 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f103 0208 	add.w	r2, r3, #8
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f04f 32ff 	mov.w	r2, #4294967295
 8003288:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f103 0208 	add.w	r2, r3, #8
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f103 0208 	add.w	r2, r3, #8
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr

080032ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr

080032c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032c6:	b480      	push	{r7}
 80032c8:	b085      	sub	sp, #20
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	601a      	str	r2, [r3, #0]
}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr

0800330c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003322:	d103      	bne.n	800332c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	e00c      	b.n	8003346 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3308      	adds	r3, #8
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	e002      	b.n	800333a <vListInsert+0x2e>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	429a      	cmp	r2, r3
 8003344:	d2f6      	bcs.n	8003334 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	601a      	str	r2, [r3, #0]
}
 8003372:	bf00      	nop
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6892      	ldr	r2, [r2, #8]
 8003392:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6852      	ldr	r2, [r2, #4]
 800339c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d103      	bne.n	80033b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	1e5a      	subs	r2, r3, #1
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr
	...

080033d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10a      	bne.n	80033fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80033e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80033f6:	bf00      	nop
 80033f8:	e7fe      	b.n	80033f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80033fa:	f002 f8bf 	bl	800557c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003406:	68f9      	ldr	r1, [r7, #12]
 8003408:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800340a:	fb01 f303 	mul.w	r3, r1, r3
 800340e:	441a      	add	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342a:	3b01      	subs	r3, #1
 800342c:	68f9      	ldr	r1, [r7, #12]
 800342e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	441a      	add	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	22ff      	movs	r2, #255	; 0xff
 800343e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	22ff      	movs	r2, #255	; 0xff
 8003446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d114      	bne.n	800347a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d01a      	beq.n	800348e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3310      	adds	r3, #16
 800345c:	4618      	mov	r0, r3
 800345e:	f001 f9e7 	bl	8004830 <xTaskRemoveFromEventList>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d012      	beq.n	800348e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003468:	4b0c      	ldr	r3, [pc, #48]	; (800349c <xQueueGenericReset+0xcc>)
 800346a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	e009      	b.n	800348e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	3310      	adds	r3, #16
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff fef6 	bl	8003270 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	3324      	adds	r3, #36	; 0x24
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff fef1 	bl	8003270 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800348e:	f002 f8a5 	bl	80055dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003492:	2301      	movs	r3, #1
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	e000ed04 	.word	0xe000ed04

080034a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08e      	sub	sp, #56	; 0x38
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10a      	bne.n	80034ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80034b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b8:	f383 8811 	msr	BASEPRI, r3
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80034c6:	bf00      	nop
 80034c8:	e7fe      	b.n	80034c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10a      	bne.n	80034e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80034e2:	bf00      	nop
 80034e4:	e7fe      	b.n	80034e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <xQueueGenericCreateStatic+0x52>
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <xQueueGenericCreateStatic+0x56>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <xQueueGenericCreateStatic+0x58>
 80034f6:	2300      	movs	r3, #0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10a      	bne.n	8003512 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80034fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	623b      	str	r3, [r7, #32]
}
 800350e:	bf00      	nop
 8003510:	e7fe      	b.n	8003510 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d102      	bne.n	800351e <xQueueGenericCreateStatic+0x7e>
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <xQueueGenericCreateStatic+0x82>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <xQueueGenericCreateStatic+0x84>
 8003522:	2300      	movs	r3, #0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10a      	bne.n	800353e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352c:	f383 8811 	msr	BASEPRI, r3
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	61fb      	str	r3, [r7, #28]
}
 800353a:	bf00      	nop
 800353c:	e7fe      	b.n	800353c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800353e:	2350      	movs	r3, #80	; 0x50
 8003540:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2b50      	cmp	r3, #80	; 0x50
 8003546:	d00a      	beq.n	800355e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354c:	f383 8811 	msr	BASEPRI, r3
 8003550:	f3bf 8f6f 	isb	sy
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	61bb      	str	r3, [r7, #24]
}
 800355a:	bf00      	nop
 800355c:	e7fe      	b.n	800355c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00d      	beq.n	8003584 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003570:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	4613      	mov	r3, r2
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f843 	bl	800360a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003586:	4618      	mov	r0, r3
 8003588:	3730      	adds	r7, #48	; 0x30
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800358e:	b580      	push	{r7, lr}
 8003590:	b08a      	sub	sp, #40	; 0x28
 8003592:	af02      	add	r7, sp, #8
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	4613      	mov	r3, r2
 800359a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10a      	bne.n	80035b8 <xQueueGenericCreate+0x2a>
	__asm volatile
 80035a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a6:	f383 8811 	msr	BASEPRI, r3
 80035aa:	f3bf 8f6f 	isb	sy
 80035ae:	f3bf 8f4f 	dsb	sy
 80035b2:	613b      	str	r3, [r7, #16]
}
 80035b4:	bf00      	nop
 80035b6:	e7fe      	b.n	80035b6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d102      	bne.n	80035c4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	61fb      	str	r3, [r7, #28]
 80035c2:	e004      	b.n	80035ce <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	fb02 f303 	mul.w	r3, r2, r3
 80035cc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3350      	adds	r3, #80	; 0x50
 80035d2:	4618      	mov	r0, r3
 80035d4:	f002 f8d2 	bl	800577c <pvPortMalloc>
 80035d8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00f      	beq.n	8003600 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	3350      	adds	r3, #80	; 0x50
 80035e4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035ee:	79fa      	ldrb	r2, [r7, #7]
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	4613      	mov	r3, r2
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 f805 	bl	800360a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003600:	69bb      	ldr	r3, [r7, #24]
	}
 8003602:	4618      	mov	r0, r3
 8003604:	3720      	adds	r7, #32
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b084      	sub	sp, #16
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
 8003616:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d103      	bne.n	8003626 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	e002      	b.n	800362c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003638:	2101      	movs	r1, #1
 800363a:	69b8      	ldr	r0, [r7, #24]
 800363c:	f7ff fec8 	bl	80033d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003648:	bf00      	nop
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08a      	sub	sp, #40	; 0x28
 8003654:	af02      	add	r7, sp, #8
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10a      	bne.n	8003678 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8003662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	61bb      	str	r3, [r7, #24]
}
 8003674:	bf00      	nop
 8003676:	e7fe      	b.n	8003676 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	429a      	cmp	r2, r3
 800367e:	d90a      	bls.n	8003696 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8003680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	617b      	str	r3, [r7, #20]
}
 8003692:	bf00      	nop
 8003694:	e7fe      	b.n	8003694 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003696:	2302      	movs	r3, #2
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	2100      	movs	r1, #0
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f7ff fefd 	bl	80034a0 <xQueueGenericCreateStatic>
 80036a6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80036b4:	69fb      	ldr	r3, [r7, #28]
	}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3720      	adds	r7, #32
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b086      	sub	sp, #24
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10a      	bne.n	80036e4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80036ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d2:	f383 8811 	msr	BASEPRI, r3
 80036d6:	f3bf 8f6f 	isb	sy
 80036da:	f3bf 8f4f 	dsb	sy
 80036de:	613b      	str	r3, [r7, #16]
}
 80036e0:	bf00      	nop
 80036e2:	e7fe      	b.n	80036e2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d90a      	bls.n	8003702 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80036ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f0:	f383 8811 	msr	BASEPRI, r3
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	60fb      	str	r3, [r7, #12]
}
 80036fe:	bf00      	nop
 8003700:	e7fe      	b.n	8003700 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003702:	2202      	movs	r2, #2
 8003704:	2100      	movs	r1, #0
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7ff ff41 	bl	800358e <xQueueGenericCreate>
 800370c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800371a:	697b      	ldr	r3, [r7, #20]
	}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b08e      	sub	sp, #56	; 0x38
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003732:	2300      	movs	r3, #0
 8003734:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10a      	bne.n	8003756 <xQueueGenericSend+0x32>
	__asm volatile
 8003740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003752:	bf00      	nop
 8003754:	e7fe      	b.n	8003754 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d103      	bne.n	8003764 <xQueueGenericSend+0x40>
 800375c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <xQueueGenericSend+0x44>
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <xQueueGenericSend+0x46>
 8003768:	2300      	movs	r3, #0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10a      	bne.n	8003784 <xQueueGenericSend+0x60>
	__asm volatile
 800376e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003780:	bf00      	nop
 8003782:	e7fe      	b.n	8003782 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d103      	bne.n	8003792 <xQueueGenericSend+0x6e>
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <xQueueGenericSend+0x72>
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <xQueueGenericSend+0x74>
 8003796:	2300      	movs	r3, #0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10a      	bne.n	80037b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	623b      	str	r3, [r7, #32]
}
 80037ae:	bf00      	nop
 80037b0:	e7fe      	b.n	80037b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037b2:	f001 f9ff 	bl	8004bb4 <xTaskGetSchedulerState>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d102      	bne.n	80037c2 <xQueueGenericSend+0x9e>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <xQueueGenericSend+0xa2>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <xQueueGenericSend+0xa4>
 80037c6:	2300      	movs	r3, #0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10a      	bne.n	80037e2 <xQueueGenericSend+0xbe>
	__asm volatile
 80037cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d0:	f383 8811 	msr	BASEPRI, r3
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	61fb      	str	r3, [r7, #28]
}
 80037de:	bf00      	nop
 80037e0:	e7fe      	b.n	80037e0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037e2:	f001 fecb 	bl	800557c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d302      	bcc.n	80037f8 <xQueueGenericSend+0xd4>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d129      	bne.n	800384c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037fe:	f000 fa2a 	bl	8003c56 <prvCopyDataToQueue>
 8003802:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	2b00      	cmp	r3, #0
 800380a:	d010      	beq.n	800382e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380e:	3324      	adds	r3, #36	; 0x24
 8003810:	4618      	mov	r0, r3
 8003812:	f001 f80d 	bl	8004830 <xTaskRemoveFromEventList>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d013      	beq.n	8003844 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800381c:	4b3f      	ldr	r3, [pc, #252]	; (800391c <xQueueGenericSend+0x1f8>)
 800381e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	e00a      	b.n	8003844 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003830:	2b00      	cmp	r3, #0
 8003832:	d007      	beq.n	8003844 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003834:	4b39      	ldr	r3, [pc, #228]	; (800391c <xQueueGenericSend+0x1f8>)
 8003836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003844:	f001 feca 	bl	80055dc <vPortExitCritical>
				return pdPASS;
 8003848:	2301      	movs	r3, #1
 800384a:	e063      	b.n	8003914 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d103      	bne.n	800385a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003852:	f001 fec3 	bl	80055dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003856:	2300      	movs	r3, #0
 8003858:	e05c      	b.n	8003914 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800385a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385c:	2b00      	cmp	r3, #0
 800385e:	d106      	bne.n	800386e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003860:	f107 0314 	add.w	r3, r7, #20
 8003864:	4618      	mov	r0, r3
 8003866:	f001 f847 	bl	80048f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800386a:	2301      	movs	r3, #1
 800386c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800386e:	f001 feb5 	bl	80055dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003872:	f000 fdb9 	bl	80043e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003876:	f001 fe81 	bl	800557c <vPortEnterCritical>
 800387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003880:	b25b      	sxtb	r3, r3
 8003882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003886:	d103      	bne.n	8003890 <xQueueGenericSend+0x16c>
 8003888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003892:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003896:	b25b      	sxtb	r3, r3
 8003898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389c:	d103      	bne.n	80038a6 <xQueueGenericSend+0x182>
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038a6:	f001 fe99 	bl	80055dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038aa:	1d3a      	adds	r2, r7, #4
 80038ac:	f107 0314 	add.w	r3, r7, #20
 80038b0:	4611      	mov	r1, r2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f001 f836 	bl	8004924 <xTaskCheckForTimeOut>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d124      	bne.n	8003908 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80038be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038c0:	f000 fac1 	bl	8003e46 <prvIsQueueFull>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d018      	beq.n	80038fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80038ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038cc:	3310      	adds	r3, #16
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	4611      	mov	r1, r2
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 ff5c 	bl	8004790 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80038d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038da:	f000 fa4c 	bl	8003d76 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80038de:	f000 fd91 	bl	8004404 <xTaskResumeAll>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f47f af7c 	bne.w	80037e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80038ea:	4b0c      	ldr	r3, [pc, #48]	; (800391c <xQueueGenericSend+0x1f8>)
 80038ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	f3bf 8f4f 	dsb	sy
 80038f6:	f3bf 8f6f 	isb	sy
 80038fa:	e772      	b.n	80037e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80038fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038fe:	f000 fa3a 	bl	8003d76 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003902:	f000 fd7f 	bl	8004404 <xTaskResumeAll>
 8003906:	e76c      	b.n	80037e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800390a:	f000 fa34 	bl	8003d76 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800390e:	f000 fd79 	bl	8004404 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003912:	2300      	movs	r3, #0
		}
	}
}
 8003914:	4618      	mov	r0, r3
 8003916:	3738      	adds	r7, #56	; 0x38
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	e000ed04 	.word	0xe000ed04

08003920 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08e      	sub	sp, #56	; 0x38
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10a      	bne.n	800394e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393c:	f383 8811 	msr	BASEPRI, r3
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
}
 800394a:	bf00      	nop
 800394c:	e7fe      	b.n	800394c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d103      	bne.n	800395c <xQueueGenericSendFromISR+0x3c>
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <xQueueGenericSendFromISR+0x40>
 800395c:	2301      	movs	r3, #1
 800395e:	e000      	b.n	8003962 <xQueueGenericSendFromISR+0x42>
 8003960:	2300      	movs	r3, #0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10a      	bne.n	800397c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396a:	f383 8811 	msr	BASEPRI, r3
 800396e:	f3bf 8f6f 	isb	sy
 8003972:	f3bf 8f4f 	dsb	sy
 8003976:	623b      	str	r3, [r7, #32]
}
 8003978:	bf00      	nop
 800397a:	e7fe      	b.n	800397a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d103      	bne.n	800398a <xQueueGenericSendFromISR+0x6a>
 8003982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <xQueueGenericSendFromISR+0x6e>
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <xQueueGenericSendFromISR+0x70>
 800398e:	2300      	movs	r3, #0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10a      	bne.n	80039aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	61fb      	str	r3, [r7, #28]
}
 80039a6:	bf00      	nop
 80039a8:	e7fe      	b.n	80039a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80039aa:	f001 fea9 	bl	8005700 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80039ae:	f3ef 8211 	mrs	r2, BASEPRI
 80039b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	61ba      	str	r2, [r7, #24]
 80039c4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80039c6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80039c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d302      	bcc.n	80039dc <xQueueGenericSendFromISR+0xbc>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d12c      	bne.n	8003a36 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80039dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	68b9      	ldr	r1, [r7, #8]
 80039ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039ec:	f000 f933 	bl	8003c56 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80039f0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f8:	d112      	bne.n	8003a20 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d016      	beq.n	8003a30 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a04:	3324      	adds	r3, #36	; 0x24
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 ff12 	bl	8004830 <xTaskRemoveFromEventList>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00e      	beq.n	8003a30 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00b      	beq.n	8003a30 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	e007      	b.n	8003a30 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a24:	3301      	adds	r3, #1
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	b25a      	sxtb	r2, r3
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003a30:	2301      	movs	r3, #1
 8003a32:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003a34:	e001      	b.n	8003a3a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	637b      	str	r3, [r7, #52]	; 0x34
 8003a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003a44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3738      	adds	r7, #56	; 0x38
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08c      	sub	sp, #48	; 0x30
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10a      	bne.n	8003a80 <xQueueReceive+0x30>
	__asm volatile
 8003a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6e:	f383 8811 	msr	BASEPRI, r3
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	623b      	str	r3, [r7, #32]
}
 8003a7c:	bf00      	nop
 8003a7e:	e7fe      	b.n	8003a7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d103      	bne.n	8003a8e <xQueueReceive+0x3e>
 8003a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <xQueueReceive+0x42>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <xQueueReceive+0x44>
 8003a92:	2300      	movs	r3, #0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10a      	bne.n	8003aae <xQueueReceive+0x5e>
	__asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	61fb      	str	r3, [r7, #28]
}
 8003aaa:	bf00      	nop
 8003aac:	e7fe      	b.n	8003aac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003aae:	f001 f881 	bl	8004bb4 <xTaskGetSchedulerState>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d102      	bne.n	8003abe <xQueueReceive+0x6e>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <xQueueReceive+0x72>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <xQueueReceive+0x74>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10a      	bne.n	8003ade <xQueueReceive+0x8e>
	__asm volatile
 8003ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	61bb      	str	r3, [r7, #24]
}
 8003ada:	bf00      	nop
 8003adc:	e7fe      	b.n	8003adc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ade:	f001 fd4d 	bl	800557c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d01f      	beq.n	8003b2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003af2:	f000 f91a 	bl	8003d2a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	1e5a      	subs	r2, r3, #1
 8003afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00f      	beq.n	8003b26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b08:	3310      	adds	r3, #16
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 fe90 	bl	8004830 <xTaskRemoveFromEventList>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d007      	beq.n	8003b26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b16:	4b3d      	ldr	r3, [pc, #244]	; (8003c0c <xQueueReceive+0x1bc>)
 8003b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003b26:	f001 fd59 	bl	80055dc <vPortExitCritical>
				return pdPASS;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e069      	b.n	8003c02 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d103      	bne.n	8003b3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b34:	f001 fd52 	bl	80055dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	e062      	b.n	8003c02 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d106      	bne.n	8003b50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b42:	f107 0310 	add.w	r3, r7, #16
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fed6 	bl	80048f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b50:	f001 fd44 	bl	80055dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b54:	f000 fc48 	bl	80043e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b58:	f001 fd10 	bl	800557c <vPortEnterCritical>
 8003b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b62:	b25b      	sxtb	r3, r3
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b68:	d103      	bne.n	8003b72 <xQueueReceive+0x122>
 8003b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b78:	b25b      	sxtb	r3, r3
 8003b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7e:	d103      	bne.n	8003b88 <xQueueReceive+0x138>
 8003b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b88:	f001 fd28 	bl	80055dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b8c:	1d3a      	adds	r2, r7, #4
 8003b8e:	f107 0310 	add.w	r3, r7, #16
 8003b92:	4611      	mov	r1, r2
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 fec5 	bl	8004924 <xTaskCheckForTimeOut>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d123      	bne.n	8003be8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ba2:	f000 f93a 	bl	8003e1a <prvIsQueueEmpty>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d017      	beq.n	8003bdc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bae:	3324      	adds	r3, #36	; 0x24
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 fdeb 	bl	8004790 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003bba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bbc:	f000 f8db 	bl	8003d76 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003bc0:	f000 fc20 	bl	8004404 <xTaskResumeAll>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d189      	bne.n	8003ade <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003bca:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <xQueueReceive+0x1bc>)
 8003bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	e780      	b.n	8003ade <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003bdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bde:	f000 f8ca 	bl	8003d76 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003be2:	f000 fc0f 	bl	8004404 <xTaskResumeAll>
 8003be6:	e77a      	b.n	8003ade <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bea:	f000 f8c4 	bl	8003d76 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bee:	f000 fc09 	bl	8004404 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bf4:	f000 f911 	bl	8003e1a <prvIsQueueEmpty>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f43f af6f 	beq.w	8003ade <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3730      	adds	r7, #48	; 0x30
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	e000ed04 	.word	0xe000ed04

08003c10 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10a      	bne.n	8003c38 <vQueueDelete+0x28>
	__asm volatile
 8003c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	60bb      	str	r3, [r7, #8]
}
 8003c34:	bf00      	nop
 8003c36:	e7fe      	b.n	8003c36 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f945 	bl	8003ec8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d102      	bne.n	8003c4e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f001 fe5b 	bl	8005904 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003c4e:	bf00      	nop
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b086      	sub	sp, #24
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10d      	bne.n	8003c90 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d14d      	bne.n	8003d18 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 ffb5 	bl	8004bf0 <xTaskPriorityDisinherit>
 8003c86:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	e043      	b.n	8003d18 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d119      	bne.n	8003cca <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6898      	ldr	r0, [r3, #8]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	68b9      	ldr	r1, [r7, #8]
 8003ca2:	f001 ff67 	bl	8005b74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	441a      	add	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d32b      	bcc.n	8003d18 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	609a      	str	r2, [r3, #8]
 8003cc8:	e026      	b.n	8003d18 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	68d8      	ldr	r0, [r3, #12]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68b9      	ldr	r1, [r7, #8]
 8003cd6:	f001 ff4d 	bl	8005b74 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	425b      	negs	r3, r3
 8003ce4:	441a      	add	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d207      	bcs.n	8003d06 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	425b      	negs	r3, r3
 8003d00:	441a      	add	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d105      	bne.n	8003d18 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	3b01      	subs	r3, #1
 8003d16:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003d20:	697b      	ldr	r3, [r7, #20]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b082      	sub	sp, #8
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d018      	beq.n	8003d6e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	441a      	add	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d303      	bcc.n	8003d5e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68d9      	ldr	r1, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	461a      	mov	r2, r3
 8003d68:	6838      	ldr	r0, [r7, #0]
 8003d6a:	f001 ff03 	bl	8005b74 <memcpy>
	}
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003d7e:	f001 fbfd 	bl	800557c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d88:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d8a:	e011      	b.n	8003db0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d012      	beq.n	8003dba <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3324      	adds	r3, #36	; 0x24
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fd49 	bl	8004830 <xTaskRemoveFromEventList>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003da4:	f000 fe20 	bl	80049e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	dce9      	bgt.n	8003d8c <prvUnlockQueue+0x16>
 8003db8:	e000      	b.n	8003dbc <prvUnlockQueue+0x46>
					break;
 8003dba:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	22ff      	movs	r2, #255	; 0xff
 8003dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003dc4:	f001 fc0a 	bl	80055dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003dc8:	f001 fbd8 	bl	800557c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dd2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003dd4:	e011      	b.n	8003dfa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d012      	beq.n	8003e04 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3310      	adds	r3, #16
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fd24 	bl	8004830 <xTaskRemoveFromEventList>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003dee:	f000 fdfb 	bl	80049e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003df2:	7bbb      	ldrb	r3, [r7, #14]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003dfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	dce9      	bgt.n	8003dd6 <prvUnlockQueue+0x60>
 8003e02:	e000      	b.n	8003e06 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e04:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	22ff      	movs	r2, #255	; 0xff
 8003e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003e0e:	f001 fbe5 	bl	80055dc <vPortExitCritical>
}
 8003e12:	bf00      	nop
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e22:	f001 fbab 	bl	800557c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d102      	bne.n	8003e34 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	e001      	b.n	8003e38 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003e34:	2300      	movs	r3, #0
 8003e36:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e38:	f001 fbd0 	bl	80055dc <vPortExitCritical>

	return xReturn;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b084      	sub	sp, #16
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e4e:	f001 fb95 	bl	800557c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d102      	bne.n	8003e64 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	e001      	b.n	8003e68 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e68:	f001 fbb8 	bl	80055dc <vPortExitCritical>

	return xReturn;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e82:	2300      	movs	r3, #0
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	e014      	b.n	8003eb2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003e88:	4a0e      	ldr	r2, [pc, #56]	; (8003ec4 <vQueueAddToRegistry+0x4c>)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10b      	bne.n	8003eac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003e94:	490b      	ldr	r1, [pc, #44]	; (8003ec4 <vQueueAddToRegistry+0x4c>)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003e9e:	4a09      	ldr	r2, [pc, #36]	; (8003ec4 <vQueueAddToRegistry+0x4c>)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003eaa:	e006      	b.n	8003eba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b07      	cmp	r3, #7
 8003eb6:	d9e7      	bls.n	8003e88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003eb8:	bf00      	nop
 8003eba:	bf00      	nop
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr
 8003ec4:	20001c44 	.word	0x20001c44

08003ec8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	e016      	b.n	8003f04 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003ed6:	4a10      	ldr	r2, [pc, #64]	; (8003f18 <vQueueUnregisterQueue+0x50>)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4413      	add	r3, r2
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d10b      	bne.n	8003efe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003ee6:	4a0c      	ldr	r2, [pc, #48]	; (8003f18 <vQueueUnregisterQueue+0x50>)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2100      	movs	r1, #0
 8003eec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003ef0:	4a09      	ldr	r2, [pc, #36]	; (8003f18 <vQueueUnregisterQueue+0x50>)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	2200      	movs	r2, #0
 8003efa:	605a      	str	r2, [r3, #4]
				break;
 8003efc:	e006      	b.n	8003f0c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	3301      	adds	r3, #1
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b07      	cmp	r3, #7
 8003f08:	d9e5      	bls.n	8003ed6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003f0a:	bf00      	nop
 8003f0c:	bf00      	nop
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc80      	pop	{r7}
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	20001c44 	.word	0x20001c44

08003f1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003f2c:	f001 fb26 	bl	800557c <vPortEnterCritical>
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f36:	b25b      	sxtb	r3, r3
 8003f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3c:	d103      	bne.n	8003f46 <vQueueWaitForMessageRestricted+0x2a>
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f4c:	b25b      	sxtb	r3, r3
 8003f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f52:	d103      	bne.n	8003f5c <vQueueWaitForMessageRestricted+0x40>
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f5c:	f001 fb3e 	bl	80055dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d106      	bne.n	8003f76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	3324      	adds	r3, #36	; 0x24
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	68b9      	ldr	r1, [r7, #8]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 fc31 	bl	80047d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003f76:	6978      	ldr	r0, [r7, #20]
 8003f78:	f7ff fefd 	bl	8003d76 <prvUnlockQueue>
	}
 8003f7c:	bf00      	nop
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08e      	sub	sp, #56	; 0x38
 8003f88:	af04      	add	r7, sp, #16
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10a      	bne.n	8003fae <xTaskCreateStatic+0x2a>
	__asm volatile
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	623b      	str	r3, [r7, #32]
}
 8003faa:	bf00      	nop
 8003fac:	e7fe      	b.n	8003fac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10a      	bne.n	8003fca <xTaskCreateStatic+0x46>
	__asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	61fb      	str	r3, [r7, #28]
}
 8003fc6:	bf00      	nop
 8003fc8:	e7fe      	b.n	8003fc8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003fca:	235c      	movs	r3, #92	; 0x5c
 8003fcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2b5c      	cmp	r3, #92	; 0x5c
 8003fd2:	d00a      	beq.n	8003fea <xTaskCreateStatic+0x66>
	__asm volatile
 8003fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd8:	f383 8811 	msr	BASEPRI, r3
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	61bb      	str	r3, [r7, #24]
}
 8003fe6:	bf00      	nop
 8003fe8:	e7fe      	b.n	8003fe8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d01e      	beq.n	800402e <xTaskCreateStatic+0xaa>
 8003ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d01b      	beq.n	800402e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	2202      	movs	r2, #2
 8004004:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004008:	2300      	movs	r3, #0
 800400a:	9303      	str	r3, [sp, #12]
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	9302      	str	r3, [sp, #8]
 8004010:	f107 0314 	add.w	r3, r7, #20
 8004014:	9301      	str	r3, [sp, #4]
 8004016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	68b9      	ldr	r1, [r7, #8]
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f850 	bl	80040c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004026:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004028:	f000 f8d4 	bl	80041d4 <prvAddNewTaskToReadyList>
 800402c:	e001      	b.n	8004032 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004032:	697b      	ldr	r3, [r7, #20]
	}
 8004034:	4618      	mov	r0, r3
 8004036:	3728      	adds	r7, #40	; 0x28
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08c      	sub	sp, #48	; 0x30
 8004040:	af04      	add	r7, sp, #16
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	603b      	str	r3, [r7, #0]
 8004048:	4613      	mov	r3, r2
 800404a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800404c:	88fb      	ldrh	r3, [r7, #6]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4618      	mov	r0, r3
 8004052:	f001 fb93 	bl	800577c <pvPortMalloc>
 8004056:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00e      	beq.n	800407c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800405e:	205c      	movs	r0, #92	; 0x5c
 8004060:	f001 fb8c 	bl	800577c <pvPortMalloc>
 8004064:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	631a      	str	r2, [r3, #48]	; 0x30
 8004072:	e005      	b.n	8004080 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004074:	6978      	ldr	r0, [r7, #20]
 8004076:	f001 fc45 	bl	8005904 <vPortFree>
 800407a:	e001      	b.n	8004080 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800407c:	2300      	movs	r3, #0
 800407e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d017      	beq.n	80040b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800408e:	88fa      	ldrh	r2, [r7, #6]
 8004090:	2300      	movs	r3, #0
 8004092:	9303      	str	r3, [sp, #12]
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	9302      	str	r3, [sp, #8]
 8004098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409a:	9301      	str	r3, [sp, #4]
 800409c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	68b9      	ldr	r1, [r7, #8]
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f80e 	bl	80040c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040aa:	69f8      	ldr	r0, [r7, #28]
 80040ac:	f000 f892 	bl	80041d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80040b0:	2301      	movs	r3, #1
 80040b2:	61bb      	str	r3, [r7, #24]
 80040b4:	e002      	b.n	80040bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040b6:	f04f 33ff 	mov.w	r3, #4294967295
 80040ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040bc:	69bb      	ldr	r3, [r7, #24]
	}
 80040be:	4618      	mov	r0, r3
 80040c0:	3720      	adds	r7, #32
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b088      	sub	sp, #32
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	607a      	str	r2, [r7, #4]
 80040d2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80040d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	461a      	mov	r2, r3
 80040de:	21a5      	movs	r1, #165	; 0xa5
 80040e0:	f001 fd56 	bl	8005b90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80040e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040ee:	3b01      	subs	r3, #1
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	f023 0307 	bic.w	r3, r3, #7
 80040fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <prvInitialiseNewTask+0x58>
	__asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	617b      	str	r3, [r7, #20]
}
 800411a:	bf00      	nop
 800411c:	e7fe      	b.n	800411c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
 8004122:	e012      	b.n	800414a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	4413      	add	r3, r2
 800412a:	7819      	ldrb	r1, [r3, #0]
 800412c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	4413      	add	r3, r2
 8004132:	3334      	adds	r3, #52	; 0x34
 8004134:	460a      	mov	r2, r1
 8004136:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	4413      	add	r3, r2
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d006      	beq.n	8004152 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	3301      	adds	r3, #1
 8004148:	61fb      	str	r3, [r7, #28]
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	2b0f      	cmp	r3, #15
 800414e:	d9e9      	bls.n	8004124 <prvInitialiseNewTask+0x5e>
 8004150:	e000      	b.n	8004154 <prvInitialiseNewTask+0x8e>
		{
			break;
 8004152:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	2b37      	cmp	r3, #55	; 0x37
 8004160:	d901      	bls.n	8004166 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004162:	2337      	movs	r3, #55	; 0x37
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800416a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800416c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004170:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004174:	2200      	movs	r2, #0
 8004176:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417a:	3304      	adds	r3, #4
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff f896 	bl	80032ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004184:	3318      	adds	r3, #24
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff f891 	bl	80032ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800418c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004190:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004194:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041a0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80041a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a4:	2200      	movs	r2, #0
 80041a6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	68f9      	ldr	r1, [r7, #12]
 80041b4:	69b8      	ldr	r0, [r7, #24]
 80041b6:	f001 f8ef 	bl	8005398 <pxPortInitialiseStack>
 80041ba:	4602      	mov	r2, r0
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041be:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80041c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041cc:	bf00      	nop
 80041ce:	3720      	adds	r7, #32
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041dc:	f001 f9ce 	bl	800557c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041e0:	4b2d      	ldr	r3, [pc, #180]	; (8004298 <prvAddNewTaskToReadyList+0xc4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3301      	adds	r3, #1
 80041e6:	4a2c      	ldr	r2, [pc, #176]	; (8004298 <prvAddNewTaskToReadyList+0xc4>)
 80041e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80041ea:	4b2c      	ldr	r3, [pc, #176]	; (800429c <prvAddNewTaskToReadyList+0xc8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80041f2:	4a2a      	ldr	r2, [pc, #168]	; (800429c <prvAddNewTaskToReadyList+0xc8>)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041f8:	4b27      	ldr	r3, [pc, #156]	; (8004298 <prvAddNewTaskToReadyList+0xc4>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d110      	bne.n	8004222 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004200:	f000 fc16 	bl	8004a30 <prvInitialiseTaskLists>
 8004204:	e00d      	b.n	8004222 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004206:	4b26      	ldr	r3, [pc, #152]	; (80042a0 <prvAddNewTaskToReadyList+0xcc>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800420e:	4b23      	ldr	r3, [pc, #140]	; (800429c <prvAddNewTaskToReadyList+0xc8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	429a      	cmp	r2, r3
 800421a:	d802      	bhi.n	8004222 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800421c:	4a1f      	ldr	r2, [pc, #124]	; (800429c <prvAddNewTaskToReadyList+0xc8>)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004222:	4b20      	ldr	r3, [pc, #128]	; (80042a4 <prvAddNewTaskToReadyList+0xd0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3301      	adds	r3, #1
 8004228:	4a1e      	ldr	r2, [pc, #120]	; (80042a4 <prvAddNewTaskToReadyList+0xd0>)
 800422a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800422c:	4b1d      	ldr	r3, [pc, #116]	; (80042a4 <prvAddNewTaskToReadyList+0xd0>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004238:	4b1b      	ldr	r3, [pc, #108]	; (80042a8 <prvAddNewTaskToReadyList+0xd4>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d903      	bls.n	8004248 <prvAddNewTaskToReadyList+0x74>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	4a18      	ldr	r2, [pc, #96]	; (80042a8 <prvAddNewTaskToReadyList+0xd4>)
 8004246:	6013      	str	r3, [r2, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4a15      	ldr	r2, [pc, #84]	; (80042ac <prvAddNewTaskToReadyList+0xd8>)
 8004256:	441a      	add	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3304      	adds	r3, #4
 800425c:	4619      	mov	r1, r3
 800425e:	4610      	mov	r0, r2
 8004260:	f7ff f831 	bl	80032c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004264:	f001 f9ba 	bl	80055dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004268:	4b0d      	ldr	r3, [pc, #52]	; (80042a0 <prvAddNewTaskToReadyList+0xcc>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00e      	beq.n	800428e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004270:	4b0a      	ldr	r3, [pc, #40]	; (800429c <prvAddNewTaskToReadyList+0xc8>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427a:	429a      	cmp	r2, r3
 800427c:	d207      	bcs.n	800428e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800427e:	4b0c      	ldr	r3, [pc, #48]	; (80042b0 <prvAddNewTaskToReadyList+0xdc>)
 8004280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800428e:	bf00      	nop
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	20002158 	.word	0x20002158
 800429c:	20001c84 	.word	0x20001c84
 80042a0:	20002164 	.word	0x20002164
 80042a4:	20002174 	.word	0x20002174
 80042a8:	20002160 	.word	0x20002160
 80042ac:	20001c88 	.word	0x20001c88
 80042b0:	e000ed04 	.word	0xe000ed04

080042b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d017      	beq.n	80042f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80042c6:	4b13      	ldr	r3, [pc, #76]	; (8004314 <vTaskDelay+0x60>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <vTaskDelay+0x30>
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	60bb      	str	r3, [r7, #8]
}
 80042e0:	bf00      	nop
 80042e2:	e7fe      	b.n	80042e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80042e4:	f000 f880 	bl	80043e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042e8:	2100      	movs	r1, #0
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fcee 	bl	8004ccc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042f0:	f000 f888 	bl	8004404 <xTaskResumeAll>
 80042f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d107      	bne.n	800430c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80042fc:	4b06      	ldr	r3, [pc, #24]	; (8004318 <vTaskDelay+0x64>)
 80042fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800430c:	bf00      	nop
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	20002180 	.word	0x20002180
 8004318:	e000ed04 	.word	0xe000ed04

0800431c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08a      	sub	sp, #40	; 0x28
 8004320:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004322:	2300      	movs	r3, #0
 8004324:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004326:	2300      	movs	r3, #0
 8004328:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800432a:	463a      	mov	r2, r7
 800432c:	1d39      	adds	r1, r7, #4
 800432e:	f107 0308 	add.w	r3, r7, #8
 8004332:	4618      	mov	r0, r3
 8004334:	f7fe ff6a 	bl	800320c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004338:	6839      	ldr	r1, [r7, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	9202      	str	r2, [sp, #8]
 8004340:	9301      	str	r3, [sp, #4]
 8004342:	2300      	movs	r3, #0
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	2300      	movs	r3, #0
 8004348:	460a      	mov	r2, r1
 800434a:	4921      	ldr	r1, [pc, #132]	; (80043d0 <vTaskStartScheduler+0xb4>)
 800434c:	4821      	ldr	r0, [pc, #132]	; (80043d4 <vTaskStartScheduler+0xb8>)
 800434e:	f7ff fe19 	bl	8003f84 <xTaskCreateStatic>
 8004352:	4603      	mov	r3, r0
 8004354:	4a20      	ldr	r2, [pc, #128]	; (80043d8 <vTaskStartScheduler+0xbc>)
 8004356:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004358:	4b1f      	ldr	r3, [pc, #124]	; (80043d8 <vTaskStartScheduler+0xbc>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004360:	2301      	movs	r3, #1
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	e001      	b.n	800436a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004366:	2300      	movs	r3, #0
 8004368:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d102      	bne.n	8004376 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004370:	f000 fd00 	bl	8004d74 <xTimerCreateTimerTask>
 8004374:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d116      	bne.n	80043aa <vTaskStartScheduler+0x8e>
	__asm volatile
 800437c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004380:	f383 8811 	msr	BASEPRI, r3
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	613b      	str	r3, [r7, #16]
}
 800438e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004390:	4b12      	ldr	r3, [pc, #72]	; (80043dc <vTaskStartScheduler+0xc0>)
 8004392:	f04f 32ff 	mov.w	r2, #4294967295
 8004396:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004398:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <vTaskStartScheduler+0xc4>)
 800439a:	2201      	movs	r2, #1
 800439c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800439e:	4b11      	ldr	r3, [pc, #68]	; (80043e4 <vTaskStartScheduler+0xc8>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80043a4:	f001 f878 	bl	8005498 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043a8:	e00e      	b.n	80043c8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b0:	d10a      	bne.n	80043c8 <vTaskStartScheduler+0xac>
	__asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	60fb      	str	r3, [r7, #12]
}
 80043c4:	bf00      	nop
 80043c6:	e7fe      	b.n	80043c6 <vTaskStartScheduler+0xaa>
}
 80043c8:	bf00      	nop
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	08005c14 	.word	0x08005c14
 80043d4:	08004a01 	.word	0x08004a01
 80043d8:	2000217c 	.word	0x2000217c
 80043dc:	20002178 	.word	0x20002178
 80043e0:	20002164 	.word	0x20002164
 80043e4:	2000215c 	.word	0x2000215c

080043e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80043ec:	4b04      	ldr	r3, [pc, #16]	; (8004400 <vTaskSuspendAll+0x18>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3301      	adds	r3, #1
 80043f2:	4a03      	ldr	r2, [pc, #12]	; (8004400 <vTaskSuspendAll+0x18>)
 80043f4:	6013      	str	r3, [r2, #0]
}
 80043f6:	bf00      	nop
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bc80      	pop	{r7}
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20002180 	.word	0x20002180

08004404 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800440a:	2300      	movs	r3, #0
 800440c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800440e:	2300      	movs	r3, #0
 8004410:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004412:	4b42      	ldr	r3, [pc, #264]	; (800451c <xTaskResumeAll+0x118>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10a      	bne.n	8004430 <xTaskResumeAll+0x2c>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	603b      	str	r3, [r7, #0]
}
 800442c:	bf00      	nop
 800442e:	e7fe      	b.n	800442e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004430:	f001 f8a4 	bl	800557c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004434:	4b39      	ldr	r3, [pc, #228]	; (800451c <xTaskResumeAll+0x118>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	3b01      	subs	r3, #1
 800443a:	4a38      	ldr	r2, [pc, #224]	; (800451c <xTaskResumeAll+0x118>)
 800443c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800443e:	4b37      	ldr	r3, [pc, #220]	; (800451c <xTaskResumeAll+0x118>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d162      	bne.n	800450c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004446:	4b36      	ldr	r3, [pc, #216]	; (8004520 <xTaskResumeAll+0x11c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d05e      	beq.n	800450c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800444e:	e02f      	b.n	80044b0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004450:	4b34      	ldr	r3, [pc, #208]	; (8004524 <xTaskResumeAll+0x120>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	3318      	adds	r3, #24
 800445c:	4618      	mov	r0, r3
 800445e:	f7fe ff8d 	bl	800337c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	3304      	adds	r3, #4
 8004466:	4618      	mov	r0, r3
 8004468:	f7fe ff88 	bl	800337c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004470:	4b2d      	ldr	r3, [pc, #180]	; (8004528 <xTaskResumeAll+0x124>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d903      	bls.n	8004480 <xTaskResumeAll+0x7c>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	4a2a      	ldr	r2, [pc, #168]	; (8004528 <xTaskResumeAll+0x124>)
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004484:	4613      	mov	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4a27      	ldr	r2, [pc, #156]	; (800452c <xTaskResumeAll+0x128>)
 800448e:	441a      	add	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	3304      	adds	r3, #4
 8004494:	4619      	mov	r1, r3
 8004496:	4610      	mov	r0, r2
 8004498:	f7fe ff15 	bl	80032c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a0:	4b23      	ldr	r3, [pc, #140]	; (8004530 <xTaskResumeAll+0x12c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d302      	bcc.n	80044b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80044aa:	4b22      	ldr	r3, [pc, #136]	; (8004534 <xTaskResumeAll+0x130>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044b0:	4b1c      	ldr	r3, [pc, #112]	; (8004524 <xTaskResumeAll+0x120>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1cb      	bne.n	8004450 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044be:	f000 fb55 	bl	8004b6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80044c2:	4b1d      	ldr	r3, [pc, #116]	; (8004538 <xTaskResumeAll+0x134>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d010      	beq.n	80044f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044ce:	f000 f845 	bl	800455c <xTaskIncrementTick>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80044d8:	4b16      	ldr	r3, [pc, #88]	; (8004534 <xTaskResumeAll+0x130>)
 80044da:	2201      	movs	r2, #1
 80044dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f1      	bne.n	80044ce <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80044ea:	4b13      	ldr	r3, [pc, #76]	; (8004538 <xTaskResumeAll+0x134>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044f0:	4b10      	ldr	r3, [pc, #64]	; (8004534 <xTaskResumeAll+0x130>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d009      	beq.n	800450c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044f8:	2301      	movs	r3, #1
 80044fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044fc:	4b0f      	ldr	r3, [pc, #60]	; (800453c <xTaskResumeAll+0x138>)
 80044fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800450c:	f001 f866 	bl	80055dc <vPortExitCritical>

	return xAlreadyYielded;
 8004510:	68bb      	ldr	r3, [r7, #8]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20002180 	.word	0x20002180
 8004520:	20002158 	.word	0x20002158
 8004524:	20002118 	.word	0x20002118
 8004528:	20002160 	.word	0x20002160
 800452c:	20001c88 	.word	0x20001c88
 8004530:	20001c84 	.word	0x20001c84
 8004534:	2000216c 	.word	0x2000216c
 8004538:	20002168 	.word	0x20002168
 800453c:	e000ed04 	.word	0xe000ed04

08004540 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004546:	4b04      	ldr	r3, [pc, #16]	; (8004558 <xTaskGetTickCount+0x18>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800454c:	687b      	ldr	r3, [r7, #4]
}
 800454e:	4618      	mov	r0, r3
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr
 8004558:	2000215c 	.word	0x2000215c

0800455c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004562:	2300      	movs	r3, #0
 8004564:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004566:	4b51      	ldr	r3, [pc, #324]	; (80046ac <xTaskIncrementTick+0x150>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	f040 808e 	bne.w	800468c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004570:	4b4f      	ldr	r3, [pc, #316]	; (80046b0 <xTaskIncrementTick+0x154>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3301      	adds	r3, #1
 8004576:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004578:	4a4d      	ldr	r2, [pc, #308]	; (80046b0 <xTaskIncrementTick+0x154>)
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d120      	bne.n	80045c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004584:	4b4b      	ldr	r3, [pc, #300]	; (80046b4 <xTaskIncrementTick+0x158>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	603b      	str	r3, [r7, #0]
}
 80045a0:	bf00      	nop
 80045a2:	e7fe      	b.n	80045a2 <xTaskIncrementTick+0x46>
 80045a4:	4b43      	ldr	r3, [pc, #268]	; (80046b4 <xTaskIncrementTick+0x158>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	4b43      	ldr	r3, [pc, #268]	; (80046b8 <xTaskIncrementTick+0x15c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a41      	ldr	r2, [pc, #260]	; (80046b4 <xTaskIncrementTick+0x158>)
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	4a41      	ldr	r2, [pc, #260]	; (80046b8 <xTaskIncrementTick+0x15c>)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	4b40      	ldr	r3, [pc, #256]	; (80046bc <xTaskIncrementTick+0x160>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3301      	adds	r3, #1
 80045be:	4a3f      	ldr	r2, [pc, #252]	; (80046bc <xTaskIncrementTick+0x160>)
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	f000 fad3 	bl	8004b6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045c6:	4b3e      	ldr	r3, [pc, #248]	; (80046c0 <xTaskIncrementTick+0x164>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d34e      	bcc.n	800466e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045d0:	4b38      	ldr	r3, [pc, #224]	; (80046b4 <xTaskIncrementTick+0x158>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <xTaskIncrementTick+0x82>
 80045da:	2301      	movs	r3, #1
 80045dc:	e000      	b.n	80045e0 <xTaskIncrementTick+0x84>
 80045de:	2300      	movs	r3, #0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d004      	beq.n	80045ee <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045e4:	4b36      	ldr	r3, [pc, #216]	; (80046c0 <xTaskIncrementTick+0x164>)
 80045e6:	f04f 32ff 	mov.w	r2, #4294967295
 80045ea:	601a      	str	r2, [r3, #0]
					break;
 80045ec:	e03f      	b.n	800466e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80045ee:	4b31      	ldr	r3, [pc, #196]	; (80046b4 <xTaskIncrementTick+0x158>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	429a      	cmp	r2, r3
 8004604:	d203      	bcs.n	800460e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004606:	4a2e      	ldr	r2, [pc, #184]	; (80046c0 <xTaskIncrementTick+0x164>)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6013      	str	r3, [r2, #0]
						break;
 800460c:	e02f      	b.n	800466e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	3304      	adds	r3, #4
 8004612:	4618      	mov	r0, r3
 8004614:	f7fe feb2 	bl	800337c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461c:	2b00      	cmp	r3, #0
 800461e:	d004      	beq.n	800462a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	3318      	adds	r3, #24
 8004624:	4618      	mov	r0, r3
 8004626:	f7fe fea9 	bl	800337c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462e:	4b25      	ldr	r3, [pc, #148]	; (80046c4 <xTaskIncrementTick+0x168>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	429a      	cmp	r2, r3
 8004634:	d903      	bls.n	800463e <xTaskIncrementTick+0xe2>
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	4a22      	ldr	r2, [pc, #136]	; (80046c4 <xTaskIncrementTick+0x168>)
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004642:	4613      	mov	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4a1f      	ldr	r2, [pc, #124]	; (80046c8 <xTaskIncrementTick+0x16c>)
 800464c:	441a      	add	r2, r3
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	3304      	adds	r3, #4
 8004652:	4619      	mov	r1, r3
 8004654:	4610      	mov	r0, r2
 8004656:	f7fe fe36 	bl	80032c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465e:	4b1b      	ldr	r3, [pc, #108]	; (80046cc <xTaskIncrementTick+0x170>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	429a      	cmp	r2, r3
 8004666:	d3b3      	bcc.n	80045d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004668:	2301      	movs	r3, #1
 800466a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800466c:	e7b0      	b.n	80045d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800466e:	4b17      	ldr	r3, [pc, #92]	; (80046cc <xTaskIncrementTick+0x170>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004674:	4914      	ldr	r1, [pc, #80]	; (80046c8 <xTaskIncrementTick+0x16c>)
 8004676:	4613      	mov	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	440b      	add	r3, r1
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d907      	bls.n	8004696 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004686:	2301      	movs	r3, #1
 8004688:	617b      	str	r3, [r7, #20]
 800468a:	e004      	b.n	8004696 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800468c:	4b10      	ldr	r3, [pc, #64]	; (80046d0 <xTaskIncrementTick+0x174>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3301      	adds	r3, #1
 8004692:	4a0f      	ldr	r2, [pc, #60]	; (80046d0 <xTaskIncrementTick+0x174>)
 8004694:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004696:	4b0f      	ldr	r3, [pc, #60]	; (80046d4 <xTaskIncrementTick+0x178>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800469e:	2301      	movs	r3, #1
 80046a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80046a2:	697b      	ldr	r3, [r7, #20]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	20002180 	.word	0x20002180
 80046b0:	2000215c 	.word	0x2000215c
 80046b4:	20002110 	.word	0x20002110
 80046b8:	20002114 	.word	0x20002114
 80046bc:	20002170 	.word	0x20002170
 80046c0:	20002178 	.word	0x20002178
 80046c4:	20002160 	.word	0x20002160
 80046c8:	20001c88 	.word	0x20001c88
 80046cc:	20001c84 	.word	0x20001c84
 80046d0:	20002168 	.word	0x20002168
 80046d4:	2000216c 	.word	0x2000216c

080046d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046de:	4b27      	ldr	r3, [pc, #156]	; (800477c <vTaskSwitchContext+0xa4>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046e6:	4b26      	ldr	r3, [pc, #152]	; (8004780 <vTaskSwitchContext+0xa8>)
 80046e8:	2201      	movs	r2, #1
 80046ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80046ec:	e041      	b.n	8004772 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80046ee:	4b24      	ldr	r3, [pc, #144]	; (8004780 <vTaskSwitchContext+0xa8>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80046f4:	4b23      	ldr	r3, [pc, #140]	; (8004784 <vTaskSwitchContext+0xac>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	e010      	b.n	800471e <vTaskSwitchContext+0x46>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10a      	bne.n	8004718 <vTaskSwitchContext+0x40>
	__asm volatile
 8004702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	607b      	str	r3, [r7, #4]
}
 8004714:	bf00      	nop
 8004716:	e7fe      	b.n	8004716 <vTaskSwitchContext+0x3e>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3b01      	subs	r3, #1
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	491a      	ldr	r1, [pc, #104]	; (8004788 <vTaskSwitchContext+0xb0>)
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4613      	mov	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0e4      	beq.n	80046fc <vTaskSwitchContext+0x24>
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4613      	mov	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4a12      	ldr	r2, [pc, #72]	; (8004788 <vTaskSwitchContext+0xb0>)
 800473e:	4413      	add	r3, r2
 8004740:	60bb      	str	r3, [r7, #8]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	605a      	str	r2, [r3, #4]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	3308      	adds	r3, #8
 8004754:	429a      	cmp	r2, r3
 8004756:	d104      	bne.n	8004762 <vTaskSwitchContext+0x8a>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	605a      	str	r2, [r3, #4]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	4a08      	ldr	r2, [pc, #32]	; (800478c <vTaskSwitchContext+0xb4>)
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	4a05      	ldr	r2, [pc, #20]	; (8004784 <vTaskSwitchContext+0xac>)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6013      	str	r3, [r2, #0]
}
 8004772:	bf00      	nop
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr
 800477c:	20002180 	.word	0x20002180
 8004780:	2000216c 	.word	0x2000216c
 8004784:	20002160 	.word	0x20002160
 8004788:	20001c88 	.word	0x20001c88
 800478c:	20001c84 	.word	0x20001c84

08004790 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10a      	bne.n	80047b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	60fb      	str	r3, [r7, #12]
}
 80047b2:	bf00      	nop
 80047b4:	e7fe      	b.n	80047b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047b6:	4b07      	ldr	r3, [pc, #28]	; (80047d4 <vTaskPlaceOnEventList+0x44>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3318      	adds	r3, #24
 80047bc:	4619      	mov	r1, r3
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fe fda4 	bl	800330c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047c4:	2101      	movs	r1, #1
 80047c6:	6838      	ldr	r0, [r7, #0]
 80047c8:	f000 fa80 	bl	8004ccc <prvAddCurrentTaskToDelayedList>
}
 80047cc:	bf00      	nop
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	20001c84 	.word	0x20001c84

080047d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10a      	bne.n	8004800 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	617b      	str	r3, [r7, #20]
}
 80047fc:	bf00      	nop
 80047fe:	e7fe      	b.n	80047fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004800:	4b0a      	ldr	r3, [pc, #40]	; (800482c <vTaskPlaceOnEventListRestricted+0x54>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3318      	adds	r3, #24
 8004806:	4619      	mov	r1, r3
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f7fe fd5c 	bl	80032c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004814:	f04f 33ff 	mov.w	r3, #4294967295
 8004818:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	68b8      	ldr	r0, [r7, #8]
 800481e:	f000 fa55 	bl	8004ccc <prvAddCurrentTaskToDelayedList>
	}
 8004822:	bf00      	nop
 8004824:	3718      	adds	r7, #24
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20001c84 	.word	0x20001c84

08004830 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10a      	bne.n	800485c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	60fb      	str	r3, [r7, #12]
}
 8004858:	bf00      	nop
 800485a:	e7fe      	b.n	800485a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	3318      	adds	r3, #24
 8004860:	4618      	mov	r0, r3
 8004862:	f7fe fd8b 	bl	800337c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004866:	4b1e      	ldr	r3, [pc, #120]	; (80048e0 <xTaskRemoveFromEventList+0xb0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d11d      	bne.n	80048aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	3304      	adds	r3, #4
 8004872:	4618      	mov	r0, r3
 8004874:	f7fe fd82 	bl	800337c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487c:	4b19      	ldr	r3, [pc, #100]	; (80048e4 <xTaskRemoveFromEventList+0xb4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d903      	bls.n	800488c <xTaskRemoveFromEventList+0x5c>
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004888:	4a16      	ldr	r2, [pc, #88]	; (80048e4 <xTaskRemoveFromEventList+0xb4>)
 800488a:	6013      	str	r3, [r2, #0]
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004890:	4613      	mov	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4a13      	ldr	r2, [pc, #76]	; (80048e8 <xTaskRemoveFromEventList+0xb8>)
 800489a:	441a      	add	r2, r3
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	3304      	adds	r3, #4
 80048a0:	4619      	mov	r1, r3
 80048a2:	4610      	mov	r0, r2
 80048a4:	f7fe fd0f 	bl	80032c6 <vListInsertEnd>
 80048a8:	e005      	b.n	80048b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	3318      	adds	r3, #24
 80048ae:	4619      	mov	r1, r3
 80048b0:	480e      	ldr	r0, [pc, #56]	; (80048ec <xTaskRemoveFromEventList+0xbc>)
 80048b2:	f7fe fd08 	bl	80032c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ba:	4b0d      	ldr	r3, [pc, #52]	; (80048f0 <xTaskRemoveFromEventList+0xc0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d905      	bls.n	80048d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80048c4:	2301      	movs	r3, #1
 80048c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80048c8:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <xTaskRemoveFromEventList+0xc4>)
 80048ca:	2201      	movs	r2, #1
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	e001      	b.n	80048d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80048d0:	2300      	movs	r3, #0
 80048d2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80048d4:	697b      	ldr	r3, [r7, #20]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20002180 	.word	0x20002180
 80048e4:	20002160 	.word	0x20002160
 80048e8:	20001c88 	.word	0x20001c88
 80048ec:	20002118 	.word	0x20002118
 80048f0:	20001c84 	.word	0x20001c84
 80048f4:	2000216c 	.word	0x2000216c

080048f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004900:	4b06      	ldr	r3, [pc, #24]	; (800491c <vTaskInternalSetTimeOutState+0x24>)
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004908:	4b05      	ldr	r3, [pc, #20]	; (8004920 <vTaskInternalSetTimeOutState+0x28>)
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	605a      	str	r2, [r3, #4]
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	20002170 	.word	0x20002170
 8004920:	2000215c 	.word	0x2000215c

08004924 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b088      	sub	sp, #32
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10a      	bne.n	800494a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	613b      	str	r3, [r7, #16]
}
 8004946:	bf00      	nop
 8004948:	e7fe      	b.n	8004948 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10a      	bne.n	8004966 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	60fb      	str	r3, [r7, #12]
}
 8004962:	bf00      	nop
 8004964:	e7fe      	b.n	8004964 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004966:	f000 fe09 	bl	800557c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800496a:	4b1d      	ldr	r3, [pc, #116]	; (80049e0 <xTaskCheckForTimeOut+0xbc>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004982:	d102      	bne.n	800498a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004984:	2300      	movs	r3, #0
 8004986:	61fb      	str	r3, [r7, #28]
 8004988:	e023      	b.n	80049d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	4b15      	ldr	r3, [pc, #84]	; (80049e4 <xTaskCheckForTimeOut+0xc0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	429a      	cmp	r2, r3
 8004994:	d007      	beq.n	80049a6 <xTaskCheckForTimeOut+0x82>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	429a      	cmp	r2, r3
 800499e:	d302      	bcc.n	80049a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80049a0:	2301      	movs	r3, #1
 80049a2:	61fb      	str	r3, [r7, #28]
 80049a4:	e015      	b.n	80049d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d20b      	bcs.n	80049c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	1ad2      	subs	r2, r2, r3
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7ff ff9b 	bl	80048f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	61fb      	str	r3, [r7, #28]
 80049c6:	e004      	b.n	80049d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80049ce:	2301      	movs	r3, #1
 80049d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80049d2:	f000 fe03 	bl	80055dc <vPortExitCritical>

	return xReturn;
 80049d6:	69fb      	ldr	r3, [r7, #28]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3720      	adds	r7, #32
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	2000215c 	.word	0x2000215c
 80049e4:	20002170 	.word	0x20002170

080049e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80049ec:	4b03      	ldr	r3, [pc, #12]	; (80049fc <vTaskMissedYield+0x14>)
 80049ee:	2201      	movs	r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
}
 80049f2:	bf00      	nop
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc80      	pop	{r7}
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	2000216c 	.word	0x2000216c

08004a00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a08:	f000 f852 	bl	8004ab0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a0c:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <prvIdleTask+0x28>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d9f9      	bls.n	8004a08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a14:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <prvIdleTask+0x2c>)
 8004a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a24:	e7f0      	b.n	8004a08 <prvIdleTask+0x8>
 8004a26:	bf00      	nop
 8004a28:	20001c88 	.word	0x20001c88
 8004a2c:	e000ed04 	.word	0xe000ed04

08004a30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a36:	2300      	movs	r3, #0
 8004a38:	607b      	str	r3, [r7, #4]
 8004a3a:	e00c      	b.n	8004a56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4a12      	ldr	r2, [pc, #72]	; (8004a90 <prvInitialiseTaskLists+0x60>)
 8004a48:	4413      	add	r3, r2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fe fc10 	bl	8003270 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3301      	adds	r3, #1
 8004a54:	607b      	str	r3, [r7, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b37      	cmp	r3, #55	; 0x37
 8004a5a:	d9ef      	bls.n	8004a3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a5c:	480d      	ldr	r0, [pc, #52]	; (8004a94 <prvInitialiseTaskLists+0x64>)
 8004a5e:	f7fe fc07 	bl	8003270 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a62:	480d      	ldr	r0, [pc, #52]	; (8004a98 <prvInitialiseTaskLists+0x68>)
 8004a64:	f7fe fc04 	bl	8003270 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a68:	480c      	ldr	r0, [pc, #48]	; (8004a9c <prvInitialiseTaskLists+0x6c>)
 8004a6a:	f7fe fc01 	bl	8003270 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a6e:	480c      	ldr	r0, [pc, #48]	; (8004aa0 <prvInitialiseTaskLists+0x70>)
 8004a70:	f7fe fbfe 	bl	8003270 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a74:	480b      	ldr	r0, [pc, #44]	; (8004aa4 <prvInitialiseTaskLists+0x74>)
 8004a76:	f7fe fbfb 	bl	8003270 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a7a:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <prvInitialiseTaskLists+0x78>)
 8004a7c:	4a05      	ldr	r2, [pc, #20]	; (8004a94 <prvInitialiseTaskLists+0x64>)
 8004a7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a80:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <prvInitialiseTaskLists+0x7c>)
 8004a82:	4a05      	ldr	r2, [pc, #20]	; (8004a98 <prvInitialiseTaskLists+0x68>)
 8004a84:	601a      	str	r2, [r3, #0]
}
 8004a86:	bf00      	nop
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20001c88 	.word	0x20001c88
 8004a94:	200020e8 	.word	0x200020e8
 8004a98:	200020fc 	.word	0x200020fc
 8004a9c:	20002118 	.word	0x20002118
 8004aa0:	2000212c 	.word	0x2000212c
 8004aa4:	20002144 	.word	0x20002144
 8004aa8:	20002110 	.word	0x20002110
 8004aac:	20002114 	.word	0x20002114

08004ab0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ab6:	e019      	b.n	8004aec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ab8:	f000 fd60 	bl	800557c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004abc:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <prvCheckTasksWaitingTermination+0x50>)
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fe fc57 	bl	800337c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ace:	4b0d      	ldr	r3, [pc, #52]	; (8004b04 <prvCheckTasksWaitingTermination+0x54>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	4a0b      	ldr	r2, [pc, #44]	; (8004b04 <prvCheckTasksWaitingTermination+0x54>)
 8004ad6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ad8:	4b0b      	ldr	r3, [pc, #44]	; (8004b08 <prvCheckTasksWaitingTermination+0x58>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	4a0a      	ldr	r2, [pc, #40]	; (8004b08 <prvCheckTasksWaitingTermination+0x58>)
 8004ae0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ae2:	f000 fd7b 	bl	80055dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f810 	bl	8004b0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004aec:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <prvCheckTasksWaitingTermination+0x58>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e1      	bne.n	8004ab8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	2000212c 	.word	0x2000212c
 8004b04:	20002158 	.word	0x20002158
 8004b08:	20002140 	.word	0x20002140

08004b0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d108      	bne.n	8004b30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 feee 	bl	8005904 <vPortFree>
				vPortFree( pxTCB );
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 feeb 	bl	8005904 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b2e:	e018      	b.n	8004b62 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d103      	bne.n	8004b42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fee2 	bl	8005904 <vPortFree>
	}
 8004b40:	e00f      	b.n	8004b62 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d00a      	beq.n	8004b62 <prvDeleteTCB+0x56>
	__asm volatile
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	60fb      	str	r3, [r7, #12]
}
 8004b5e:	bf00      	nop
 8004b60:	e7fe      	b.n	8004b60 <prvDeleteTCB+0x54>
	}
 8004b62:	bf00      	nop
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b72:	4b0e      	ldr	r3, [pc, #56]	; (8004bac <prvResetNextTaskUnblockTime+0x40>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <prvResetNextTaskUnblockTime+0x14>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <prvResetNextTaskUnblockTime+0x16>
 8004b80:	2300      	movs	r3, #0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d004      	beq.n	8004b90 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b86:	4b0a      	ldr	r3, [pc, #40]	; (8004bb0 <prvResetNextTaskUnblockTime+0x44>)
 8004b88:	f04f 32ff 	mov.w	r2, #4294967295
 8004b8c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b8e:	e008      	b.n	8004ba2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b90:	4b06      	ldr	r3, [pc, #24]	; (8004bac <prvResetNextTaskUnblockTime+0x40>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	4a04      	ldr	r2, [pc, #16]	; (8004bb0 <prvResetNextTaskUnblockTime+0x44>)
 8004ba0:	6013      	str	r3, [r2, #0]
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr
 8004bac:	20002110 	.word	0x20002110
 8004bb0:	20002178 	.word	0x20002178

08004bb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bba:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <xTaskGetSchedulerState+0x34>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d102      	bne.n	8004bc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	607b      	str	r3, [r7, #4]
 8004bc6:	e008      	b.n	8004bda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bc8:	4b08      	ldr	r3, [pc, #32]	; (8004bec <xTaskGetSchedulerState+0x38>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d102      	bne.n	8004bd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	607b      	str	r3, [r7, #4]
 8004bd4:	e001      	b.n	8004bda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004bda:	687b      	ldr	r3, [r7, #4]
	}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bc80      	pop	{r7}
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	20002164 	.word	0x20002164
 8004bec:	20002180 	.word	0x20002180

08004bf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d056      	beq.n	8004cb4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c06:	4b2e      	ldr	r3, [pc, #184]	; (8004cc0 <xTaskPriorityDisinherit+0xd0>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d00a      	beq.n	8004c26 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	60fb      	str	r3, [r7, #12]
}
 8004c22:	bf00      	nop
 8004c24:	e7fe      	b.n	8004c24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	60bb      	str	r3, [r7, #8]
}
 8004c40:	bf00      	nop
 8004c42:	e7fe      	b.n	8004c42 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c48:	1e5a      	subs	r2, r3, #1
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d02c      	beq.n	8004cb4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d128      	bne.n	8004cb4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	3304      	adds	r3, #4
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fe fb88 	bl	800337c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c84:	4b0f      	ldr	r3, [pc, #60]	; (8004cc4 <xTaskPriorityDisinherit+0xd4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d903      	bls.n	8004c94 <xTaskPriorityDisinherit+0xa4>
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	4a0c      	ldr	r2, [pc, #48]	; (8004cc4 <xTaskPriorityDisinherit+0xd4>)
 8004c92:	6013      	str	r3, [r2, #0]
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c98:	4613      	mov	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4a09      	ldr	r2, [pc, #36]	; (8004cc8 <xTaskPriorityDisinherit+0xd8>)
 8004ca2:	441a      	add	r2, r3
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4610      	mov	r0, r2
 8004cac:	f7fe fb0b 	bl	80032c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004cb4:	697b      	ldr	r3, [r7, #20]
	}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20001c84 	.word	0x20001c84
 8004cc4:	20002160 	.word	0x20002160
 8004cc8:	20001c88 	.word	0x20001c88

08004ccc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004cd6:	4b21      	ldr	r3, [pc, #132]	; (8004d5c <prvAddCurrentTaskToDelayedList+0x90>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cdc:	4b20      	ldr	r3, [pc, #128]	; (8004d60 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fe fb4a 	bl	800337c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cee:	d10a      	bne.n	8004d06 <prvAddCurrentTaskToDelayedList+0x3a>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d007      	beq.n	8004d06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cf6:	4b1a      	ldr	r3, [pc, #104]	; (8004d60 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4819      	ldr	r0, [pc, #100]	; (8004d64 <prvAddCurrentTaskToDelayedList+0x98>)
 8004d00:	f7fe fae1 	bl	80032c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d04:	e026      	b.n	8004d54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d0e:	4b14      	ldr	r3, [pc, #80]	; (8004d60 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d209      	bcs.n	8004d32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d1e:	4b12      	ldr	r3, [pc, #72]	; (8004d68 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	4b0f      	ldr	r3, [pc, #60]	; (8004d60 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3304      	adds	r3, #4
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	f7fe faee 	bl	800330c <vListInsert>
}
 8004d30:	e010      	b.n	8004d54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d32:	4b0e      	ldr	r3, [pc, #56]	; (8004d6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4610      	mov	r0, r2
 8004d40:	f7fe fae4 	bl	800330c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d44:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d202      	bcs.n	8004d54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004d4e:	4a08      	ldr	r2, [pc, #32]	; (8004d70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	6013      	str	r3, [r2, #0]
}
 8004d54:	bf00      	nop
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	2000215c 	.word	0x2000215c
 8004d60:	20001c84 	.word	0x20001c84
 8004d64:	20002144 	.word	0x20002144
 8004d68:	20002114 	.word	0x20002114
 8004d6c:	20002110 	.word	0x20002110
 8004d70:	20002178 	.word	0x20002178

08004d74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b08a      	sub	sp, #40	; 0x28
 8004d78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d7e:	f000 facb 	bl	8005318 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d82:	4b1c      	ldr	r3, [pc, #112]	; (8004df4 <xTimerCreateTimerTask+0x80>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d021      	beq.n	8004dce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d92:	1d3a      	adds	r2, r7, #4
 8004d94:	f107 0108 	add.w	r1, r7, #8
 8004d98:	f107 030c 	add.w	r3, r7, #12
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fe fa4d 	bl	800323c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	9202      	str	r2, [sp, #8]
 8004daa:	9301      	str	r3, [sp, #4]
 8004dac:	2302      	movs	r3, #2
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	2300      	movs	r3, #0
 8004db2:	460a      	mov	r2, r1
 8004db4:	4910      	ldr	r1, [pc, #64]	; (8004df8 <xTimerCreateTimerTask+0x84>)
 8004db6:	4811      	ldr	r0, [pc, #68]	; (8004dfc <xTimerCreateTimerTask+0x88>)
 8004db8:	f7ff f8e4 	bl	8003f84 <xTaskCreateStatic>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	4a10      	ldr	r2, [pc, #64]	; (8004e00 <xTimerCreateTimerTask+0x8c>)
 8004dc0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004dc2:	4b0f      	ldr	r3, [pc, #60]	; (8004e00 <xTimerCreateTimerTask+0x8c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10a      	bne.n	8004dea <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	613b      	str	r3, [r7, #16]
}
 8004de6:	bf00      	nop
 8004de8:	e7fe      	b.n	8004de8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004dea:	697b      	ldr	r3, [r7, #20]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	200021b4 	.word	0x200021b4
 8004df8:	08005c1c 	.word	0x08005c1c
 8004dfc:	08004f21 	.word	0x08004f21
 8004e00:	200021b8 	.word	0x200021b8

08004e04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08a      	sub	sp, #40	; 0x28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
 8004e10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004e12:	2300      	movs	r3, #0
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10a      	bne.n	8004e32 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e20:	f383 8811 	msr	BASEPRI, r3
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	623b      	str	r3, [r7, #32]
}
 8004e2e:	bf00      	nop
 8004e30:	e7fe      	b.n	8004e30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004e32:	4b1a      	ldr	r3, [pc, #104]	; (8004e9c <xTimerGenericCommand+0x98>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d02a      	beq.n	8004e90 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b05      	cmp	r3, #5
 8004e4a:	dc18      	bgt.n	8004e7e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e4c:	f7ff feb2 	bl	8004bb4 <xTaskGetSchedulerState>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d109      	bne.n	8004e6a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e56:	4b11      	ldr	r3, [pc, #68]	; (8004e9c <xTimerGenericCommand+0x98>)
 8004e58:	6818      	ldr	r0, [r3, #0]
 8004e5a:	f107 0110 	add.w	r1, r7, #16
 8004e5e:	2300      	movs	r3, #0
 8004e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e62:	f7fe fc5f 	bl	8003724 <xQueueGenericSend>
 8004e66:	6278      	str	r0, [r7, #36]	; 0x24
 8004e68:	e012      	b.n	8004e90 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e6a:	4b0c      	ldr	r3, [pc, #48]	; (8004e9c <xTimerGenericCommand+0x98>)
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	f107 0110 	add.w	r1, r7, #16
 8004e72:	2300      	movs	r3, #0
 8004e74:	2200      	movs	r2, #0
 8004e76:	f7fe fc55 	bl	8003724 <xQueueGenericSend>
 8004e7a:	6278      	str	r0, [r7, #36]	; 0x24
 8004e7c:	e008      	b.n	8004e90 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e7e:	4b07      	ldr	r3, [pc, #28]	; (8004e9c <xTimerGenericCommand+0x98>)
 8004e80:	6818      	ldr	r0, [r3, #0]
 8004e82:	f107 0110 	add.w	r1, r7, #16
 8004e86:	2300      	movs	r3, #0
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	f7fe fd49 	bl	8003920 <xQueueGenericSendFromISR>
 8004e8e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3728      	adds	r7, #40	; 0x28
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	200021b4 	.word	0x200021b4

08004ea0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b088      	sub	sp, #32
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004eaa:	4b1c      	ldr	r3, [pc, #112]	; (8004f1c <prvProcessExpiredTimer+0x7c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fe fa5f 	bl	800337c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d122      	bne.n	8004f0c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	699a      	ldr	r2, [r3, #24]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	18d1      	adds	r1, r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	6978      	ldr	r0, [r7, #20]
 8004ed4:	f000 f8c8 	bl	8005068 <prvInsertTimerInActiveList>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d016      	beq.n	8004f0c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ede:	2300      	movs	r3, #0
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	6978      	ldr	r0, [r7, #20]
 8004eea:	f7ff ff8b 	bl	8004e04 <xTimerGenericCommand>
 8004eee:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10a      	bne.n	8004f0c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efa:	f383 8811 	msr	BASEPRI, r3
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	60fb      	str	r3, [r7, #12]
}
 8004f08:	bf00      	nop
 8004f0a:	e7fe      	b.n	8004f0a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	6978      	ldr	r0, [r7, #20]
 8004f12:	4798      	blx	r3
}
 8004f14:	bf00      	nop
 8004f16:	3718      	adds	r7, #24
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	200021ac 	.word	0x200021ac

08004f20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f28:	f107 0308 	add.w	r3, r7, #8
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 f857 	bl	8004fe0 <prvGetNextExpireTime>
 8004f32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4619      	mov	r1, r3
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 f803 	bl	8004f44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f3e:	f000 f8d5 	bl	80050ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f42:	e7f1      	b.n	8004f28 <prvTimerTask+0x8>

08004f44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f4e:	f7ff fa4b 	bl	80043e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f52:	f107 0308 	add.w	r3, r7, #8
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 f866 	bl	8005028 <prvSampleTimeNow>
 8004f5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d130      	bne.n	8004fc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10a      	bne.n	8004f80 <prvProcessTimerOrBlockTask+0x3c>
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d806      	bhi.n	8004f80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004f72:	f7ff fa47 	bl	8004404 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f76:	68f9      	ldr	r1, [r7, #12]
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7ff ff91 	bl	8004ea0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f7e:	e024      	b.n	8004fca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d008      	beq.n	8004f98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f86:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <prvProcessTimerOrBlockTask+0x90>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bf0c      	ite	eq
 8004f90:	2301      	moveq	r3, #1
 8004f92:	2300      	movne	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f98:	4b0f      	ldr	r3, [pc, #60]	; (8004fd8 <prvProcessTimerOrBlockTask+0x94>)
 8004f9a:	6818      	ldr	r0, [r3, #0]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	f7fe ffb9 	bl	8003f1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004faa:	f7ff fa2b 	bl	8004404 <xTaskResumeAll>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10a      	bne.n	8004fca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004fb4:	4b09      	ldr	r3, [pc, #36]	; (8004fdc <prvProcessTimerOrBlockTask+0x98>)
 8004fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	f3bf 8f6f 	isb	sy
}
 8004fc4:	e001      	b.n	8004fca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004fc6:	f7ff fa1d 	bl	8004404 <xTaskResumeAll>
}
 8004fca:	bf00      	nop
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	200021b0 	.word	0x200021b0
 8004fd8:	200021b4 	.word	0x200021b4
 8004fdc:	e000ed04 	.word	0xe000ed04

08004fe0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004fe8:	4b0e      	ldr	r3, [pc, #56]	; (8005024 <prvGetNextExpireTime+0x44>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	bf0c      	ite	eq
 8004ff2:	2301      	moveq	r3, #1
 8004ff4:	2300      	movne	r3, #0
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d105      	bne.n	8005012 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005006:	4b07      	ldr	r3, [pc, #28]	; (8005024 <prvGetNextExpireTime+0x44>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	e001      	b.n	8005016 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005016:	68fb      	ldr	r3, [r7, #12]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	bc80      	pop	{r7}
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	200021ac 	.word	0x200021ac

08005028 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005030:	f7ff fa86 	bl	8004540 <xTaskGetTickCount>
 8005034:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005036:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <prvSampleTimeNow+0x3c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	429a      	cmp	r2, r3
 800503e:	d205      	bcs.n	800504c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005040:	f000 f908 	bl	8005254 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	e002      	b.n	8005052 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005052:	4a04      	ldr	r2, [pc, #16]	; (8005064 <prvSampleTimeNow+0x3c>)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005058:	68fb      	ldr	r3, [r7, #12]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	200021bc 	.word	0x200021bc

08005068 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	429a      	cmp	r2, r3
 800508c:	d812      	bhi.n	80050b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	1ad2      	subs	r2, r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	429a      	cmp	r2, r3
 800509a:	d302      	bcc.n	80050a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800509c:	2301      	movs	r3, #1
 800509e:	617b      	str	r3, [r7, #20]
 80050a0:	e01b      	b.n	80050da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80050a2:	4b10      	ldr	r3, [pc, #64]	; (80050e4 <prvInsertTimerInActiveList+0x7c>)
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	3304      	adds	r3, #4
 80050aa:	4619      	mov	r1, r3
 80050ac:	4610      	mov	r0, r2
 80050ae:	f7fe f92d 	bl	800330c <vListInsert>
 80050b2:	e012      	b.n	80050da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d206      	bcs.n	80050ca <prvInsertTimerInActiveList+0x62>
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d302      	bcc.n	80050ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80050c4:	2301      	movs	r3, #1
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	e007      	b.n	80050da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050ca:	4b07      	ldr	r3, [pc, #28]	; (80050e8 <prvInsertTimerInActiveList+0x80>)
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3304      	adds	r3, #4
 80050d2:	4619      	mov	r1, r3
 80050d4:	4610      	mov	r0, r2
 80050d6:	f7fe f919 	bl	800330c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80050da:	697b      	ldr	r3, [r7, #20]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	200021b0 	.word	0x200021b0
 80050e8:	200021ac 	.word	0x200021ac

080050ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08e      	sub	sp, #56	; 0x38
 80050f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050f2:	e09d      	b.n	8005230 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	da18      	bge.n	800512c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80050fa:	1d3b      	adds	r3, r7, #4
 80050fc:	3304      	adds	r3, #4
 80050fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10a      	bne.n	800511c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	61fb      	str	r3, [r7, #28]
}
 8005118:	bf00      	nop
 800511a:	e7fe      	b.n	800511a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800511c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005122:	6850      	ldr	r0, [r2, #4]
 8005124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005126:	6892      	ldr	r2, [r2, #8]
 8005128:	4611      	mov	r1, r2
 800512a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	db7d      	blt.n	800522e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d004      	beq.n	8005148 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005140:	3304      	adds	r3, #4
 8005142:	4618      	mov	r0, r3
 8005144:	f7fe f91a 	bl	800337c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005148:	463b      	mov	r3, r7
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff ff6c 	bl	8005028 <prvSampleTimeNow>
 8005150:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b09      	cmp	r3, #9
 8005156:	d86b      	bhi.n	8005230 <prvProcessReceivedCommands+0x144>
 8005158:	a201      	add	r2, pc, #4	; (adr r2, 8005160 <prvProcessReceivedCommands+0x74>)
 800515a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515e:	bf00      	nop
 8005160:	08005189 	.word	0x08005189
 8005164:	08005189 	.word	0x08005189
 8005168:	08005189 	.word	0x08005189
 800516c:	08005231 	.word	0x08005231
 8005170:	080051e5 	.word	0x080051e5
 8005174:	0800521d 	.word	0x0800521d
 8005178:	08005189 	.word	0x08005189
 800517c:	08005189 	.word	0x08005189
 8005180:	08005231 	.word	0x08005231
 8005184:	080051e5 	.word	0x080051e5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	18d1      	adds	r1, r2, r3
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005196:	f7ff ff67 	bl	8005068 <prvInsertTimerInActiveList>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d047      	beq.n	8005230 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051a6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80051a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d13f      	bne.n	8005230 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	441a      	add	r2, r3
 80051b8:	2300      	movs	r3, #0
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	2300      	movs	r3, #0
 80051be:	2100      	movs	r1, #0
 80051c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051c2:	f7ff fe1f 	bl	8004e04 <xTimerGenericCommand>
 80051c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d130      	bne.n	8005230 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80051ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	61bb      	str	r3, [r7, #24]
}
 80051e0:	bf00      	nop
 80051e2:	e7fe      	b.n	80051e2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10a      	bne.n	8005208 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80051f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	617b      	str	r3, [r7, #20]
}
 8005204:	bf00      	nop
 8005206:	e7fe      	b.n	8005206 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520a:	699a      	ldr	r2, [r3, #24]
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	18d1      	adds	r1, r2, r3
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005216:	f7ff ff27 	bl	8005068 <prvInsertTimerInActiveList>
					break;
 800521a:	e009      	b.n	8005230 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800521c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005222:	2b00      	cmp	r3, #0
 8005224:	d104      	bne.n	8005230 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005228:	f000 fb6c 	bl	8005904 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800522c:	e000      	b.n	8005230 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800522e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005230:	4b07      	ldr	r3, [pc, #28]	; (8005250 <prvProcessReceivedCommands+0x164>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	1d39      	adds	r1, r7, #4
 8005236:	2200      	movs	r2, #0
 8005238:	4618      	mov	r0, r3
 800523a:	f7fe fc09 	bl	8003a50 <xQueueReceive>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	f47f af57 	bne.w	80050f4 <prvProcessReceivedCommands+0x8>
	}
}
 8005246:	bf00      	nop
 8005248:	bf00      	nop
 800524a:	3730      	adds	r7, #48	; 0x30
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	200021b4 	.word	0x200021b4

08005254 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800525a:	e045      	b.n	80052e8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800525c:	4b2c      	ldr	r3, [pc, #176]	; (8005310 <prvSwitchTimerLists+0xbc>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005266:	4b2a      	ldr	r3, [pc, #168]	; (8005310 <prvSwitchTimerLists+0xbc>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	3304      	adds	r3, #4
 8005274:	4618      	mov	r0, r3
 8005276:	f7fe f881 	bl	800337c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d12e      	bne.n	80052e8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	4413      	add	r3, r2
 8005292:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	429a      	cmp	r2, r3
 800529a:	d90e      	bls.n	80052ba <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052a8:	4b19      	ldr	r3, [pc, #100]	; (8005310 <prvSwitchTimerLists+0xbc>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3304      	adds	r3, #4
 80052b0:	4619      	mov	r1, r3
 80052b2:	4610      	mov	r0, r2
 80052b4:	f7fe f82a 	bl	800330c <vListInsert>
 80052b8:	e016      	b.n	80052e8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052ba:	2300      	movs	r3, #0
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	2300      	movs	r3, #0
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	2100      	movs	r1, #0
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f7ff fd9d 	bl	8004e04 <xTimerGenericCommand>
 80052ca:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10a      	bne.n	80052e8 <prvSwitchTimerLists+0x94>
	__asm volatile
 80052d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	603b      	str	r3, [r7, #0]
}
 80052e4:	bf00      	nop
 80052e6:	e7fe      	b.n	80052e6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052e8:	4b09      	ldr	r3, [pc, #36]	; (8005310 <prvSwitchTimerLists+0xbc>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1b4      	bne.n	800525c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80052f2:	4b07      	ldr	r3, [pc, #28]	; (8005310 <prvSwitchTimerLists+0xbc>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80052f8:	4b06      	ldr	r3, [pc, #24]	; (8005314 <prvSwitchTimerLists+0xc0>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a04      	ldr	r2, [pc, #16]	; (8005310 <prvSwitchTimerLists+0xbc>)
 80052fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005300:	4a04      	ldr	r2, [pc, #16]	; (8005314 <prvSwitchTimerLists+0xc0>)
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	6013      	str	r3, [r2, #0]
}
 8005306:	bf00      	nop
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	200021ac 	.word	0x200021ac
 8005314:	200021b0 	.word	0x200021b0

08005318 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800531e:	f000 f92d 	bl	800557c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005322:	4b15      	ldr	r3, [pc, #84]	; (8005378 <prvCheckForValidListAndQueue+0x60>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d120      	bne.n	800536c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800532a:	4814      	ldr	r0, [pc, #80]	; (800537c <prvCheckForValidListAndQueue+0x64>)
 800532c:	f7fd ffa0 	bl	8003270 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005330:	4813      	ldr	r0, [pc, #76]	; (8005380 <prvCheckForValidListAndQueue+0x68>)
 8005332:	f7fd ff9d 	bl	8003270 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005336:	4b13      	ldr	r3, [pc, #76]	; (8005384 <prvCheckForValidListAndQueue+0x6c>)
 8005338:	4a10      	ldr	r2, [pc, #64]	; (800537c <prvCheckForValidListAndQueue+0x64>)
 800533a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800533c:	4b12      	ldr	r3, [pc, #72]	; (8005388 <prvCheckForValidListAndQueue+0x70>)
 800533e:	4a10      	ldr	r2, [pc, #64]	; (8005380 <prvCheckForValidListAndQueue+0x68>)
 8005340:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005342:	2300      	movs	r3, #0
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	4b11      	ldr	r3, [pc, #68]	; (800538c <prvCheckForValidListAndQueue+0x74>)
 8005348:	4a11      	ldr	r2, [pc, #68]	; (8005390 <prvCheckForValidListAndQueue+0x78>)
 800534a:	2110      	movs	r1, #16
 800534c:	200a      	movs	r0, #10
 800534e:	f7fe f8a7 	bl	80034a0 <xQueueGenericCreateStatic>
 8005352:	4603      	mov	r3, r0
 8005354:	4a08      	ldr	r2, [pc, #32]	; (8005378 <prvCheckForValidListAndQueue+0x60>)
 8005356:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005358:	4b07      	ldr	r3, [pc, #28]	; (8005378 <prvCheckForValidListAndQueue+0x60>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d005      	beq.n	800536c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005360:	4b05      	ldr	r3, [pc, #20]	; (8005378 <prvCheckForValidListAndQueue+0x60>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	490b      	ldr	r1, [pc, #44]	; (8005394 <prvCheckForValidListAndQueue+0x7c>)
 8005366:	4618      	mov	r0, r3
 8005368:	f7fe fd86 	bl	8003e78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800536c:	f000 f936 	bl	80055dc <vPortExitCritical>
}
 8005370:	bf00      	nop
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	200021b4 	.word	0x200021b4
 800537c:	20002184 	.word	0x20002184
 8005380:	20002198 	.word	0x20002198
 8005384:	200021ac 	.word	0x200021ac
 8005388:	200021b0 	.word	0x200021b0
 800538c:	20002260 	.word	0x20002260
 8005390:	200021c0 	.word	0x200021c0
 8005394:	08005c24 	.word	0x08005c24

08005398 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3b04      	subs	r3, #4
 80053a8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	3b04      	subs	r3, #4
 80053b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f023 0201 	bic.w	r2, r3, #1
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3b04      	subs	r3, #4
 80053c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053c8:	4a08      	ldr	r2, [pc, #32]	; (80053ec <pxPortInitialiseStack+0x54>)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	3b14      	subs	r3, #20
 80053d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	3b20      	subs	r3, #32
 80053de:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80053e0:	68fb      	ldr	r3, [r7, #12]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr
 80053ec:	080053f1 	.word	0x080053f1

080053f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053fa:	4b12      	ldr	r3, [pc, #72]	; (8005444 <prvTaskExitError+0x54>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005402:	d00a      	beq.n	800541a <prvTaskExitError+0x2a>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	60fb      	str	r3, [r7, #12]
}
 8005416:	bf00      	nop
 8005418:	e7fe      	b.n	8005418 <prvTaskExitError+0x28>
	__asm volatile
 800541a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	60bb      	str	r3, [r7, #8]
}
 800542c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800542e:	bf00      	nop
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0fc      	beq.n	8005430 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005436:	bf00      	nop
 8005438:	bf00      	nop
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	bc80      	pop	{r7}
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	2000000c 	.word	0x2000000c
	...

08005450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005450:	4b07      	ldr	r3, [pc, #28]	; (8005470 <pxCurrentTCBConst2>)
 8005452:	6819      	ldr	r1, [r3, #0]
 8005454:	6808      	ldr	r0, [r1, #0]
 8005456:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800545a:	f380 8809 	msr	PSP, r0
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f04f 0000 	mov.w	r0, #0
 8005466:	f380 8811 	msr	BASEPRI, r0
 800546a:	f04e 0e0d 	orr.w	lr, lr, #13
 800546e:	4770      	bx	lr

08005470 <pxCurrentTCBConst2>:
 8005470:	20001c84 	.word	0x20001c84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005474:	bf00      	nop
 8005476:	bf00      	nop

08005478 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005478:	4806      	ldr	r0, [pc, #24]	; (8005494 <prvPortStartFirstTask+0x1c>)
 800547a:	6800      	ldr	r0, [r0, #0]
 800547c:	6800      	ldr	r0, [r0, #0]
 800547e:	f380 8808 	msr	MSP, r0
 8005482:	b662      	cpsie	i
 8005484:	b661      	cpsie	f
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	df00      	svc	0
 8005490:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005492:	bf00      	nop
 8005494:	e000ed08 	.word	0xe000ed08

08005498 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800549e:	4b32      	ldr	r3, [pc, #200]	; (8005568 <xPortStartScheduler+0xd0>)
 80054a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	22ff      	movs	r2, #255	; 0xff
 80054ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80054b8:	78fb      	ldrb	r3, [r7, #3]
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	4b2a      	ldr	r3, [pc, #168]	; (800556c <xPortStartScheduler+0xd4>)
 80054c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80054c6:	4b2a      	ldr	r3, [pc, #168]	; (8005570 <xPortStartScheduler+0xd8>)
 80054c8:	2207      	movs	r2, #7
 80054ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054cc:	e009      	b.n	80054e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80054ce:	4b28      	ldr	r3, [pc, #160]	; (8005570 <xPortStartScheduler+0xd8>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3b01      	subs	r3, #1
 80054d4:	4a26      	ldr	r2, [pc, #152]	; (8005570 <xPortStartScheduler+0xd8>)
 80054d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054d8:	78fb      	ldrb	r3, [r7, #3]
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054e2:	78fb      	ldrb	r3, [r7, #3]
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ea:	2b80      	cmp	r3, #128	; 0x80
 80054ec:	d0ef      	beq.n	80054ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054ee:	4b20      	ldr	r3, [pc, #128]	; (8005570 <xPortStartScheduler+0xd8>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f1c3 0307 	rsb	r3, r3, #7
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d00a      	beq.n	8005510 <xPortStartScheduler+0x78>
	__asm volatile
 80054fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	60bb      	str	r3, [r7, #8]
}
 800550c:	bf00      	nop
 800550e:	e7fe      	b.n	800550e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005510:	4b17      	ldr	r3, [pc, #92]	; (8005570 <xPortStartScheduler+0xd8>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	021b      	lsls	r3, r3, #8
 8005516:	4a16      	ldr	r2, [pc, #88]	; (8005570 <xPortStartScheduler+0xd8>)
 8005518:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800551a:	4b15      	ldr	r3, [pc, #84]	; (8005570 <xPortStartScheduler+0xd8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005522:	4a13      	ldr	r2, [pc, #76]	; (8005570 <xPortStartScheduler+0xd8>)
 8005524:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	b2da      	uxtb	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800552e:	4b11      	ldr	r3, [pc, #68]	; (8005574 <xPortStartScheduler+0xdc>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a10      	ldr	r2, [pc, #64]	; (8005574 <xPortStartScheduler+0xdc>)
 8005534:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005538:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800553a:	4b0e      	ldr	r3, [pc, #56]	; (8005574 <xPortStartScheduler+0xdc>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a0d      	ldr	r2, [pc, #52]	; (8005574 <xPortStartScheduler+0xdc>)
 8005540:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005544:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005546:	f000 f8b9 	bl	80056bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800554a:	4b0b      	ldr	r3, [pc, #44]	; (8005578 <xPortStartScheduler+0xe0>)
 800554c:	2200      	movs	r2, #0
 800554e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005550:	f7ff ff92 	bl	8005478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005554:	f7ff f8c0 	bl	80046d8 <vTaskSwitchContext>
	prvTaskExitError();
 8005558:	f7ff ff4a 	bl	80053f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	e000e400 	.word	0xe000e400
 800556c:	200022b0 	.word	0x200022b0
 8005570:	200022b4 	.word	0x200022b4
 8005574:	e000ed20 	.word	0xe000ed20
 8005578:	2000000c 	.word	0x2000000c

0800557c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
	__asm volatile
 8005582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	607b      	str	r3, [r7, #4]
}
 8005594:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005596:	4b0f      	ldr	r3, [pc, #60]	; (80055d4 <vPortEnterCritical+0x58>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3301      	adds	r3, #1
 800559c:	4a0d      	ldr	r2, [pc, #52]	; (80055d4 <vPortEnterCritical+0x58>)
 800559e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80055a0:	4b0c      	ldr	r3, [pc, #48]	; (80055d4 <vPortEnterCritical+0x58>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d10f      	bne.n	80055c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80055a8:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <vPortEnterCritical+0x5c>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	603b      	str	r3, [r7, #0]
}
 80055c4:	bf00      	nop
 80055c6:	e7fe      	b.n	80055c6 <vPortEnterCritical+0x4a>
	}
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bc80      	pop	{r7}
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	2000000c 	.word	0x2000000c
 80055d8:	e000ed04 	.word	0xe000ed04

080055dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055e2:	4b11      	ldr	r3, [pc, #68]	; (8005628 <vPortExitCritical+0x4c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10a      	bne.n	8005600 <vPortExitCritical+0x24>
	__asm volatile
 80055ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	607b      	str	r3, [r7, #4]
}
 80055fc:	bf00      	nop
 80055fe:	e7fe      	b.n	80055fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005600:	4b09      	ldr	r3, [pc, #36]	; (8005628 <vPortExitCritical+0x4c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3b01      	subs	r3, #1
 8005606:	4a08      	ldr	r2, [pc, #32]	; (8005628 <vPortExitCritical+0x4c>)
 8005608:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800560a:	4b07      	ldr	r3, [pc, #28]	; (8005628 <vPortExitCritical+0x4c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d105      	bne.n	800561e <vPortExitCritical+0x42>
 8005612:	2300      	movs	r3, #0
 8005614:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	f383 8811 	msr	BASEPRI, r3
}
 800561c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr
 8005628:	2000000c 	.word	0x2000000c
 800562c:	00000000 	.word	0x00000000

08005630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005630:	f3ef 8009 	mrs	r0, PSP
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	4b0d      	ldr	r3, [pc, #52]	; (8005670 <pxCurrentTCBConst>)
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005640:	6010      	str	r0, [r2, #0]
 8005642:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005646:	f04f 0050 	mov.w	r0, #80	; 0x50
 800564a:	f380 8811 	msr	BASEPRI, r0
 800564e:	f7ff f843 	bl	80046d8 <vTaskSwitchContext>
 8005652:	f04f 0000 	mov.w	r0, #0
 8005656:	f380 8811 	msr	BASEPRI, r0
 800565a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800565e:	6819      	ldr	r1, [r3, #0]
 8005660:	6808      	ldr	r0, [r1, #0]
 8005662:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005666:	f380 8809 	msr	PSP, r0
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	4770      	bx	lr

08005670 <pxCurrentTCBConst>:
 8005670:	20001c84 	.word	0x20001c84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005674:	bf00      	nop
 8005676:	bf00      	nop

08005678 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
	__asm volatile
 800567e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005682:	f383 8811 	msr	BASEPRI, r3
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	607b      	str	r3, [r7, #4]
}
 8005690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005692:	f7fe ff63 	bl	800455c <xTaskIncrementTick>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800569c:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <SysTick_Handler+0x40>)
 800569e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	2300      	movs	r3, #0
 80056a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f383 8811 	msr	BASEPRI, r3
}
 80056ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056b0:	bf00      	nop
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	e000ed04 	.word	0xe000ed04

080056bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056c0:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <vPortSetupTimerInterrupt+0x30>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056c6:	4b0a      	ldr	r3, [pc, #40]	; (80056f0 <vPortSetupTimerInterrupt+0x34>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056cc:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <vPortSetupTimerInterrupt+0x38>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a09      	ldr	r2, [pc, #36]	; (80056f8 <vPortSetupTimerInterrupt+0x3c>)
 80056d2:	fba2 2303 	umull	r2, r3, r2, r3
 80056d6:	099b      	lsrs	r3, r3, #6
 80056d8:	4a08      	ldr	r2, [pc, #32]	; (80056fc <vPortSetupTimerInterrupt+0x40>)
 80056da:	3b01      	subs	r3, #1
 80056dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056de:	4b03      	ldr	r3, [pc, #12]	; (80056ec <vPortSetupTimerInterrupt+0x30>)
 80056e0:	2207      	movs	r2, #7
 80056e2:	601a      	str	r2, [r3, #0]
}
 80056e4:	bf00      	nop
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr
 80056ec:	e000e010 	.word	0xe000e010
 80056f0:	e000e018 	.word	0xe000e018
 80056f4:	20000000 	.word	0x20000000
 80056f8:	10624dd3 	.word	0x10624dd3
 80056fc:	e000e014 	.word	0xe000e014

08005700 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005706:	f3ef 8305 	mrs	r3, IPSR
 800570a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b0f      	cmp	r3, #15
 8005710:	d914      	bls.n	800573c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005712:	4a16      	ldr	r2, [pc, #88]	; (800576c <vPortValidateInterruptPriority+0x6c>)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4413      	add	r3, r2
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800571c:	4b14      	ldr	r3, [pc, #80]	; (8005770 <vPortValidateInterruptPriority+0x70>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	7afa      	ldrb	r2, [r7, #11]
 8005722:	429a      	cmp	r2, r3
 8005724:	d20a      	bcs.n	800573c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572a:	f383 8811 	msr	BASEPRI, r3
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f3bf 8f4f 	dsb	sy
 8005736:	607b      	str	r3, [r7, #4]
}
 8005738:	bf00      	nop
 800573a:	e7fe      	b.n	800573a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800573c:	4b0d      	ldr	r3, [pc, #52]	; (8005774 <vPortValidateInterruptPriority+0x74>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005744:	4b0c      	ldr	r3, [pc, #48]	; (8005778 <vPortValidateInterruptPriority+0x78>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	429a      	cmp	r2, r3
 800574a:	d90a      	bls.n	8005762 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	603b      	str	r3, [r7, #0]
}
 800575e:	bf00      	nop
 8005760:	e7fe      	b.n	8005760 <vPortValidateInterruptPriority+0x60>
	}
 8005762:	bf00      	nop
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	bc80      	pop	{r7}
 800576a:	4770      	bx	lr
 800576c:	e000e3f0 	.word	0xe000e3f0
 8005770:	200022b0 	.word	0x200022b0
 8005774:	e000ed0c 	.word	0xe000ed0c
 8005778:	200022b4 	.word	0x200022b4

0800577c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b08a      	sub	sp, #40	; 0x28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005784:	2300      	movs	r3, #0
 8005786:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005788:	f7fe fe2e 	bl	80043e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800578c:	4b58      	ldr	r3, [pc, #352]	; (80058f0 <pvPortMalloc+0x174>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005794:	f000 f910 	bl	80059b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005798:	4b56      	ldr	r3, [pc, #344]	; (80058f4 <pvPortMalloc+0x178>)
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4013      	ands	r3, r2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f040 808e 	bne.w	80058c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d01d      	beq.n	80057e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80057ac:	2208      	movs	r2, #8
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4413      	add	r3, r2
 80057b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f003 0307 	and.w	r3, r3, #7
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d014      	beq.n	80057e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f023 0307 	bic.w	r3, r3, #7
 80057c4:	3308      	adds	r3, #8
 80057c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <pvPortMalloc+0x6c>
	__asm volatile
 80057d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	617b      	str	r3, [r7, #20]
}
 80057e4:	bf00      	nop
 80057e6:	e7fe      	b.n	80057e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d069      	beq.n	80058c2 <pvPortMalloc+0x146>
 80057ee:	4b42      	ldr	r3, [pc, #264]	; (80058f8 <pvPortMalloc+0x17c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d864      	bhi.n	80058c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80057f8:	4b40      	ldr	r3, [pc, #256]	; (80058fc <pvPortMalloc+0x180>)
 80057fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80057fc:	4b3f      	ldr	r3, [pc, #252]	; (80058fc <pvPortMalloc+0x180>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005802:	e004      	b.n	800580e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	429a      	cmp	r2, r3
 8005816:	d903      	bls.n	8005820 <pvPortMalloc+0xa4>
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1f1      	bne.n	8005804 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005820:	4b33      	ldr	r3, [pc, #204]	; (80058f0 <pvPortMalloc+0x174>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005826:	429a      	cmp	r2, r3
 8005828:	d04b      	beq.n	80058c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2208      	movs	r2, #8
 8005830:	4413      	add	r3, r2
 8005832:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	1ad2      	subs	r2, r2, r3
 8005844:	2308      	movs	r3, #8
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	429a      	cmp	r2, r3
 800584a:	d91f      	bls.n	800588c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800584c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4413      	add	r3, r2
 8005852:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <pvPortMalloc+0xf8>
	__asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	613b      	str	r3, [r7, #16]
}
 8005870:	bf00      	nop
 8005872:	e7fe      	b.n	8005872 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	1ad2      	subs	r2, r2, r3
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005886:	69b8      	ldr	r0, [r7, #24]
 8005888:	f000 f8f8 	bl	8005a7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800588c:	4b1a      	ldr	r3, [pc, #104]	; (80058f8 <pvPortMalloc+0x17c>)
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	4a18      	ldr	r2, [pc, #96]	; (80058f8 <pvPortMalloc+0x17c>)
 8005898:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800589a:	4b17      	ldr	r3, [pc, #92]	; (80058f8 <pvPortMalloc+0x17c>)
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	4b18      	ldr	r3, [pc, #96]	; (8005900 <pvPortMalloc+0x184>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d203      	bcs.n	80058ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058a6:	4b14      	ldr	r3, [pc, #80]	; (80058f8 <pvPortMalloc+0x17c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a15      	ldr	r2, [pc, #84]	; (8005900 <pvPortMalloc+0x184>)
 80058ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	4b10      	ldr	r3, [pc, #64]	; (80058f4 <pvPortMalloc+0x178>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	431a      	orrs	r2, r3
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	2200      	movs	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058c2:	f7fe fd9f 	bl	8004404 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00a      	beq.n	80058e6 <pvPortMalloc+0x16a>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	60fb      	str	r3, [r7, #12]
}
 80058e2:	bf00      	nop
 80058e4:	e7fe      	b.n	80058e4 <pvPortMalloc+0x168>
	return pvReturn;
 80058e6:	69fb      	ldr	r3, [r7, #28]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3728      	adds	r7, #40	; 0x28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	20002ec0 	.word	0x20002ec0
 80058f4:	20002ecc 	.word	0x20002ecc
 80058f8:	20002ec4 	.word	0x20002ec4
 80058fc:	20002eb8 	.word	0x20002eb8
 8005900:	20002ec8 	.word	0x20002ec8

08005904 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d048      	beq.n	80059a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005916:	2308      	movs	r3, #8
 8005918:	425b      	negs	r3, r3
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	4413      	add	r3, r2
 800591e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	4b21      	ldr	r3, [pc, #132]	; (80059b0 <vPortFree+0xac>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4013      	ands	r3, r2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10a      	bne.n	8005948 <vPortFree+0x44>
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	60fb      	str	r3, [r7, #12]
}
 8005944:	bf00      	nop
 8005946:	e7fe      	b.n	8005946 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00a      	beq.n	8005966 <vPortFree+0x62>
	__asm volatile
 8005950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	60bb      	str	r3, [r7, #8]
}
 8005962:	bf00      	nop
 8005964:	e7fe      	b.n	8005964 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	4b11      	ldr	r3, [pc, #68]	; (80059b0 <vPortFree+0xac>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4013      	ands	r3, r2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d019      	beq.n	80059a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d115      	bne.n	80059a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	4b0b      	ldr	r3, [pc, #44]	; (80059b0 <vPortFree+0xac>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	43db      	mvns	r3, r3
 8005986:	401a      	ands	r2, r3
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800598c:	f7fe fd2c 	bl	80043e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	4b07      	ldr	r3, [pc, #28]	; (80059b4 <vPortFree+0xb0>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4413      	add	r3, r2
 800599a:	4a06      	ldr	r2, [pc, #24]	; (80059b4 <vPortFree+0xb0>)
 800599c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800599e:	6938      	ldr	r0, [r7, #16]
 80059a0:	f000 f86c 	bl	8005a7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80059a4:	f7fe fd2e 	bl	8004404 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059a8:	bf00      	nop
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	20002ecc 	.word	0x20002ecc
 80059b4:	20002ec4 	.word	0x20002ec4

080059b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80059c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80059c4:	4b27      	ldr	r3, [pc, #156]	; (8005a64 <prvHeapInit+0xac>)
 80059c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f003 0307 	and.w	r3, r3, #7
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00c      	beq.n	80059ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	3307      	adds	r3, #7
 80059d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0307 	bic.w	r3, r3, #7
 80059de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	4a1f      	ldr	r2, [pc, #124]	; (8005a64 <prvHeapInit+0xac>)
 80059e8:	4413      	add	r3, r2
 80059ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059f0:	4a1d      	ldr	r2, [pc, #116]	; (8005a68 <prvHeapInit+0xb0>)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80059f6:	4b1c      	ldr	r3, [pc, #112]	; (8005a68 <prvHeapInit+0xb0>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	4413      	add	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a04:	2208      	movs	r2, #8
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	1a9b      	subs	r3, r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0307 	bic.w	r3, r3, #7
 8005a12:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4a15      	ldr	r2, [pc, #84]	; (8005a6c <prvHeapInit+0xb4>)
 8005a18:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a1a:	4b14      	ldr	r3, [pc, #80]	; (8005a6c <prvHeapInit+0xb4>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a22:	4b12      	ldr	r3, [pc, #72]	; (8005a6c <prvHeapInit+0xb4>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	1ad2      	subs	r2, r2, r3
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a38:	4b0c      	ldr	r3, [pc, #48]	; (8005a6c <prvHeapInit+0xb4>)
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	4a0a      	ldr	r2, [pc, #40]	; (8005a70 <prvHeapInit+0xb8>)
 8005a46:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	4a09      	ldr	r2, [pc, #36]	; (8005a74 <prvHeapInit+0xbc>)
 8005a4e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a50:	4b09      	ldr	r3, [pc, #36]	; (8005a78 <prvHeapInit+0xc0>)
 8005a52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a56:	601a      	str	r2, [r3, #0]
}
 8005a58:	bf00      	nop
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bc80      	pop	{r7}
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	200022b8 	.word	0x200022b8
 8005a68:	20002eb8 	.word	0x20002eb8
 8005a6c:	20002ec0 	.word	0x20002ec0
 8005a70:	20002ec8 	.word	0x20002ec8
 8005a74:	20002ec4 	.word	0x20002ec4
 8005a78:	20002ecc 	.word	0x20002ecc

08005a7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a84:	4b27      	ldr	r3, [pc, #156]	; (8005b24 <prvInsertBlockIntoFreeList+0xa8>)
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	e002      	b.n	8005a90 <prvInsertBlockIntoFreeList+0x14>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d8f7      	bhi.n	8005a8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d108      	bne.n	8005abe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	441a      	add	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	441a      	add	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d118      	bne.n	8005b04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	4b14      	ldr	r3, [pc, #80]	; (8005b28 <prvInsertBlockIntoFreeList+0xac>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d00d      	beq.n	8005afa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	441a      	add	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	e008      	b.n	8005b0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005afa:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <prvInsertBlockIntoFreeList+0xac>)
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	e003      	b.n	8005b0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d002      	beq.n	8005b1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b1a:	bf00      	nop
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bc80      	pop	{r7}
 8005b22:	4770      	bx	lr
 8005b24:	20002eb8 	.word	0x20002eb8
 8005b28:	20002ec0 	.word	0x20002ec0

08005b2c <__libc_init_array>:
 8005b2c:	b570      	push	{r4, r5, r6, lr}
 8005b2e:	2600      	movs	r6, #0
 8005b30:	4d0c      	ldr	r5, [pc, #48]	; (8005b64 <__libc_init_array+0x38>)
 8005b32:	4c0d      	ldr	r4, [pc, #52]	; (8005b68 <__libc_init_array+0x3c>)
 8005b34:	1b64      	subs	r4, r4, r5
 8005b36:	10a4      	asrs	r4, r4, #2
 8005b38:	42a6      	cmp	r6, r4
 8005b3a:	d109      	bne.n	8005b50 <__libc_init_array+0x24>
 8005b3c:	f000 f830 	bl	8005ba0 <_init>
 8005b40:	2600      	movs	r6, #0
 8005b42:	4d0a      	ldr	r5, [pc, #40]	; (8005b6c <__libc_init_array+0x40>)
 8005b44:	4c0a      	ldr	r4, [pc, #40]	; (8005b70 <__libc_init_array+0x44>)
 8005b46:	1b64      	subs	r4, r4, r5
 8005b48:	10a4      	asrs	r4, r4, #2
 8005b4a:	42a6      	cmp	r6, r4
 8005b4c:	d105      	bne.n	8005b5a <__libc_init_array+0x2e>
 8005b4e:	bd70      	pop	{r4, r5, r6, pc}
 8005b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b54:	4798      	blx	r3
 8005b56:	3601      	adds	r6, #1
 8005b58:	e7ee      	b.n	8005b38 <__libc_init_array+0xc>
 8005b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b5e:	4798      	blx	r3
 8005b60:	3601      	adds	r6, #1
 8005b62:	e7f2      	b.n	8005b4a <__libc_init_array+0x1e>
 8005b64:	08005d58 	.word	0x08005d58
 8005b68:	08005d58 	.word	0x08005d58
 8005b6c:	08005d58 	.word	0x08005d58
 8005b70:	08005d5c 	.word	0x08005d5c

08005b74 <memcpy>:
 8005b74:	440a      	add	r2, r1
 8005b76:	4291      	cmp	r1, r2
 8005b78:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b7c:	d100      	bne.n	8005b80 <memcpy+0xc>
 8005b7e:	4770      	bx	lr
 8005b80:	b510      	push	{r4, lr}
 8005b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b86:	4291      	cmp	r1, r2
 8005b88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b8c:	d1f9      	bne.n	8005b82 <memcpy+0xe>
 8005b8e:	bd10      	pop	{r4, pc}

08005b90 <memset>:
 8005b90:	4603      	mov	r3, r0
 8005b92:	4402      	add	r2, r0
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d100      	bne.n	8005b9a <memset+0xa>
 8005b98:	4770      	bx	lr
 8005b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b9e:	e7f9      	b.n	8005b94 <memset+0x4>

08005ba0 <_init>:
 8005ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba2:	bf00      	nop
 8005ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ba6:	bc08      	pop	{r3}
 8005ba8:	469e      	mov	lr, r3
 8005baa:	4770      	bx	lr

08005bac <_fini>:
 8005bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bae:	bf00      	nop
 8005bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bb2:	bc08      	pop	{r3}
 8005bb4:	469e      	mov	lr, r3
 8005bb6:	4770      	bx	lr
